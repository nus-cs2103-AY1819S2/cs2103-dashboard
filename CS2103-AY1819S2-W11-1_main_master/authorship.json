[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d TopDeck"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": "https://travis-ci.org/cs2103-ay1819s2-w11-1/main[image:https://travis-ci.org/cs2103-ay1819s2-w11-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": "https://ci.appveyor.com/project/xsot/main[image:https://ci.appveyor.com/api/projects/status/dq5htf37drt5upce?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "https://coveralls.io/github/cs2103-ay1819s2-w11-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/cs2103-ay1819s2-w11-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": "* TopDeck is a general purpose flash card application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "* TopDeck allows you to create flash cards and use them to remember things."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "* Example uses:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "** Cramming for an exam"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": "** Learning a language"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": "** Matching names to faces"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "** Memorising trivia"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "* TopDeck has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "* Forked from AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "xsot": 12,
      "-": 27
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sciffany"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"githubId\": \"ChangDarren\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"displayname\": \"CHA...HEN\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"authorNames\": [\"ChangDarren\", \"Darren\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"githubId\": \"sciffany\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"displayname\": \"CHO...ANY\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"authorNames\": [\"sciffany\", \"Tiffany Chong\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"githubId\": \"ckjohn000\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"displayname\": \"WON...OHN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"authorNames\": [\"ckjohn000\", \"Wong Chin Kiat, John\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"githubId\": \"xsot\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"displayname\": \"KUA...ENG\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"authorNames\": [\"xsot\", \"Wei Heng\", \"Kuan Wei Heng\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 25
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xsot"
        },
        "content": "        \u0027site-name\u0027: \u0027TopDeck\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xsot"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2103-ay1819s2-w11-1/main\u0027"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "xsot": 2,
      "-": 234
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"file\" value\u003d\"config/checkstyle/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Required for SuppressionCommentFilter to work --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FileContentsHolder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    IMPORT CHECKS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      1. STATIC: static imports"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is redundant if:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is unused if:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    NAMING CHECKS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "      Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "      C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "      the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        else"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!--"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "      else if {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // Not allowed"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UpperEll\" /\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "      some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    ORDER CHECKS"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "      2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "      3. Constructors"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "      4. Methods"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "           8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "           public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "           synchronized, native, strictfp"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    WHITESPACE CHECKS"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "           by regular or curly braces."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "           \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "xsot"
        },
        "content": "      \u003cproperty name\u003d\"caseIndent\" value\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "         a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "         a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    JAVADOC CHECKS"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks public methods that have more than 1 line of code."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        Single line of code methods are often due to refactor for readability."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every non-trivial private method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks private methods that have more than 3 lines of code."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        We define methods that have more than 3 lines of code as non-trivial."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"private\"/\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "xsot": 1,
      "-": 422
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": "TopDeck was developed by team https://github.com/cs2103-ay1819s2-w11-1/[W11-1]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Kuan Wei Heng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": "image::xsot.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "{empty}[http://github.com/xsot[github]] [\u003c\u003cxsot#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "Responsibilities: TBC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Darren Chang"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "image::changdarren.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "{empty}[http://github.com/changdarren[github]] [\u003c\u003cchangdarren#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "Responsibilities: TBC"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d John Wong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "image::ckjohn000.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "{empty}[http://github.com/ckjohn000[github]] [\u003c\u003cckjohn000#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": "Responsibilities: TBC"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Tiffany Chong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xsot"
        },
        "content": "image::sciffany.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xsot"
        },
        "content": "{empty}[http://github.com/sciffany[github]] [\u003c\u003csciffany#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xsot"
        },
        "content": "Responsibilities: TBC"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "xsot": 17,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2103-ay1819s2-w11-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": "* *Email us* : You can also reach us at `kuanwh [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "xsot": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d TopDeck - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w11-1/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "By: `W11-1`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "Welcome to the developer guide."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "This guide serves as a repository of useful information for anyone contributing to TopDeck."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "To get started, proceed to \u003c\u003cSetting up\u003e\u003e to set up your development environment."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003c\u003cDesign\u003e\u003e provides a high-level overview of the design and architecture of TopDeck."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003c\u003cImplementation\u003e\u003e discusses specific implementation details of some features."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003c\u003cDocumentation\u003e\u003e, \u003c\u003cTesting\u003e\u003e and \u003c\u003cDev Ops\u003e\u003e describe the procedures involved in pushing a feature to production."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xsot"
        },
        "content": "When you are ready to start coding, get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "image::TopDeckUIClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xsot"
        },
        "content": ".  `Logic` uses the `TopDeckParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xsot"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a deck)."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "image::TopDeckModelComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "* stores the TopDeck data."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cCard\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "image::TopDeckStorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "* can save the TopDeck data in json format and read it back."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Stateful user interface"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xsot"
        },
        "content": "TopDeck has a stateful user interface."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xsot"
        },
        "content": "This means that the set of valid commands and their respective functionality"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xsot"
        },
        "content": "depend on the context of the application state."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xsot"
        },
        "content": "For example, the command word `add` is \"overloaded\" with two capabilities:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xsot"
        },
        "content": "1. In decks view, it adds a new deck: `add DECK_NAME`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "xsot"
        },
        "content": "2. In cards view, it adds a new card to a particular deck: `add q/QUESTION a/ANSWER`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "xsot"
        },
        "content": "It is the active state in TopDeck that resolves the actual command that is called."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "xsot"
        },
        "content": "Also, TopDeck does not request information from the user that is already implicit in the state"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "xsot"
        },
        "content": "(e.g. the target deck in the second command)."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "xsot"
        },
        "content": "The reasons for choosing to implement a stateful user interface are manifold."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "xsot"
        },
        "content": "Most importantly, it is necessary to support the implementation of study view which is stateful in nature."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "xsot"
        },
        "content": "A stateful user interface is also preferable to end users since it"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "xsot"
        },
        "content": "requires less cognitive effort to operate by virtue of the fewer and shorter commands."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "xsot"
        },
        "content": "However, implementing state in full generality required nontrivial modifications to the AB4 architecture."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "xsot"
        },
        "content": "We will now describe how state is implemented in TopDeck."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "xsot"
        },
        "content": "States partition the functionalities that are exposed to users."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "xsot"
        },
        "content": "Hence, it is natural to consider distinct views in the user interface as separate states."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "xsot"
        },
        "content": "States in TopDeck correspond to the three possible views described in the user guide:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "xsot"
        },
        "content": "decks view, cards view and study view."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "xsot"
        },
        "content": "The following figure illustrates the transitions between these states."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "xsot"
        },
        "content": ".State diagram for TopDeck"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "xsot"
        },
        "content": "image::state_diagram.png[]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "xsot"
        },
        "content": "////"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "xsot"
        },
        "content": "[plantuml]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "xsot"
        },
        "content": "...."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "xsot"
        },
        "content": "(*) --\u003e \"Decks view\""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "xsot"
        },
        "content": "\"Decks view\" -\u003e [Open] \"Cards view\""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "xsot"
        },
        "content": "\"Cards view\" --\u003e [Close] \"Decks view\""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "xsot"
        },
        "content": "\"Decks view\" --\u003e [Study] \"Study view\""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "xsot"
        },
        "content": "\"Study view\" -\u003e [Finish study] \"Decks view\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "xsot"
        },
        "content": "...."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "xsot"
        },
        "content": "////"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "xsot"
        },
        "content": "Each state implements a common interface `ViewState`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "xsot"
        },
        "content": "and holds transient data that is relevant only while the state is active."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "xsot"
        },
        "content": "For example, `CardsView` has a member `activeDeck` which holds a reference to the deck opened in decks view."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "xsot"
        },
        "content": "Commands in cards view such as `add` will then operate on this deck."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "xsot"
        },
        "content": "`ModelManager` owns the sole instance of `ViewState`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "xsot"
        },
        "content": "Having only one instance of any state makes it trivial to enforce mutual exclusion."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "xsot"
        },
        "content": "The `Model` is also responsible for executing state transitions."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "xsot"
        },
        "content": "Each transition is exposed as a method in the `Model` API."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "xsot"
        },
        "content": "For example, `Model#changeDeck(Deck deck)` implements the transition from decks view to cards view."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "xsot"
        },
        "content": "As state entry is handled by the constructors of each state,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "xsot"
        },
        "content": "the implementation of a transition is as simple as constructing a new state object."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "xsot"
        },
        "content": "Technically, `Model#changeDeck(Deck deck)` can be called from any state, not just decks view."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "xsot"
        },
        "content": "This is a consequence of the design of `Model`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "xsot"
        },
        "content": "The `Model` API is designed such that no state tracking is necessary."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "xsot"
        },
        "content": "All methods are expected to work regardless of the current state."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "xsot"
        },
        "content": "We assume that if a caller is capable of providing the required arguments to a method,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "xsot"
        },
        "content": "the method call is valid and expected."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "xsot"
        },
        "content": "This obviates the need for state-checking code in `ModelManager`."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Deck management"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Data structure implementation"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "A Deck consists of a list of `cards`. Decks are deemed as equal if they have the same name. This"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "is to prevent users from creating 2 or more decks with the same name."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "Within the Model, `Deck` is encapsulated by the following data structure:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "* `Model`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "* `VersionedTopDeck`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "* `TopDeck`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "* `UniqueDeckList`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "* `Deck`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "The Create, Read, Update and Delete(CRUD) operation will trickle down the encapsulations"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "and be executed in `UniqueDeckList`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "Deck Management is facilitated by `Deck` which implements the following operations:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "* adddeck(Deck deck)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "* editdeck(Deck deck)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "* deletedeck(Deck deck)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "* select(Deck toSelect)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "The CRUD operations are exposed in the Model interface as `Model#addDeck(Deck deck)` and"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "`Model#deleteDeck(Deck toDelete)`. For each deck operation,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "there are 2 main updates that need to be done. The first update will be on the model"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "and the second will be on the `ViewState`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "Given below is an example usage scenario and how the addDeck(Deck) mechanism behaves at each step:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "1. The user starts up the application and is in the `DecksView`. The user then"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "executes the `addDeck` command `adddeck n/NAME` to create a new deck. The `adddeck` command"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "is parsed and calls `Model#addDeck(Deck deck)`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "2. `Model#addDeck(Deck deck)` first checks if the current state is a"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "DecksView. Following, it will create a new deck to be added into `VersionedTopDeck.addDeck(Deck deck)."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "3. Once that is done, the filteredItems list is being updated to reflect the change."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "4. To continue to add `cards`, the user will then execute the command `select INDEX`. For example, user"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "executes the `select 1` command to select the first deck. This should change the `ViewState` in the"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "`ModelManager` from `DeckView` to `CardView`. For more information on `cards`, refer to cards\u0027s feature."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "// tag::card[]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Card management"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Data structure"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "A Card consists of a question, an answer and the respective tags associated with it."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Card\u0027s are deemed as equal if they have the same question to prevent the user from"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "creating same question twice or to have 2 different answer for the same question."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Cards are stored inside a `Deck` as a list of unique cards."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "The Create, Read, Update and Delete (CRUD) operation of a card in a chosen `Deck` is thus a modification of"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "the chosen `Deck`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "In order to facilitate the CRUD operations, `CardsView` contains `activeDeck` which is a reference to the"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "current deck that we are modifying."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Before any Card related operation can be executed, `ViewState` in ModelManager has to be of type `CardsView`."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "For more information refer to the section on ViewState management."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "xsot"
        },
        "content": "Card management is currently facilitated by `Model` which implements the following operations:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "* hasCard(Card card, Deck deck)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "* addCard(Card card, Deck deck)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "* removeCard(Card target, Deck deck)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "* editCard(Card newCard, Deck deck)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "The CRUD operations are exposed in the Model interface as `Model#addCard(Card card, Deck deck)`,"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "`Model#deleteCard(Card target, Deck deck)` and `Model#setCard(Card target, Card newCard, Deck deck)`. For each operation,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "there are 2 objects that need to be updated namely, `VersionedTopDeck` and `CardsView`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Each CRUD operation can be broken down into the following steps:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "1. Find the chosen deck using `CardsView.activeDeck` and create a new deck from it."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "2. Execute `VersionedTopDeck#addCard(Card newCard, Deck deck)` or"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "`VersionedTopDeck#removeCard(Card target, Deck deck)` or"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "`VersionedTopDeck#setCard(Card target, Card editedCard, Deck deck)` using `CardsView.activeDeck`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "3. Update the `CardsView` with the new editedDeck."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "4. Update the UI to reflect the new CardsView."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Given below is an example usage scenario and how the CRUD operation works and how it"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "interacts with Undo/Redo:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Step 1. The user starts up the application and is in the `DecksView`. The user then"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "executes the `open 1` command to open the first deck(D1 in the figure). This should change the"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "`ViewState` in the `ModelManager` from `DeckView` to `CardsView` and causes"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "`CardsView.activeDeck` to point to the first deck as per figure 1. For more information, refer to"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Deck\u0027s feature."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "image::card_dg_diagrams/card_diag_1.png[width\u003d\"800\", caption\u003d\"Figure 1\"]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Step 2. The user executes `add q/question a/answer` to add the new card into the current deck."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "The `add` command is parsed and calls `Model#addCard(Card card, Deck deck)`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "`VersionedTopDeck(Card newCard, Deck deck)` is then called. D3 which is a copy"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "of D1 is created and the new card is added to D3. `VersionedTopDeck` is then updated"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "as per figure 2 by calling `UniqueDeckList.setDeck(Deck target, Deck editedDeck)`."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "All other CRUD operations works the same except for the model call. Instead of"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "`Model#addCard(Card card, Deck deck)`, `Model#deleteCard(Card target, Deck deck)` or"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "`Model#setCard(Card target, Card newCard, Deck deck)` is called instead."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "image::card_dg_diagrams/card_diag_2.png[width\u003d\"800\", caption\u003d\"Figure 2\"]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Step 3. Next, the CardsView is updated creating a new `CardsView` that points to D3"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "as in figure 3."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "image::card_dg_diagrams/card_diag_3.png[width\u003d\"800\", caption\u003d\"Figure 3\"]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Step 4. Once that is done, the `ModelManager.filteredItems` list and the UI is being updated to"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "reflect the change."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Step 5. Now the user executes `undo`. This results in the the CurrentStatePointer to point"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "to the previous TopDeck as per figure 4."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "image::card_dg_diagrams/card_diag_4.png[width\u003d\"800\", caption\u003d\"Figure 4\"]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Step 6. Using D3, the application will get D1 in the TopDeck that is pointed to by CurrentStatePointer."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "A new CardsView(CardsView3) is then created and points to D1 as per figure 5. The application"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "then updates `ModelManager.filteredItems` and the UI is being updated."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "image::card_dg_diagrams/card_diag_5.png[width\u003d\"800\", caption\u003d\"Figure 5\"]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Step 7. Now, the user executes redo. This results in the the CurrentStatePointer to point"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "to the next TopDeck as per figure 6."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "image::card_dg_diagrams/card_diag_6.png[width\u003d\"800\", caption\u003d\"Figure 6\"]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Step 8. Using D1, the application will get D3 in the TopDeck that is pointed to by CurrentStatePointer."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "   A new CardsView(CardsView4) is then created and points to D3 as per figure 7. The application"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "   then updates `ModelManager.filteredItems` and the UI is being updated."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "image::card_dg_diagrams/card_diag_7.png[width\u003d\"800\", caption\u003d\"Figure 7\"]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "Step 9. Below is the final state of `ModelManager`:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "image::card_dg_diagrams/card_diag_8.png[width\u003d\"800\", caption\u003d\"Figure 8\"]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How CRUD operation should work"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "* **Alternative 1 (current choice):** Recreate the CardViews after each operation"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "** Pros: Leverages on the current implementation of `VersionTopDeck` making it easier to"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "implement."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "** Cons: Constantly creating `CardsView` even with a small change."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "* **Alternative 2:** CardView updates itself base on the chosen deck."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "** Pros: Only has to update the pointer to the current Deck."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "** Cons: As `CardsView.activeDeck` can only reference to one deck only, the current Undo/Redo feature"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "will have to be changed to store the previous commands and the object changed."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "// end::card[]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sciffany"
        },
        "content": "//tag::studysessions[]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003d\u003d\u003d Study view"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "sciffany"
        },
        "content": "The purpose of the third view, study view, is to help users retain the knowledge"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sciffany"
        },
        "content": "of their flash cards."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sciffany"
        },
        "content": "This is done by consecutively presenting users with random cards from the deck."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sciffany"
        },
        "content": "For each card, users are able to see the questions first, and then reveal the answers afterwards."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "sciffany"
        },
        "content": "The functionality above is supported by the `StudyView` class."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Important Variables**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sciffany"
        },
        "content": "This `StudyView` class two important variables:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* `currentCard` - the card which is currently being shown to the user."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* `currentStudyState` - variable which stores a `studyState` enum. The enum can be either `QUESTION` or `ANSWER`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "sciffany"
        },
        "content": "These two important variables are continuously being altered every time the user interacts with the program,"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "sciffany"
        },
        "content": "explained in detail later."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Observable Values**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Besides these variables, `StudyView` also makes extensive use of `ReadOnlyProperty` wrapper"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "sciffany"
        },
        "content": "to store variables which the UI has to display. This wrapper is chosen as it implements the `Observable` interface."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003d\u003d\u003d\u003d Data structure implementation"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "sciffany"
        },
        "content": "This section discusses how the two variables, `currentCard` and `studyState` are continuously modified,"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "sciffany"
        },
        "content": "and also the other variables that change as a result of these two functions."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Given below is an example usage scenario and how the `study` mechanism behaves at each step."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Step 1. User enter study mode using `study 1` command."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "sciffany"
        },
        "content": "A `StudyDeckCommand` is issued."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Upon the execution of this command, Model\u0027s `viewState` will now hold a `StudyView` object with 1st deck as active deck."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "sciffany"
        },
        "content": "As part of the execution of `StudyDeckCommand`, step 2 is ran."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Step 2. Generating a question."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "sciffany"
        },
        "content": "In order to present questions to users, these are the functions called by the `GenerateQuestionCommand()`:"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* `DeckSuffler#generateCard()` The `DeckShuffler` class has an algorithm (implementation explained later)"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "sciffany"
        },
        "content": "to select a Card object, and passes this reference to `StudyView`."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * `currentCard` refers now to that card."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* `currentState` is set to QUESTION."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* Consequently, `textShown` property is also modified. In this case, it will contain"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sciffany"
        },
        "content": "the question  of the chosen card."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Step 2. User executes the `[wildcard]` command to signal that he has come up with the answer."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* User answer, ie whatever the user wrote, is stored as command under the statistics variable."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Step 3. The  command generates a `ShowAnswerCommand()`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "sciffany"
        },
        "content": "The follwing are ran upon execution of the show answer command:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* `currentStudyState` to ANSWER."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* Similar to the above, we also change the `textShown` property to show user answer instead."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Step 4. User enters the difficulty rating \"command\" to rate how difficult they thought it was to recall"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "sciffany"
        },
        "content": "the answer."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sciffany"
        },
        "content": "The following things happen:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* Their answer stored under userAnswer variable, which will be displayed later."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* This is perfect as we do not want users to revert statistics by executing undo command."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* `GenerateQuestionCommand()` is executed once again. Back to Step 2."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003d\u003d\u003d\u003d UI implementation"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sciffany"
        },
        "content": "The UI listens for three things: the `studyState`, `userAnswer`, and `textShown`."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sciffany"
        },
        "content": "The first is important because depending on whether it\u0027s question or answer, we"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "sciffany"
        },
        "content": "modify the colours of flash cards in the UI. This variables also specifies whether or not we need to display users\u0027"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "sciffany"
        },
        "content": "answers and whether or not we need to prompt them to rate the difficulty."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "sciffany"
        },
        "content": "The second is important to show the users what they answered."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "sciffany"
        },
        "content": "The last is important to show the contents of the flash card."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to store states within  study view"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "sciffany"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sciffany"
        },
        "content": "** Cons: UI just changes state based on commands issued."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* **Alternative 2: (current choice):** Use an event listener to see whether the `textShown` has changed."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Because it is easy to modify textShown immediately, there is no need for the UI to track this variable as"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "sciffany"
        },
        "content": "that would be costly."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003d\u003d\u003d\u003d UI implementation"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "sciffany"
        },
        "content": "UI uses event listeners to know the"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "sciffany"
        },
        "content": "// end::studysessions[]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003d\u003d\u003d Undo/redo feature"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "sciffany"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedTopDeck`."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "sciffany"
        },
        "content": "It extends `TopDeck` with an undo/redo history, stored internally as an `TopDeckStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* `VersionedTopDeck#commit()` -- Saves the current TopDeck state in its history."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* `VersionedTopDeck#undo()` -- Restores the previous TopDeck state from its history."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* `VersionedTopDeck#redo()` -- Restores a previously undone TopDeck state from its history."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "sciffany"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitTopDeck()`, `Model#undoTopDeck()` and `Model#redoTopDeck()` respectively."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedTopDeck` will be initialized with the initial TopDeck state, and the `currentStatePointer` pointing to that single TopDeck state."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in TopDeck. The `delete` command calls `Model#commitTopDeck()`, causing the modified state of TopDeck after the `delete 5` command executes to be saved in the `topDeckStateList`, and the `currentStatePointer` is shifted to the newly inserted TopDeck state."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitTopDeck()`, causing another modified TopDeck state to be saved into the `topDeckStateList`."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "sciffany"
        },
        "content": "If a command fails its execution, it will not call `Model#commitTopDeck()`, so the TopDeck state will not be saved into the `topDeckStateList`."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoTopDeck()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous TopDeck state, and restores TopDeck to that state."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "sciffany"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial TopDeck state, then there are no previous TopDeck states to restore. The `undo` command uses `Model#canUndoTopDeck()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "sciffany"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoTopDeck()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores TopDeck to that state."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "sciffany"
        },
        "content": "If the `currentStatePointer` is at index `topDeckStateList.size() - 1`, pointing to the latest TopDeck state, then there are no undone TopDeck states to restore. The `redo` command uses `Model#canRedoTopDeck()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify TopDeck, such as `list`, will usually not call `Model#commitTopDeck()`, `Model#undoTopDeck()` or `Model#redoTopDeck()`. Thus, the `topDeckStateList` remains unchanged."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "sciffany"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitTopDeck()`. Since the `currentStatePointer` is not pointing at the end of the `topDeckStateList`, all TopDeck states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* **Alternative 1 (current choice):** Saves all TopDeck data."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "sciffany"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of TopDeck states."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "sciffany"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedTopDeck`."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data encryption"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Editing documentation"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Publishing documentation"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Converting documentation to PDF format"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Site-wide documentation settings"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Per-file documentation settings"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Site template"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Running tests"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Troubleshooting testing"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Build automation"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Continuous integration"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Coverage reporting"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Documentation previews"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Making a release"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Managing dependencies"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "xsot"
        },
        "content": "A project often depends on third-party libraries. For example, TopDeck depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d Product scope"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d User stories"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "xsot"
        },
        "content": "|`*` |user with many persons in TopDeck |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d Use cases"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "xsot"
        },
        "content": "(For all use cases below, the *System* is `TopDeck` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Use case: Delete deck"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "xsot"
        },
        "content": "1.  User requests to list decks"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "xsot"
        },
        "content": "2.  TopDeck shows a list of decks"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "xsot"
        },
        "content": "3.  User requests to delete a specific deck in the list"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "xsot"
        },
        "content": "4.  TopDeck deletes the deck"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "xsot"
        },
        "content": "** 3a1. TopDeck shows an error message."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d Non functional requirements"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d Product survey"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d Instructions for manual testing"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Launch and shutdown"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Deleting a deck"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "xsot"
        },
        "content": ". Deleting a deck while all decks are listed"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "xsot"
        },
        "content": ".. Prerequisites: List all decks using the `list` command. Multiple decks in the list."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "xsot"
        },
        "content": "   Expected: First deck is deleted from the list. Details of the deleted deck shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "xsot"
        },
        "content": "   Expected: No deck is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 114,
      "ckjohn000": 41,
      "xsot": 127,
      "sciffany": 135,
      "-": 602
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003d Top Deck - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w11-1/main/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "By: `W11-1`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "TopDeck is a desktop app for anyone who relies on flash cards to memorise things."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "TopDeck helps you digitise your flash cards and keeps them organised."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "You can easily review your cards and TopDeck will track your performance."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": "Improve your memory without the hassle of managing a physical pile of cards!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "TopDeck is optimized for those who prefer to work with a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "If this sounds like the tool you have been looking for,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "jump to \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": "To get started with TopDeck:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": ".  Download the latest `topdeck.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xsot"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for TopDeck."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xsot"
        },
        "content": "Once you have set up TopDeck, you can try these commands:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xsot"
        },
        "content": "* `add Capitals` : creates a new deck named \"Capitals\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xsot"
        },
        "content": "* `delete 3` : deletes the third deck in the list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xsot"
        },
        "content": "* `exit` : exits the app"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xsot"
        },
        "content": "You may refer to \u003c\u003ccommands\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d User interface"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xsot"
        },
        "content": "TopDeck\u0027s interface is seperated into three different views."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xsot"
        },
        "content": "By default, TopDeck starts in \u003c\u003cdecksview,Decks View\u003e\u003e."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Decks View [[decksview]]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xsot"
        },
        "content": "This view displays a list of the decks in your collection."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xsot"
        },
        "content": "In decks view, you can:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xsot"
        },
        "content": "- Create, edit and delete decks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xsot"
        },
        "content": "- Open a deck to view its contents. TopDeck will enter \u003c\u003ccardsview,cards view\u003e\u003e."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xsot"
        },
        "content": "- Pick a deck to study. TopDeck will enter \u003c\u003cstudyview,study view\u003e\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Cards View [[cardsview]]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xsot"
        },
        "content": "This view displays the cards in a particular deck. In cards view, you can:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xsot"
        },
        "content": "- Create, edit and delete cards in the deck."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xsot"
        },
        "content": "- View your performance for specific cards."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Study View [[studyview]]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xsot"
        },
        "content": "In this view you can study a deck of cards."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d Commands [[commands]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xsot"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xsot"
        },
        "content": "  Example: In `add DECK_NAME`, `DECK_NAME` is a parameter which can be used as `add Spanish`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xsot"
        },
        "content": "* Items in square brackets are optional. +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xsot"
        },
        "content": "  Example: `q/QUESTION a/ANSWER [t/TAG]` can be used as `q/China a/Beijing t/Asia` or as `q/China a/Beijing`."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xsot"
        },
        "content": "* Items with `…`​ after them can be used any number of times including zero. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xsot"
        },
        "content": "  Example: `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/Asia`, `t/trivia t/history` etc."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xsot"
        },
        "content": "* Parameters can be in any order. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xsot"
        },
        "content": "  Example: If the command specifies `q/QUESTION a/ANSWER`, `q/QUESTION a/ANSWER` is also acceptable."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Decks View"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xsot"
        },
        "content": "These commands are only available in decks view."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Creating a deck: `add`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `add DECK_NAME`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Creates a new deck called `DECK_NAME`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a deck: `delete`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `delete INDEX`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Deletes the deck at `INDEX`."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xsot"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xsot"
        },
        "content": "The index refers to the index number shown in the displayed deck list. The index *must be a positive integer* 1, 2, 3..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Editing the name of a deck: `edit`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `edit INDEX NEW_DECK_NAME`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Changes the name of the deck at `INDEX` to `NEW_DECK_NAME`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a deck by name: `find`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `find KEYWORD`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Lists all decks containing `KEYWORD` in its name."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all decks: `list`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Format**: `list`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Displays a list of all decks."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting a deck: `select`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `select INDEX`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Selects the deck at `INDEX`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "\u003d\u003d\u003d\u003d Navigating into a deck: `open`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "**Format**: `open INDEX`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "**Outcome**: Opens the deck at `INDEX`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Studying a deck: `study`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `study INDEX`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Enters study view with the deck at `INDEX`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Cards View"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xsot"
        },
        "content": "These commands are only available in cards view."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xsot"
        },
        "content": "In this section, the active deck is the deck used in the `open` command."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a card to the active deck: `add`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `add q/QUESTION a/ANSWER`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Creates a new card with some front and back text and add it to the current deck."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a card in the active deck: `edit`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `edit INDEX q/QUESTION a/ANSWER`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Edits the text of the card at `INDEX`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a card in the active deck by name: `find`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `find KEYWORD`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Lists all cards within the current deck containing `KEYWORD` in its text."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all cards in the active deck: `list`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `list`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Displays a list of all cards in the deck."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a card in the active deck: `delete`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `delete INDEX`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Deletes the card at `INDEX`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Studying the active deck: `study`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `study`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Enters study view with the current deck."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Returning to decks view: `back`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `back`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Returns to decks view."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003d\u003d\u003d Study View"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sciffany"
        },
        "content": "These are commands are only available in study view, after `study` command is executed."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003d\u003d\u003d\u003d Returning to decks view: `done`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Format**: `done`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Outcome**: Returns to decks view."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d Global commands"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xsot"
        },
        "content": "These commands are available in all views."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Format**: `history`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Outcome**: Lists all the commands that you have entered in reverse chronological order"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing a command : `undo`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Format**: `undo`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Restores TopDeck to the state before the previous change."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Examples**:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "xsot"
        },
        "content": "* _In decks view_ +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xsot"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "xsot"
        },
        "content": "`undo` (undos `delete 1`) +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xsot"
        },
        "content": "* _In cards view_ +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xsot"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xsot"
        },
        "content": "`add q/Russia a/Moscow` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xsot"
        },
        "content": "`undo` (undos `add`) +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xsot"
        },
        "content": "`undo` (undos `delete`) +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xsot"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xsot"
        },
        "content": "Undoing is disabled in study view."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing a command : `redo`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Format**: `redo`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Restores the TopDeck to the state before an `undo`."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Examples**:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "xsot"
        },
        "content": "`undo` (undos `delete 1`) +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "xsot"
        },
        "content": "`redo` (redos `delete 1`) +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "xsot"
        },
        "content": "The `redo` command fails as there is no undone state to restore."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "xsot"
        },
        "content": "* _In cards view_ +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "xsot"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "xsot"
        },
        "content": "`add q/Panama a/Panama` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "xsot"
        },
        "content": "`undo` (undos `add`) +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "xsot"
        },
        "content": "`undo` (undos `delete`) +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "xsot"
        },
        "content": "`redo` (redos `delete`) +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "xsot"
        },
        "content": "`redo` (redos `add`) +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `help`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Outcome**: Displays information regarding commands"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Importing a deck: `import`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `import FILE_PATH`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Outcome**: Imports a deck from the given filepath"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting a deck: `export`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Format**: `export FILE_PATH`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Outcome**: Exports a deck to the given filepath"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Format**: `clear`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Outcome**: Clears all entries in TopDeck"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Format**: `exit`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sciffany"
        },
        "content": "**Outcome**: Exits the program"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "xsot"
        },
        "content": "\u003d\u003d\u003d\u003d Saving your data"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "xsot"
        },
        "content": "TopDeck data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sciffany"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous TopDeck folder."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Card**: Flash cards in TopDeck are called cards. Each card contains a question-answer pair."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "xsot"
        },
        "content": "When studying, TopDeck will show the question, and the answer will be revealed when prompted by the user."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "xsot"
        },
        "content": "**Deck**: A deck is a collection of cards that are studied together."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "A convenient cheat sheet of commands"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|Command | What does it do?"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`help` | Lists all available commands and their respective formats."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`list` | Displays a list of all available decks. If inside a deck displays all cards in that deck."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`add n/NAME` | Adds a new deck."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`edit INDEX n/NAME` | Edits the name of the deck at INDEX."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`delete INDEX` | Deletes the deck at INDEX."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`select INDEX` | Selects the deck at INDEX."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`open INDEX` | Navigates into the deck at INDEX. +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "Use `back` to navigate out of the deck."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`find NAME` | Finds a deck by name."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`add q/QUESTION a/ANSWER` | Adds a new card in the current deck. +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "You must be inside a deck to perform this operation."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`edit INDEX [q/QUESTION]-[a/ANSWER]` | Edits the details of the card at INDEX. +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "At least one parameter must be present. +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "You must be inside a deck to perform this operation."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`delete INDEX` | Deletes the card at INDEX. +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "You must be inside a deck to perform this operation."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`find NAME` | Finding a card in the active deck by name."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`study` | Studying the active deck."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`done` | Returning to deck view after studying."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`export INDEX` | Exports the deck at the specified INDEX. (Default location is the same folder as TopDeck)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`import FILEPATH` | Imports a deck from the `json` file at the specified FILEPATH."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`history` | List all entered commands in reverse chronological order."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`undo` | Undo previous command."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`redo` | Redo previously undone command."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`clear` | Clear all decks and cards."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|`exit` | Exits the program."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 37,
      "ChangDarren": 3,
      "xsot": 159,
      "sciffany": 42,
      "-": 114
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": "@import url(\u0027https://fonts.googleapis.com/css?family\u003dBree+Serif|Inconsolata|Source+Sans+Pro\u0027);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": "code,kbd,pre,samp{font-family:Inconsolata;font-size:1em}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xsot"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Source Sans Pro\",sans-serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xsot"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Bree Serif\",serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xsot"
        },
        "content": "code{font-family:\"Inconsolata\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xsot"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Inconsolata\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xsot"
        },
        "content": "kbd{font-family:\"Inconsolata\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xsot"
        },
        "content": "#toc ul{font-family:\"Source Sans Pro\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xsot"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Source Sans Pro\",sans-serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xsot"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Source Sans Pro\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xsot"
        },
        "content": ".verseblock pre{font-family:\"Source Sans Pro\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "xsot"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Source Sans Pro\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ".show-for-print{display:inherit!important}}"
      }
    ],
    "authorContributionMap": {
      "xsot": 12,
      "-": 396
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 8,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.storage.JsonTopDeckStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.storage.TopDeckStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TopDeck ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeckStorage topDeckStorage \u003d new JsonTopDeckStorage(userPrefs.getTopDeckFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        storage \u003d new StorageManager(topDeckStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s top deck and {@code userPrefs}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * The data from the sample deck will be used instead if {@code storage}\u0027s top deck is not found,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * or an empty deck will be used instead if errors occur when reading {@code storage}\u0027s deck."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Optional\u003cReadOnlyTopDeck\u003e topDeckOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        ReadOnlyTopDeck initialData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            topDeckOptional \u003d storage.readTopDeck();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            if (!topDeckOptional.isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TopDeck\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            initialData \u003d topDeckOptional.orElseGet(SampleDataUtil::getSampleTopDeck);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TopDeck\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            initialData \u003d new TopDeck();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TopDeck\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            initialData \u003d new TopDeck();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                                   + \"Using default config properties\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                                   + \"Using default user prefs\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TopDeck\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        logger.info(\"Starting TopDeck \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping TopDeck ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 22,
      "sciffany": 6,
      "-": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel) \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth \u0026\u0026 windowHeight \u003d\u003d o.windowHeight \u0026\u0026 Objects"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        Arrays.stream(logger.getHandlers()).forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 3,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public static final String MESSAGE_INVALID_DISPLAYED_INDEX \u003d \"The index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String MESSAGE_CARDS_LISTED_OVERVIEW \u003d \"%1$d cards listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"The index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String MESSAGE_EDIT_DECK_SUCCESS \u003d \"Edited Deck: %1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String MESSAGE_DECK_NOT_EDITED \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Index of Deck to edit and Name to edit to must be\" + \" provided.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"A deck with this name already exists\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String MESSAGE_EMPTY_DECK \u003d \"Deck is empty. Unable to go into study mode\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String MESSAGE_INVALID_DECK_OPERATION \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"This command is invalid, please\" + \" exit current deck and try again.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 1,
      "ckjohn000": 4,
      "xsot": 2,
      "sciffany": 6,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                           Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                           Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                           versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 15,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * current"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * know what"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * component can"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 15,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/InvalidationListenerManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages a list of {@link InvalidationListener}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidationListenerManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cInvalidationListener\u003e listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@link InvalidationListener#invalidated(Observable)} on all added listeners."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Any modifications to the listeners list during the invocation of this method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param observable The {@code Observable} that became invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void callListeners(Observable observable) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // Make a copy of listeners such that any modifications to the listeners list during"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // the invocation of this method will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cInvalidationListener\u003e listenersCopy \u003d new ArrayList\u003c\u003e(listeners);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        for (InvalidationListener listener : listenersCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            listener.invalidated(observable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds {@code listener} to the list of listeners."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the same listener is added more that once, then it will be notified more than once."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.add(listener);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code listener} from the list of listeners."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the given listener was not previously added, then this method call is a no-op."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * If the given listener was added more than once, then only the first occurrence in the list will be"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * removed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.remove(listener);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules().configure("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false).configure("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false).setVisibility(PropertyAccessor.ALL,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize) throws"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * found."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * json file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 2,
      "sciffany": 16,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Ignores case, \"?\" and \".\" but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def?\", \"def\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param keyword"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static boolean containsKeywordsInQuestionIgnoreCase(String sentence, String keyword) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String preppedWord \u003d keyword.toLowerCase().trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase().replaceAll(\"[\\\\.|\\\\?]\", \"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!preppedSentence.contains(preppedWord)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return Arrays.stream(preppedWord.split(\"\\\\s+\")).allMatch("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            key -\u003e Arrays.stream(preppedSentence.split(\"\\\\s+\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .anyMatch(sentenceWord -\u003e sentenceWord.equals(key)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence).anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * (contains letters)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 23,
      "sciffany": 8,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/TagUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Helper functions for handling tags."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class TagUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns true if the {@code tags} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Requires a full word match for any of the tag. If the word is longer than"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * a single word it will not be considered."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param tags None of the tags should be null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static boolean containsWordInTags(Set\u003cTag\u003e tags, String word) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (preppedWord.split(\"\\\\s+\").length \u003e 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return tags.stream().map(tag -\u003e tag.tagName.toLowerCase()).anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 35,
      "sciffany": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CardsView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.FindCardCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.commands.StudyDeckCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.parser.AddCardCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.parser.DeleteCardCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.parser.EditCardCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.parser.FindCardCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.parser.SelectCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Stores the state of the Card\u0027s view."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class CardsView implements ListViewState {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public final FilteredList\u003cCard\u003e filteredCards;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public final SimpleObjectProperty\u003cCard\u003e selectedCard \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Deck activeDeck;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public CardsView(Model model, Deck deck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.activeDeck \u003d deck;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        filteredCards \u003d new FilteredList\u003c\u003e(deck.getCards().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xsot"
        },
        "content": "        filteredCards.addListener(this::ensureSelectedItemIsValid);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public Command parse(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xsot"
        },
        "content": "            case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return new AddCardCommandParser(this).parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return new DeleteCardCommandParser(this).parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            case EditCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return new EditCardCommandParser(this).parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            case FindCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return new FindCardCommandParser(this).parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xsot"
        },
        "content": "            case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return new SelectCommandParser(this).parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xsot"
        },
        "content": "            case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return new BackCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            case StudyDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                return new StudyDeckCommand(activeDeck);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xsot"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xsot"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xsot"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Deck getActiveDeck() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return activeDeck;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xsot"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Ensures {@code selectedItem} is a valid card in {@code filteredItems}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xsot"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private void ensureSelectedItemIsValid(ListChangeListener.Change\u003c? extends Card\u003e change) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xsot"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xsot"
        },
        "content": "            if (selectedCard.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xsot"
        },
        "content": "                // null is always a valid selected card, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xsot"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            boolean wasSelectedItemReplaced \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize() \u0026\u0026 change"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                            .getRemoved().contains(selectedCard.getValue());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xsot"
        },
        "content": "            if (wasSelectedItemReplaced) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xsot"
        },
        "content": "                // Update selectedCard to its new value."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xsot"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedCard.getValue());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xsot"
        },
        "content": "                selectedCard.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xsot"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xsot"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            boolean wasSelectedItemRemoved \u003d change.getRemoved().stream().anyMatch("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                removedItem -\u003e selectedCard.getValue().equals(removedItem));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xsot"
        },
        "content": "            if (wasSelectedItemRemoved) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xsot"
        },
        "content": "                // Select the card that came before it in the list,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xsot"
        },
        "content": "                // or clear the selection if there is no such card."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                selectedCard"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                        .setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xsot"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xsot"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Updates the filtered list in CardsView."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void updateFilteredList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xsot"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xsot"
        },
        "content": "        filteredCards.setPredicate(predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return filteredCards;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 24,
      "ckjohn000": 2,
      "xsot": 79,
      "sciffany": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d FXCollections"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            .unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 4,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/DeckShuffler.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sciffany"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Shuffles the deck for study session."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "public class DeckShuffler {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private Deck deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private Iterator\u003cCard\u003e it;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private ObservableList\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    DeckShuffler(Deck deck) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        Deck shuffledDeck \u003d new Deck(deck);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        cards \u003d shuffledDeck.getCards().internalList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        shuffleCards();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Reshuffles cards once again when end of deck is reached."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private void shuffleCards() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        Collections.shuffle(cards);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        it \u003d cards.iterator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns a card from the shuffled deck."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public Card generateCard() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        if (it.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            return it.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            shuffleCards();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            return it.next();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 7,
      "sciffany": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/DecksView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.AddDeckCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.OpenDeckCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.commands.StudyDeckCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.parser.AddDeckCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.parser.DeleteDeckCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.parser.EditDeckCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.parser.SelectCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Stores the state of the Deck\u0027s view."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class DecksView implements ListViewState {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public final FilteredList\u003cDeck\u003e filteredDecks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final SimpleObjectProperty\u003cDeck\u003e selectedDeck \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public DecksView(Model model, FilteredList\u003cDeck\u003e deckList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xsot"
        },
        "content": "        filteredDecks \u003d deckList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xsot"
        },
        "content": "        filteredDecks.addListener(this::ensureSelectedItemIsValid);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public Command parse(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xsot"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xsot"
        },
        "content": "            case AddDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return new AddDeckCommandParser(this).parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": "            case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return new SelectCommandParser(this).parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xsot"
        },
        "content": "            case OpenDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return new OpenDeckCommandParser(this).parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            case StudyDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                return new StudyDeckCommandParser(this).parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            case DeleteDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return new DeleteDeckCommandParser(this).parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            case EditDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return new EditDeckCommandParser(this).parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xsot"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xsot"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xsot"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xsot"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Ensures {@code selectedItem} is a valid card in {@code filteredItems}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xsot"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private void ensureSelectedItemIsValid(ListChangeListener.Change\u003c? extends Deck\u003e change) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xsot"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xsot"
        },
        "content": "            if (selectedDeck.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xsot"
        },
        "content": "                // null is always a valid selected card, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xsot"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            boolean wasSelectedItemReplaced \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize() \u0026\u0026 change"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                            .getRemoved().contains(selectedDeck.getValue());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xsot"
        },
        "content": "            if (wasSelectedItemReplaced) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xsot"
        },
        "content": "                // Update selectedDeck to its new value."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xsot"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedDeck.getValue());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xsot"
        },
        "content": "                selectedDeck.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xsot"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xsot"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            boolean wasSelectedItemRemoved \u003d change.getRemoved().stream().anyMatch("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                removedItem -\u003e selectedDeck.getValue().equals(removedItem));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xsot"
        },
        "content": "            if (wasSelectedItemRemoved) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xsot"
        },
        "content": "                // Select the card that came before it in the list,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xsot"
        },
        "content": "                // or clear the selection if there is no such card."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                selectedDeck.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xsot"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xsot"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Updates the filtered list in DecksView."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void updateFilteredList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xsot"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xsot"
        },
        "content": "        filteredDecks.setPredicate(predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return filteredDecks;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 6,
      "ChangDarren": 11,
      "xsot": 80,
      "sciffany": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ListItem.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": " * This interface represents a type that can be contained in a filtered list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": " * TODO: find a more appropriate folder to put this"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "public interface ListItem {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xsot": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ListViewState.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": " * An interface that represents a ViewState that shows a list UI."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": "public interface ListViewState extends ViewState {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xsot": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns TopDeck."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see seedu.address.model.Model#getTopDeck()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    ReadOnlyTopDeck getTopDeck();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Sets the selected item."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "    void setSelectedItem(ListItem item);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Returns an unmodifiable view of the current filtered list. The element type depends on the view state."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xsot"
        },
        "content": "    ObservableList\u003cListItem\u003e getFilteredList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns the user prefs\u0027 TopDeck file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    Path getTopDeckFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Selected item in the filtered card list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * null if no item is selected."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xsot"
        },
        "content": "    ReadOnlyProperty\u003cListItem\u003e selectedItemProperty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Current text in the StudyView"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    ReadOnlyProperty\u003cString\u003e textShownProperty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Current StudyState in the StudyView"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    ReadOnlyProperty\u003cStudyView.StudyState\u003e studyStateProperty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Current userAnswer"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    ReadOnlyProperty\u003cString\u003e userAnswerProperty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 7,
      "ckjohn000": 1,
      "xsot": 9,
      "sciffany": 14,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.parser.TopDeckParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final TopDeckParser topDeckParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private boolean topDeckModified;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeckParser \u003d new TopDeckParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // Set topDeckModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.getTopDeck().addListener(observable -\u003e topDeckModified \u003d true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeckModified \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xsot"
        },
        "content": "            Command command \u003d topDeckParser.parseCommand(commandText, model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (topDeckModified) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            logger.info(\"TopDeck modified, saving to file.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                storage.saveTopDeck(model.getTopDeck());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public ReadOnlyTopDeck getTopDeck() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return model.getTopDeck();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void setSelectedItem(ListItem item) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xsot"
        },
        "content": "        model.setSelectedItem(item);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public ObservableList\u003cListItem\u003e getFilteredList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return model.getFilteredList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Path getTopDeckFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return model.getTopDeckFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public ReadOnlyProperty\u003cListItem\u003e selectedItemProperty() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return model.selectedItemProperty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public ReadOnlyProperty\u003cString\u003e textShownProperty() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        StudyView studyView \u003d (StudyView) model.getViewState();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return studyView.textShownProperty();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public ReadOnlyProperty\u003cStudyView.StudyState\u003e studyStateProperty() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        StudyView studyView \u003d (StudyView) model.getViewState();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return studyView.studyStateProperty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public ReadOnlyProperty\u003cString\u003e userAnswerProperty() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        StudyView studyView \u003d (StudyView) model.getViewState();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return studyView.userAnswerProperty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 16,
      "xsot": 9,
      "sciffany": 13,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/OpenDeckCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.OpenDeckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Parser creates a new OpenDeckCommand Object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class OpenDeckCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private DecksView decksView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "    OpenDeckCommandParser(DecksView decksView) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.decksView \u003d decksView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OpenDeckCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * and returns an OpenDeckCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public OpenDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "            return new OpenDeckCommand(index, decksView);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 8,
      "xsot": 27,
      "sciffany": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/StudyDeckCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sciffany"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.commands.OpenDeckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.commands.StudyDeckCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Parser creates a StudyDeckCommand Object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "public class StudyDeckCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private DecksView decksView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "    StudyDeckCommandParser(DecksView decksView) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.decksView \u003d decksView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StudyDeckCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * and returns an StudyDeckCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public StudyDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "            return new StudyDeckCommand(decksView, index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 8,
      "xsot": 4,
      "sciffany": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/StudyView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sciffany"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.commands.GenerateQuestionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.commands.OpenDeckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.commands.ShowAnswerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * ViewState of the Application during a Study session."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "public class StudyView implements ViewState {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public final List\u003cCard\u003e listOfCards;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private final Deck activeDeck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final SimpleObjectProperty\u003cStudyState\u003e currentStudyState \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private final SimpleObjectProperty\u003cString\u003e textShown \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private final SimpleObjectProperty\u003cString\u003e userAnswer \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private Card currentCard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private DeckShuffler deckShuffler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public StudyView(Model model, Deck deck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        this.activeDeck \u003d deck;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        listOfCards \u003d deck.getCards().internalList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        setCurrentStudyState(StudyState.QUESTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        this.deckShuffler \u003d new DeckShuffler(activeDeck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        generateCard();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public Command parse(String commandWord, String arguments) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            case OpenDeckCommand.ALT_COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                return new OpenDeckCommand(activeDeck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                return new BackCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                if (getCurrentStudyState() \u003d\u003d StudyState.QUESTION) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    return new ShowAnswerCommand(commandWord + arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    return new GenerateQuestionCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public Deck getActiveDeck() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return activeDeck;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Sets the current card to be studied."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public void setCurrentCard(Card card) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        currentCard \u003d card;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Current Card"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Generates the next card to be studied."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public void generateCard() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        setCurrentCard(deckShuffler.generateCard());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        updateTextShown();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public ReadOnlyProperty\u003cStudyState\u003e studyStateProperty() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return currentStudyState;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Study States"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public StudyState getCurrentStudyState() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return currentStudyState.getValue();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public void setCurrentStudyState(StudyState state) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        currentStudyState.setValue(state);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Updates the text shown in the UI."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public void updateTextShown() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String text \u003d (getCurrentStudyState() \u003d\u003d StudyState.QUESTION) ? currentCard"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .getQuestion() : currentCard.getAnswer();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        textShown.setValue(text);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TextShown \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the current textShown"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public ReadOnlyProperty\u003cString\u003e textShownProperty() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        updateTextShown();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return textShown;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the user\u0027s answer"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public ReadOnlyProperty\u003cString\u003e userAnswerProperty() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return userAnswer;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Answer \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public String getUserAnswer() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return userAnswer.getValue();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public void setUserAnswer(String answer) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        userAnswer.setValue(answer);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * The type of possible states that the study view can have."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public enum StudyState { QUESTION, ANSWER }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 22,
      "sciffany": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ViewState.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Stores the state of TopDeck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "public interface ViewState {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "    Command parse(String commandWord, String arguments) throws ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 3,
      "xsot": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCardCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Adds a card to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class AddCardCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            COMMAND_WORD + \": Adds a card to the deck. \" + \"Parameters: \" + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + PREFIX_ANSWER + \"ANSWER \" + \"[\" + PREFIX_TAG + \"TAG]...\\n\" + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + \" \" + PREFIX_QUESTION + \"Is this a question? \" + PREFIX_ANSWER + \"Yes it is \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + PREFIX_TAG + \"basic \" + PREFIX_TAG + \"test\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New card added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the deck\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Card toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final CardsView cardsView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Creates an AddCardCommand to add the specified {@code Card}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public AddCardCommand(CardsView cardsView, Card card) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.cardsView \u003d cardsView;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        toAdd \u003d card;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d cardsView.getActiveDeck();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (model.hasCard(toAdd, activeDeck)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.addCard(toAdd, activeDeck);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.commitTopDeck();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new UpdatePanelCommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xsot"
        },
        "content": "                || (other instanceof AddCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xsot"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCardCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 18,
      "xsot": 8,
      "sciffany": 5,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddDeckCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Adds a new deck to TopDeck."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class AddDeckCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            COMMAND_WORD + \": Create a new deck.\" + \"Parameters: \" + PREFIX_NAME + \"NAME\\n\" + \"Example: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + COMMAND_WORD + \" \" + PREFIX_NAME + \"MyDeck\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deck added: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"A deck with this name already exists\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final DecksView decksView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final Deck toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Creates an AddDeckCommand to add the specified {@code Deck}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public AddDeckCommand(DecksView decksView, Deck deck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.decksView \u003d decksView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        toAdd \u003d deck;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xsot"
        },
        "content": "        if (model.hasDeck(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xsot"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xsot"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        model.addDeck(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        model.commitTopDeck();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": "        decksView.updateFilteredList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xsot"
        },
        "content": "                || (other instanceof AddDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xsot"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddDeckCommand) other).toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 40,
      "xsot": 17,
      "sciffany": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BackCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Selects a deck identified using its displayed index."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            COMMAND_WORD + \": Close the deck and return to the main page.\\n\" + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + \" 1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private static final String MESSAGE_CLOSE_DECK_SUCCESS \u003d \"Closed deck\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "        model.goToDecksView();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return new UpdatePanelCommandResult(String.format(MESSAGE_CLOSE_DECK_SUCCESS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return other \u003d\u003d this || other instanceof BackCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 1,
      "xsot": 30,
      "sciffany": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.setTopDeck(new TopDeck());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.commitTopDeck();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 3,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Represents the result of a command execution and the updates delegated to MainWindow."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "        if (other \u003d\u003d null || other.getClass() !\u003d getClass()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return Objects.hash(feedbackToUser, getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 1,
      "xsot": 5,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCardCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Deletes a card identified using it\u0027s displayed index from the deck."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class DeleteCardCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            + \": Deletes the card identified by the index number used in the displayed card list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String MESSAGE_DELETE_CARD_SUCCESS \u003d \"Deleted Card: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final CardsView cardsView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public DeleteCardCommand(CardsView cardsView, Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.cardsView \u003d cardsView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xsot"
        },
        "content": "        List\u003cCard\u003e lastShownList \u003d cardsView.getFilteredList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d cardsView.getActiveDeck();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xsot"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card cardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.deleteCard(cardToDelete, activeDeck);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.commitTopDeck();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new UpdatePanelCommandResult(String.format(MESSAGE_DELETE_CARD_SUCCESS, cardToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                || (other instanceof DeleteCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCardCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 13,
      "xsot": 6,
      "sciffany": 1,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteDeckCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Deletes a deck identified using it\u0027s displayed index from TopDeck."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeleteDeckCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            + \": Deletes the deck identified by the index number used in the displayed deck list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String MESSAGE_DELETE_DECK_SUCCESS \u003d \"Deleted Deck: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final DecksView decksView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public DeleteDeckCommand(DecksView decksView, Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.decksView \u003d decksView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xsot"
        },
        "content": "        List\u003cDeck\u003e currentDeckList \u003d decksView.getFilteredList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d currentDeckList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Deck deckToDelete \u003d currentDeckList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        model.deleteDeck(deckToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        model.commitTopDeck();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": "        decksView.updateFilteredList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DECK_SUCCESS, deckToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                || (other instanceof DeleteDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteDeckCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 50,
      "xsot": 7,
      "sciffany": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sciffany"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Signals the end of the study session."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            COMMAND_WORD + \": End your study state and return to the main page.\\n\" + \"Example: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final String MESSAGE_CLOSE_DECK_SUCCESS \u003d \"Done studying\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        model.goToDecksView();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return new UpdatePanelCommandResult(String.format(MESSAGE_CLOSE_DECK_SUCCESS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return other \u003d\u003d this || other instanceof DoneCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 2,
      "sciffany": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCardCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Edits the details of an existing card in the deck."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class EditCardCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the card identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            + \"by the index number used in the displayed card list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \" + \"[\" + PREFIX_QUESTION + \"QUESTION] \" + \"[\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER] \" + \"[\" + PREFIX_TAG + \"TAG]...\\n\" + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            + PREFIX_QUESTION + \"What is the sum from 1 to 10? \" + PREFIX_ANSWER + \"55\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String MESSAGE_EDIT_CARD_SUCCESS \u003d \"Edited Card: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String MESSAGE_EDIT_CARD_AUTOCOMPLETE \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the deck.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Optional\u003cEditCardDescriptor\u003e editCardDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final CardsView cardsView;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param index              of the card in the filtered card list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param editCardDescriptor details to edit the card with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public EditCardCommand(CardsView cardsView, Index index, EditCardDescriptor editCardDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(editCardDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.cardsView \u003d cardsView;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.editCardDescriptor \u003d Optional.of(new EditCardDescriptor(editCardDescriptor));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public EditCardCommand(CardsView cardsView, Index index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xsot"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.cardsView \u003d cardsView;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.editCardDescriptor \u003d Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Creates and returns a {@code Card} with the details of {@code cardToEdit}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * edited with {@code editCardDescriptor}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static Card createEditedCard(Card cardToEdit, EditCardDescriptor editCardDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assert cardToEdit !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String updatedQuestion \u003d editCardDescriptor.getQuestion().orElse(cardToEdit.getQuestion());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String updatedAnswer \u003d editCardDescriptor.getAnswer().orElse(cardToEdit.getAnswer());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCardDescriptor.getTags().orElse(cardToEdit.getTags());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return new Card(updatedQuestion, updatedAnswer, updatedTags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xsot"
        },
        "content": "        List\u003cCard\u003e lastShownList \u003d cardsView.getFilteredList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d cardsView.getActiveDeck();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xsot"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (editCardDescriptor.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            Card cardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            Card editedCard \u003d createEditedCard(cardToEdit, editCardDescriptor.get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            if (!cardToEdit.isSameCard(editedCard) \u0026\u0026 model.hasCard(editedCard, activeDeck)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            model.setCard(cardToEdit, editedCard, activeDeck);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            model.commitTopDeck();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return new UpdatePanelCommandResult(String.format(MESSAGE_EDIT_CARD_SUCCESS, editedCard));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xsot"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            Card cardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            String question \u003d cardToEdit.getQuestion();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            String answer \u003d cardToEdit.getAnswer();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            Set\u003cTag\u003e tags \u003d cardToEdit.getTags();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xsot"
        },
        "content": "            final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xsot"
        },
        "content": "            for (Tag tag : tags) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xsot"
        },
        "content": "                builder.append(\" \").append(PREFIX_TAG).append(tag.tagName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xsot"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            String updatedText \u003d String"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    .format(\"%s %d %s%s %s%s %s\", COMMAND_WORD, index.getOneBased(), PREFIX_QUESTION,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                            question, PREFIX_ANSWER, answer, builder.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return new PrefillCommandBoxCommandResult(MESSAGE_EDIT_CARD_AUTOCOMPLETE, updatedText);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xsot"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!(other instanceof EditCardCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand e \u003d (EditCardCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editCardDescriptor.equals(e.editCardDescriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Stores the details to edit the card with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * corresponding field value of the card."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static class EditCardDescriptor {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        private String question;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        private String answer;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        public EditCardDescriptor() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public EditCardDescriptor(EditCardDescriptor toCopy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            setQuestion(toCopy.question);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            setAnswer(toCopy.answer);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return CollectionUtil.isAnyNonNull(question, answer, tags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public Optional\u003cString\u003e getQuestion() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return Optional.ofNullable(question);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        public void setQuestion(String question) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            this.question \u003d question;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public Optional\u003cString\u003e getAnswer() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return Optional.ofNullable(answer);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        public void setAnswer(String answer) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            this.answer \u003d answer;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sciffany"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sciffany"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sciffany"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            if (!(other instanceof EditCardDescriptor)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            EditCardDescriptor e \u003d (EditCardDescriptor) other;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            return getQuestion().equals(e.getQuestion()) \u0026\u0026 getAnswer().equals(e.getAnswer()) \u0026\u0026 getTags()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    .equals(e.getTags());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 49,
      "xsot": 20,
      "sciffany": 37,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditDeckCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.UniqueCardList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Edits the details of an existing deck in TopDeck."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class EditDeckCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the deck identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            + \"by the index number used in the displayed deck list. \" + \"Changes its name to NAME.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \" + \"[\" + PREFIX_NAME + \"NAME]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_NAME + \"[NAME]\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String DEFAULT_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + DEFAULT_INDEX;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String MESSAGE_EDIT_DECK_SUCCESS \u003d \"Edited Deck: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final EditDeckDescriptor editDeckDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final DecksView decksView;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @param index              of the deck in the filtered deck list to edit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @param editDeckDescriptor details to edit the deck with"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public EditDeckCommand(DecksView decksView, Index index, EditDeckDescriptor editDeckDescriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireNonNull(editDeckDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.decksView \u003d decksView;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.editDeckDescriptor \u003d new EditDeckDescriptor(editDeckDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Creates and returns a {@code Deck} with the details of {@code deckToEdit}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * edited with {@code editDeckDescriptor}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static Deck createEditedDeck(Deck deckToEdit, EditDeckDescriptor editDeckDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assert deckToEdit !\u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Name updatedName \u003d editDeckDescriptor.getName().orElse(deckToEdit.getName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return new Deck(updatedName, deckToEdit.getCards().internalList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xsot"
        },
        "content": "        List\u003cDeck\u003e currentDeckList \u003d decksView.getFilteredList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d currentDeckList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Deck deckToEdit \u003d currentDeckList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck editedDeck \u003d createEditedDeck(deckToEdit, editDeckDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (!deckToEdit.isSameDeck(editedDeck) \u0026\u0026 model.hasDeck(editedDeck)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        model.updateDeck(deckToEdit, editedDeck);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xsot"
        },
        "content": "        decksView.updateFilteredList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        model.commitTopDeck();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DECK_SUCCESS, editedDeck));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (!(other instanceof EditDeckCommand)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        EditDeckCommand e \u003d (EditDeckCommand) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editDeckDescriptor.equals(e.editDeckDescriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Stores the details to edit the deck with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * corresponding field value of the deck."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static class EditDeckDescriptor {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // private List\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        private UniqueCardList cards;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public EditDeckDescriptor() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public EditDeckDescriptor(EditDeckDescriptor toCopy) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            setCards(toCopy.cards);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, cards);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "         * Returns an unmodifiable card set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code cards} is null."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public Optional\u003cUniqueCardList\u003e getCards() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            // return (cards !\u003d null) ? Optional.of(Collections.unmodifiableList(cards)) : Optional.empty();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return (cards !\u003d null) ? Optional.of(cards) : Optional.empty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "         * Sets {@code cards} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "         * A defensive copy of {@code cards} is used internally."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void setCards(UniqueCardList cards) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            // this.cards \u003d (cards !\u003d null) ? new ArrayList\u003c\u003e(cards) : null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            this.cards \u003d cards;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            if (!(other instanceof EditDeckDescriptor)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            EditDeckDescriptor e \u003d (EditDeckDescriptor) other;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            return getName().equals(e.getName()) \u0026\u0026 getCards().equals(e.getCards());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 170,
      "xsot": 7,
      "sciffany": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return new ExitCommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xsot": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Represents a command result that exits the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class ExitCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public ExitCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xsot": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCardCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Finds and lists all cards in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class FindCardCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            COMMAND_WORD + \": Finds all cards whose questions contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + \"the specified keywords (case-insensitive) and displays them as a list with index \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + \"numbers.\\n\" + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\" + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + \" alice bob charlie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final CardsView cardsView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final QuestionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public FindCardCommand(CardsView cardsView, QuestionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.cardsView \u003d cardsView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": "        cardsView.updateFilteredList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xsot"
        },
        "content": "                String.format(Messages.MESSAGE_CARDS_LISTED_OVERVIEW, cardsView.getFilteredList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                || (other instanceof FindCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCardCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 36,
      "xsot": 6,
      "sciffany": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GenerateQuestionCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sciffany"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.StudyView;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * Shows the answer to the question"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "public class GenerateQuestionCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        StudyView studyView \u003d ((StudyView) model.getViewState());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        studyView.generateCard();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        studyView.setCurrentStudyState(StudyView.StudyState.QUESTION);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        studyView.updateTextShown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 1,
      "sciffany": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            COMMAND_WORD + \": Shows program usage instructions.\\n\" + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return new HelpCommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xsot": 1,
      "sciffany": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Represents a command result that launches the help window."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class HelpCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public HelpCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xsot": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ViewState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Lists all decks to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String MESSAGE_DECK_SUCCESS \u003d \"Listed all decks\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String MESSAGE_CARD_SUCCESS \u003d \"Listed all cards\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final ViewState viewState;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public ListCommand(ViewState viewState) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.viewState \u003d viewState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (model.isAtDecksView()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            DecksView decksView \u003d (DecksView) viewState;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            decksView.updateFilteredList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return new CommandResult(MESSAGE_DECK_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            CardsView cardsView \u003d (CardsView) viewState;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            cardsView.updateFilteredList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return new CommandResult(MESSAGE_CARD_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 14,
      "xsot": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OpenDeckCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Selects a deck identified using its displayed index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class OpenDeckCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String ALT_COMMAND_WORD \u003d \"deck\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            COMMAND_WORD + \": Opens the deck identified by the index number.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private static final String MESSAGE_OPEN_DECK_SUCCESS \u003d \"Opened deck\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private DecksView decksView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private Deck targetDeck;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public OpenDeckCommand(Index targetIndex, DecksView decksView) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.decksView \u003d decksView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public OpenDeckCommand(Deck targetDeck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        this.targetDeck \u003d targetDeck;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xsot"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        if (targetIndex !\u003d null) { //if OpenDeckCommand is directly based on target deck"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xsot"
        },
        "content": "            List\u003cDeck\u003e filteredDeckList \u003d decksView.filteredDecks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xsot"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d filteredDeckList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xsot"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xsot"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            targetDeck \u003d filteredDeckList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        model.changeDeck(targetDeck);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return new UpdatePanelCommandResult(String.format(MESSAGE_OPEN_DECK_SUCCESS, targetDeck.getName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xsot"
        },
        "content": "                || (other instanceof OpenDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xsot"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((OpenDeckCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 1,
      "xsot": 52,
      "sciffany": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PrefillCommandBoxCommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Represents a command result that pre-fills the command box and repositions the cursor."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class PrefillCommandBoxCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final String prefilledText;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public PrefillCommandBoxCommandResult(String feedbackToUser, String prefilledText) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xsot"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.prefilledText \u003d prefilledText;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public String getPrefilledText() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return prefilledText;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "        if (!super.equals(other)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": "        PrefillCommandBoxCommandResult otherCommandResult \u003d (PrefillCommandBoxCommandResult) other;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return prefilledText.equals(otherCommandResult.prefilledText);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return Objects.hash(super.hashCode(), prefilledText);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xsot": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ViewState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Reverts the {@code model}\u0027s deck to its previously undone state."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final ViewState viewState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public RedoCommand(ViewState viewState) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.viewState \u003d viewState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!model.canRedoTopDeck()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.redoTopDeck();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (model.isAtDecksView()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            DecksView decksView \u003d (DecksView) viewState;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            decksView.updateFilteredList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        } else if (model.isAtCardsView()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            CardsView currentView \u003d (CardsView) viewState;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            Deck currentActiveDeck \u003d currentView.getActiveDeck();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            Deck newActiveDeck \u003d model.getDeck(currentActiveDeck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            model.changeDeck(newActiveDeck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new UpdatePanelCommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 15,
      "xsot": 8,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCardCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Selects a card identified using its displayed index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class SelectCardCommand extends SelectCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private CardsView cardsView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public SelectCardCommand(CardsView cardsView, Index targetIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.cardsView \u003d cardsView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "        List\u003cCard\u003e filteredCardList \u003d cardsView.filteredCards;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredCardList.size()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "        model.setSelectedItem(filteredCardList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xsot"
        },
        "content": "                || (other instanceof SelectCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xsot"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCardCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 1,
      "xsot": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Selects a card identified using it\u0027s displayed index."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "public abstract class SelectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            + \": Selects the card identified by the index number used in the displayed card list.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String MESSAGE_SELECT_SUCCESS \u003d \"Selected: %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 2,
      "xsot": 3,
      "sciffany": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectDeckCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Selects a deck identified using its displayed index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class SelectDeckCommand extends SelectCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private DecksView decksView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public SelectDeckCommand(DecksView decksView, Index targetIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.decksView \u003d decksView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "        List\u003cDeck\u003e filteredDeckList \u003d decksView.filteredDecks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredDeckList.size()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "        model.setSelectedItem(filteredDeckList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xsot"
        },
        "content": "                || (other instanceof SelectDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xsot"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectDeckCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 1,
      "xsot": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowAnswerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sciffany"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.StudyView;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * Shows the answer to the question"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "public class ShowAnswerCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static String userAnswer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public ShowAnswerCommand(String userAnswer) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        this.userAnswer \u003d userAnswer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        StudyView studyView \u003d ((StudyView) model.getViewState());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        studyView.setCurrentStudyState(StudyView.StudyState.ANSWER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        studyView.updateTextShown();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        studyView.setUserAnswer(userAnswer);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 1,
      "sciffany": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StudyDeckCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sciffany"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * Selects a deck identified using its displayed index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "public class StudyDeckCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"study\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the session using a deck.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final String MESSAGE_STUDY_DECK_SUCCESS \u003d \"Entered study mode\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private DecksView decksView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private Deck targetDeck;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public StudyDeckCommand(DecksView decksView, Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.decksView \u003d decksView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public StudyDeckCommand(Deck targetDeck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        this.targetDeck \u003d targetDeck;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        if (targetIndex !\u003d null) { //if OpenDeckCommand is directly based on target deck"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xsot"
        },
        "content": "            List\u003cDeck\u003e filteredDeckList \u003d decksView.filteredDecks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d filteredDeckList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            if (filteredDeckList.get(targetIndex.getZeroBased()).isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_EMPTY_DECK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            targetDeck \u003d filteredDeckList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        model.studyDeck(targetDeck);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return new StudyPanelCommand(String.format(MESSAGE_STUDY_DECK_SUCCESS, targetDeck.getName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                || (other instanceof StudyDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((StudyDeckCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 2,
      "xsot": 4,
      "sciffany": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StudyPanelCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sciffany"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * Represents a command result that requires the panel to reload."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "public class StudyPanelCommand extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public StudyPanelCommand(String feedbackToUser) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ViewState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final ViewState viewState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public UndoCommand(ViewState viewState) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.viewState \u003d viewState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!model.canUndoTopDeck()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.undoTopDeck();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (model.isAtDecksView()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            DecksView decksView \u003d (DecksView) viewState;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            decksView.updateFilteredList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        } else if (model.isAtCardsView()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            CardsView currentView \u003d (CardsView) viewState;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            Deck currentActiveDeck \u003d currentView.getActiveDeck();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            Deck newActiveDeck \u003d model.getDeck(currentActiveDeck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            model.changeDeck(newActiveDeck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new UpdatePanelCommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 15,
      "xsot": 8,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdatePanelCommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xsot"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Represents a command result that requires the panel to reload."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class UpdatePanelCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public UpdatePanelCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xsot": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCardCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Parses input arguments and creates a new AddCardCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class AddCardCommandParser implements Parser\u003cAddCardCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final CardsView cardsView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public AddCardCommandParser(CardsView cardsView) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.cardsView \u003d cardsView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCardCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * and returns an AddCardCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public AddCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER) || !argMultimap.getPreamble()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                                            .isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String question \u003d argMultimap.getValue(PREFIX_QUESTION).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String answer \u003d argMultimap.getValue(PREFIX_ANSWER).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card card \u003d new Card(question, answer, tagList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return new AddCardCommand(cardsView, card);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 7,
      "xsot": 14,
      "sciffany": 15,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddDeckCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.AddDeckCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Parses input arguments and creates a new AddDeckCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class AddDeckCommandParser implements Parser\u003cAddDeckCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final DecksView decksView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public AddDeckCommandParser(DecksView decksView) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.decksView \u003d decksView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDeckCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * and returns an AddDeckCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public AddDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck deck \u003d new Deck(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return new AddDeckCommand(decksView, deck);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 37,
      "xsot": 14,
      "sciffany": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * existing values."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 7,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * their"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return Arrays.stream(prefixes).flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                     .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1 : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * positions in"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                     List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                   prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * currentPrefixPosition}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static String extractArgumentValue(String argsString, PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 17,
      "-": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Prefix PREFIX_DECK \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 2,
      "ckjohn000": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCardCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Parses input arguments and creates a new DeleteCardCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeleteCardCommandParser implements Parser\u003cDeleteCardCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final CardsView cardsView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public DeleteCardCommandParser(CardsView cardsView) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.cardsView \u003d cardsView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCardCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * and returns an DeleteCardCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public DeleteCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "            return new DeleteCardCommand(cardsView, index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 6,
      "ckjohn000": 1,
      "xsot": 8,
      "sciffany": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteDeckCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Parses input arguments and creates a new DeleteDeckCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeleteDeckCommandParser implements Parser\u003cDeleteDeckCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final DecksView decksView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public DeleteDeckCommandParser(DecksView decksView) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.decksView \u003d decksView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteDeckCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * and returns an DeleteDeckCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public DeleteDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "            return new DeleteDeckCommand(decksView, index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 7,
      "xsot": 8,
      "sciffany": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCardCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Parses input arguments and creates a new EditCardCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class EditCardCommandParser implements Parser\u003cEditCardCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final CardsView cardsView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public EditCardCommandParser(CardsView cardsView) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.cardsView \u003d cardsView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCardCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * and returns an EditCardCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public EditCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand.EditCardDescriptor editCardDescriptor \u003d new EditCardDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xsot"
        },
        "content": "            editCardDescriptor.setQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xsot"
        },
        "content": "            editCardDescriptor.setAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xsot"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCardDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xsot"
        },
        "content": "        // Abbreviated version of the command is given, expand full command in the text box"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xsot"
        },
        "content": "        if (!editCardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xsot"
        },
        "content": "            return new EditCardCommand(cardsView, index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return new EditCardCommand(cardsView, index, editCardDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 15,
      "ckjohn000": 1,
      "xsot": 14,
      "sciffany": 5,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditDeckCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DECK_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand.EditDeckDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Parses input arguments and creates a new EditDeck object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class EditDeckCommandParser implements Parser\u003cEditDeckCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final DecksView decksView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public EditDeckCommandParser(DecksView decksView) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.decksView \u003d decksView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditDeckCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * and returns an EditDeckCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public EditDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        EditDeckDescriptor editDeckDescriptor \u003d new EditDeckDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            editDeckDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (!editDeckDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new ParseException(MESSAGE_DECK_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return new EditDeckCommand(decksView, index, editDeckDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 44,
      "xsot": 8,
      "sciffany": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCardCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.FindCardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Parses input arguments and creates a new FindCardCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class FindCardCommandParser implements Parser\u003cFindCardCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final String IN_BETWEEN_QUOTES_REGEX \u003d \"\\\"([^\\\"]*)\\\"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private CardsView cardsView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public FindCardCommandParser(CardsView cardsView) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.cardsView \u003d cardsView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCardCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * and returns an FindCardCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public FindCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        ArrayList\u003cString\u003e questionKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Pattern p \u003d Pattern.compile(IN_BETWEEN_QUOTES_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Matcher m \u003d p.matcher(trimmedArgs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        while (m.find()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            questionKeywords.add(m.group(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        trimmedArgs \u003d trimmedArgs.replaceAll(IN_BETWEEN_QUOTES_REGEX, \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String[] keyArgs \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (String key : keyArgs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            if (!key.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                questionKeywords.add(key);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return new FindCardCommand(cardsView, new QuestionContainsKeywordsPredicate(questionKeywords));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 45,
      "xsot": 12,
      "sciffany": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * will be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 2,
      "sciffany": 3,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ViewState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.SelectCardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.SelectDeckCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private ViewState viewState;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public SelectCommandParser(ViewState viewState) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.viewState \u003d viewState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "            if (viewState instanceof CardsView) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return new SelectCardCommand((CardsView) viewState, index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "                return new SelectDeckCommand((DecksView) viewState, index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xsot"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xsot": 16,
      "sciffany": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TopDeckParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class TopDeckParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            .compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public Command parseCommand(String userInput, Model model) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        if (!matcher.matches() \u0026\u0026 !userInput.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String commandWord \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String arguments \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        if (!userInput.equals(\"\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xsot"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": "            return model.parse(commandWord, arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xsot"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xsot"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xsot"
        },
        "content": "                    return new ListCommand(model.getViewState());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                    return new HistoryCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xsot"
        },
        "content": "                    return new UndoCommand(model.getViewState());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xsot"
        },
        "content": "                    return new RedoCommand(model.getViewState());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xsot"
        },
        "content": "                case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xsot"
        },
        "content": "                    return new ExitCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xsot"
        },
        "content": "                case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xsot"
        },
        "content": "                    return new HelpCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xsot"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xsot"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xsot"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xsot"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xsot"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         switch (commandWord) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xsot"
        },
        "content": "         case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xsot"
        },
        "content": "         return new AddCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "         case EditCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "         case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         return new ClearCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xsot"
        },
        "content": "         case FindCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "         return new FindCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         return new ListCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         return new HistoryCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         return new ExitCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         return new HelpCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         return new UndoCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         return new RedoCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xsot"
        },
        "content": "         case AddDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xsot"
        },
        "content": "         return new AddDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xsot"
        },
        "content": "         **/"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 16,
      "ckjohn000": 6,
      "xsot": 25,
      "sciffany": 11,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ListItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ViewState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    Predicate\u003cDeck\u003e PREDICATE_SHOW_ALL_DECKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    Predicate\u003cCard\u003e PREDICATE_SHOW_ALL_CARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    Path getTopDeckFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    void setTopDeckFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Returns the TopDeck"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    ReadOnlyTopDeck getTopDeck();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Replaces TopDeck data with the data in {@code topDeck}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    void setTopDeck(ReadOnlyTopDeck topDeck);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns true if a card with the same identity as {@code card} exists in the deck."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    boolean hasCard(Card card, Deck deck);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Deletes the given card."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * The card must exist in the deck."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    void deleteCard(Card target, Deck deck);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Adds the given card."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code card} must not already exist in the deck."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    void addCard(Card card, Deck deck);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Replaces the given card {@code target} with {@code editedCard}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code target} must exist in the deck."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * The card identity of {@code editedCard} must not be the same as another existing card in the deck."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    void setCard(Card target, Card editedCard, Deck deck);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Returns an unmodifiable view of the filtered list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xsot"
        },
        "content": "    ObservableList\u003cListItem\u003e getFilteredList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Updates the filter of the filtered card list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xsot"
        },
        "content": "    void updateFilteredList(Predicate\u003c? extends ListItem\u003e predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns true if the model has previous TopDeck states to restore."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    boolean canUndoTopDeck();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns true if the model has undone TopDeck states to restore."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    boolean canRedoTopDeck();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Restores the model\u0027s TopDeck to its previous state."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    void undoTopDeck();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Restores the model\u0027s TopDeck to its previously undone state."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    void redoTopDeck();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Saves the current TopDeck state for undo/redo."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    void commitTopDeck();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Selected item in the filtered list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * null if no item is selected."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xsot"
        },
        "content": "    ReadOnlyProperty\u003cListItem\u003e selectedItemProperty();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Returns the selected Item in the filtered list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * null if no card is selected."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xsot"
        },
        "content": "    ListItem getSelectedItem();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Sets the selected item in the filtered list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xsot"
        },
        "content": "    void setSelectedItem(ListItem item);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Adds a new deck in the filtered deck list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    void addDeck(Deck deck);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the target deck."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    Deck getDeck(Deck target);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Deletes the given deck."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * The deck must exist in TopDeck."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    void deleteDeck(Deck target);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    boolean hasDeck(Deck deck);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    void updateDeck(Deck target, Deck editedDeck);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xsot"
        },
        "content": "    Command parse(String commandWord, String arguments) throws ParseException;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xsot"
        },
        "content": "    void changeDeck(Deck deck);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Replaces the given deck {@code target} with {@code editedDeck}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * {@code target} must exist in the TopDeck."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in TopDeck."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    void setDeck(Deck target, Deck editedDeck);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Changes view state to show a single card at a time"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    void studyDeck(Deck deck);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xsot"
        },
        "content": "    void goToDecksView();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    boolean isAtDecksView();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns true is the current ViewState is at CardsView."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    boolean isAtCardsView();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the current ViewState."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    ViewState getViewState();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 40,
      "ckjohn000": 28,
      "xsot": 19,
      "sciffany": 19,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ListItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.StudyView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ViewState;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.exceptions.IllegalOperationWhileReviewingCardException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * Represents the in-memory model of top deck data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final VersionedTopDeck versionedTopDeck;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final SimpleObjectProperty\u003cListItem\u003e selectedItem \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private FilteredList\u003c? extends ListItem\u003e filteredItems;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private ViewState viewState;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Initializes a ModelManager with the given topDeck and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public ModelManager(ReadOnlyTopDeck topDeck, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireAllNonNull(topDeck, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + topDeck + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        versionedTopDeck \u003d new VersionedTopDeck(topDeck);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xsot"
        },
        "content": "        viewState \u003d new DecksView(this, new FilteredList\u003c\u003e(versionedTopDeck.getDeckList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xsot"
        },
        "content": "        filteredItems \u003d ((DecksView) viewState).filteredDecks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this(new TopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public Command parse(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return viewState.parse(commandWord, arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Updates the given ViewState to CardsView with the given deck."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void changeDeck(Deck deck) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        viewState \u003d new CardsView(this, deck);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xsot"
        },
        "content": "        filteredItems \u003d ((CardsView) viewState).filteredCards;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xsot"
        },
        "content": "        setSelectedItem(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public void studyDeck(Deck deck) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        viewState \u003d new StudyView(this, deck);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void goToDecksView() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xsot"
        },
        "content": "        viewState \u003d new DecksView(this, new FilteredList\u003c\u003e(versionedTopDeck.getDeckList()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xsot"
        },
        "content": "        filteredItems \u003d ((DecksView) viewState).filteredDecks;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xsot"
        },
        "content": "        setSelectedItem(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean isAtDecksView() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return (viewState instanceof DecksView);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean isAtCardsView() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return (viewState instanceof CardsView);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public ViewState getViewState() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return viewState;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Path getTopDeckFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return userPrefs.getTopDeckFilePath();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setTopDeckFilePath(Path topDeckFilePath) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(topDeckFilePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        userPrefs.setTopDeckFilePath(topDeckFilePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TopDeck \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public ReadOnlyTopDeck getTopDeck() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return versionedTopDeck;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public void setTopDeck(ReadOnlyTopDeck topDeck) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        versionedTopDeck.resetData(topDeck);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean hasCard(Card card, Deck deck) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireAllNonNull(card, deck);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return deck.hasCard(card);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void deleteCard(Card target, Deck deck) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireAllNonNull(target, deck);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck editedDeck \u003d versionedTopDeck.deleteCard(target, deck);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        changeDeck(editedDeck);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void addCard(Card card, Deck deck) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireAllNonNull(card, deck);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck editedDeck \u003d versionedTopDeck.addCard(card, deck);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        changeDeck(editedDeck);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard(Card target, Card editedCard, Deck deck) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireAllNonNull(target, editedCard, deck);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck editedDeck \u003d versionedTopDeck.setCard(target, editedCard, deck);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        changeDeck(editedDeck);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Deck getDeck(Deck target) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return versionedTopDeck.getDeck(target);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        logger.info(\"Added a new deck to TopDeck.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xsot"
        },
        "content": "        versionedTopDeck.addDeck(deck);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        commitTopDeck();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireAllNonNull(deck);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return versionedTopDeck.hasDeck(deck);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void deleteDeck(Deck deck) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        logger.info(\"Deleted a deck.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        versionedTopDeck.deleteDeck(deck);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        DecksView decksView \u003d (DecksView) viewState;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        versionedTopDeck.setDecks(decksView.filteredDecks);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void updateDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        logger.info(\"Updated a deck\u0027s name in TopDeck.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        versionedTopDeck.updateDeck(target, editedDeck);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Card List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Item} backed by the internal list of"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code versionedTopDeck}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public ObservableList\u003cListItem\u003e getFilteredList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return (ObservableList\u003cListItem\u003e) filteredItems;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "xsot"
        },
        "content": "    // TODO: This is no longer used by actual code. Update tests"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void updateFilteredList(Predicate\u003c? extends ListItem\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xsot"
        },
        "content": "        filteredItems.setPredicate((Predicate\u003cListItem\u003e) predicate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean canUndoTopDeck() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return versionedTopDeck.canUndo();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean canRedoTopDeck() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return versionedTopDeck.canRedo();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void undoTopDeck() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        versionedTopDeck.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void redoTopDeck() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        versionedTopDeck.redo();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void commitTopDeck() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        versionedTopDeck.commit();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "xsot"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected item \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public ReadOnlyProperty\u003cListItem\u003e selectedItemProperty() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return selectedItem;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public ListItem getSelectedItem() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return selectedItem.getValue();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void setSelectedItem(ListItem card) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "xsot"
        },
        "content": "        if (card !\u003d null \u0026\u0026 !filteredItems.contains(card)) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "xsot"
        },
        "content": "        selectedItem.setValue(card);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (card instanceof Card \u0026\u0026 isAtCardsView()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            CardsView cardsView \u003d (CardsView) viewState;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            cardsView.selectedCard.set((Card) card);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        } else if (card instanceof Deck \u0026\u0026 isAtDecksView()) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            //TODO: Deck has to set its selection"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        } else if (card !\u003d null) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new IllegalOperationWhileReviewingCardException();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return versionedTopDeck.equals(other.versionedTopDeck) \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                \u0026\u0026 filteredItems.equals(other.filteredItems) \u0026\u0026 Objects"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .equals(selectedItem.get(), other.selectedItem.get());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 70,
      "ckjohn000": 39,
      "xsot": 40,
      "sciffany": 22,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTopDeck.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Unmodifiable view of TopDeck"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public interface ReadOnlyTopDeck extends Observable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns an unmodifiable view of the decks list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * This list will not contain any duplicate decks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    ObservableList\u003cDeck\u003e getDeckList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 10,
      "ckjohn000": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    Path getTopDeckFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TopDeck.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Wraps all data at the TopDeck level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class TopDeck implements ReadOnlyTopDeck {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final UniqueDeckList decks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    * duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    *   among constructors."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        decks \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public TopDeck() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public TopDeck(ReadOnlyTopDeck toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xsot"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Replaces the contents of the deck list with {@code decks}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xsot"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.decks.setDecks(decks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xsot"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Resets the existing data of this {@code TopDeck} with {@code newData}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void resetData(ReadOnlyTopDeck newData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xsot"
        },
        "content": "        setDecks(newData.getDeckList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //// card operations"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Adds a card to TopDeck"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * The card should not already exist in the {@code deck} activeDeck."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Deck addCard(Card card, Deck activeDeck) throws DuplicateCardException, DeckNotFoundException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireAllNonNull(card, activeDeck);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!decks.contains(activeDeck)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (activeDeck.hasCard(card)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck editedDeck \u003d new Deck(activeDeck);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        editedDeck.addCard(card);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        decks.setDeck(activeDeck, editedDeck);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return editedDeck;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Deletes a card in TopDeck"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * The {@code Card} target should exist in the {@code deck} activeDeck."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Deck deleteCard(Card target, Deck activeDeck) throws DeckNotFoundException, CardNotFoundException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!decks.contains(activeDeck)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!activeDeck.hasCard(target)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck editedDeck \u003d new Deck(activeDeck);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        editedDeck.removeCard(target);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        decks.setDeck(activeDeck, editedDeck);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return editedDeck;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Sets a card in TopDeck"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * The {@code Card} target should exist in the {@code deck} activeDeck."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Deck setCard(Card target, Card newCard, Deck activeDeck) throws DeckNotFoundException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            CardNotFoundException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!decks.contains(activeDeck)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!activeDeck.hasCard(target)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck editedDeck \u003d new Deck(activeDeck);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        editedDeck.setCard(target, newCard);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        decks.setDeck(activeDeck, editedDeck);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return editedDeck;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //// deck operations"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the deck in TopDeck that has the same identifier as {@code target}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * The deck must already be in TopDeck."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Deck getDeck(Deck target) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return decks.getDeck(target);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Adds a deck to the TopDeck."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * The deck must not already exist in the TopDeck."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void addDeck(Deck deck) throws DuplicateDeckException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        decks.add(deck);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xsot"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in TopDeck."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return decks.contains(deck);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Deletes {@code deck} from this {@code TopDeck}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * The {@code deck} target should exist in {@code TopDeck}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void deleteDeck(Deck target) throws DeckNotFoundException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (!decks.contains(target)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        decks.remove(target);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Replaces the given deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * {@code target} must exist in TopDeck."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in TopDeck."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void updateDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireNonNull(editedDeck);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        decks.setDeck(target, editedDeck);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return decks.asUnmodifiableObservableList().size() + \" decks\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return decks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                || (other instanceof TopDeck // instanceof handles nulls"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                \u0026\u0026 decks.equals(((TopDeck) other).decks));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return decks.hashCode();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 167,
      "ckjohn000": 51,
      "xsot": 10,
      "sciffany": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Path topDeckFilePath \u003d Paths.get(\"data\", \"topdeck.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        setTopDeckFilePath(newUserPrefs.getTopDeckFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Path getTopDeckFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return topDeckFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setTopDeckFilePath(Path topDeckFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(topDeckFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.topDeckFilePath \u003d topDeckFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return guiSettings.equals(o.guiSettings) \u0026\u0026 topDeckFilePath.equals(o.topDeckFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return Objects.hash(guiSettings, topDeckFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + topDeckFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 9,
      "sciffany": 3,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTopDeck.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * {@code TopDeck} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class VersionedTopDeck extends TopDeck {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final List\u003cReadOnlyTopDeck\u003e topDeckStateList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public VersionedTopDeck(ReadOnlyTopDeck initialState) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeckStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeckStateList.add(new TopDeck(initialState));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Saves a copy of the current {@code TopDeck} state at the end of the state list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeckStateList.add(new TopDeck(this));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeckStateList.subList(currentStatePointer + 1, topDeckStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new VersionedTopDeck.NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        resetData(topDeckStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new VersionedTopDeck.NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        resetData(topDeckStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return currentStatePointer \u003c topDeckStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!(other instanceof VersionedTopDeck)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        VersionedTopDeck otherVersionedTopDeck \u003d (VersionedTopDeck) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return super.equals(otherVersionedTopDeck) \u0026\u0026 topDeckStateList"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .equals(otherVersionedTopDeck.topDeckStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTopDeck.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 17,
      "sciffany": 2,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/Card.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ListItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Represents a deck object in TopDeck."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Guarantees: details are present and not null, field values are validated and immutable"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class Card implements ListItem {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //Identity field"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Card(String question, String answer, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(question, answer);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns true if both cards have the same question."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * This defines a weaker notion of equality between two cards."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean isSameCard(Card otherCard) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (otherCard \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return otherCard !\u003d null \u0026\u0026 otherCard.getQuestion().equals(question);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns true if both cards have the same question and answers."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Defines a stronger notion of equality between 2 cards."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card otherCard \u003d (Card) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return this.answer.equals(otherCard.answer) \u0026\u0026 this.question.equals(otherCard.question) \u0026\u0026 this.tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .equals(otherCard.tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return Objects.hash(question, answer);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        builder.append(\"Question: \").append(getQuestion()).append(\" Answer: \").append(getAnswer())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "               .append(\" Tags: \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 91,
      "xsot": 2,
      "sciffany": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/Deck.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ListItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Represents a Deck inside TopDeck."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class Deck implements ListItem {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final UniqueCardList cards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public Deck(Name name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public Deck(Name name, List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        for (Card card : cards) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            this.cards.add(card);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public Deck(Deck other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.name \u003d new Name(other.name.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.cards.setCards(other.getCards());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public UniqueCardList getCards() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Checks if a card is already in a deck."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean hasCard(Card toCheck) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return cards.contains(toCheck);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Checks if a deck is empty."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return cards.internalList.isEmpty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Adds a card to the current deck."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void addCard(Card newCard) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.cards.add(newCard);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Replaces {@code target} in the deck with {@code editedCard}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assert hasCard(target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        cards.setCard(target, editedCard);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Removes {@code target} in the current deck."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void removeCard(Card target) throws CardNotFoundException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assert hasCard(target);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.cards.remove(target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns true if 2 decks are the same, or have identical name."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean isSameDeck(Deck otherDeck) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (otherDeck \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (otherDeck \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return otherDeck.getName().equals(getName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (!(other instanceof Deck)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return isSameDeck((Deck) other);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 76,
      "ChangDarren": 33,
      "xsot": 3,
      "sciffany": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/DeckNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Tests that a {@code Deck}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeckNameContainsKeywordsPredicate implements Predicate\u003cDeck\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public DeckNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean test(Deck deck) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (keywords.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return deck.getName().toString().toLowerCase().contains(keywords.get(0).toLowerCase());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return keywords.stream().anyMatch("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            keyword -\u003e StringUtil.containsKeywordsInQuestionIgnoreCase(deck.getName().fullName, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                || (other instanceof DeckNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                \u0026\u0026 keywords.equals(((DeckNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 32,
      "sciffany": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Represents a Deck\u0027s name in TopDeck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String MESSAGE_NAME \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Names should contain only alphanumeric characters and not be\" + \" empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * The first character must not be whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String NAME_VALID_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return test.matches(NAME_VALID_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 7,
      "sciffany": 2,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/QuestionContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.commons.util.TagUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Tests that a {@code Card}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class QuestionContainsKeywordsPredicate implements Predicate\u003cCard\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public QuestionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean test(Card card) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return keywords.stream().anyMatch("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            keyword -\u003e StringUtil.containsKeywordsInQuestionIgnoreCase(card.getQuestion(), keyword)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                || TagUtil.containsWordInTags(card.getTags(), keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                || (other instanceof QuestionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                \u0026\u0026 keywords.equals(((QuestionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 32,
      "sciffany": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/UniqueCardList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * A list of cards that enforces uniqueness between its elements and does not allow"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * nulls. A card is considered unique by comparing using {@code Card#isSameCard(Card)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * As such, adding or updating of any cards will use Card#isSameCard(Card) to check for equality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * to ensure that the new card being added is unique in terms of its identity. However, the removal"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * of a card uses Card#equal(Object) so as to ensure that the card with exactly the same fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * @see Card#isSameCard(Card)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class UniqueCardList implements Iterable\u003cCard\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public final ObservableList\u003cCard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalUnmodifiableList \u003d FXCollections"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            .unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns true if the list contains an equivalent card as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean contains(Card toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCard);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Adds a card to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * The question should not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void add(Card toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Replaces the card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * The card identity of {@code editedCard} must not be the same as another existing card in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireAllNonNull(target, editedCard);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!target.isSameCard(editedCard) \u0026\u0026 contains(editedCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        internalList.set(index, editedCard);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Removes the equivalent card from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * The card must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void remove(Card toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCards(UniqueCardList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Replaces the contents of this list with {@code cards}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code cards} must not contain duplicate cards."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireAllNonNull(cards);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!cardsAreUnique(cards)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        internalList.setAll(cards);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Clears all cards."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Sort all cards in the list in alphabetical order according to the question."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        internalList.sort(Comparator.comparing(o -\u003e o.getQuestion().toString().toLowerCase()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public ObservableList\u003cCard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Iterator\u003cCard\u003e iterator() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                || (other instanceof UniqueCardList // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCardList) other).internalList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns true if {@code cards} contains only unique cards."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private boolean cardsAreUnique(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size() - 1; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            for (int j \u003d i + 1; j \u003c cards.size(); j++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                if (cards.get(i).isSameCard(cards.get(j))) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 135,
      "ckjohn000": 17,
      "sciffany": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/UniqueDeckList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * A list of decks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class UniqueDeckList implements Iterable\u003cDeck\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public final ObservableList\u003cDeck\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns true if the list contains an equivalent deck as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean contains(Deck toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Adds a deck to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * The deck must not already exist in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void add(Deck toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the deck that has the same identifier as {@code target}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * The deck must exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Deck getDeck(Deck target) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Replaces the deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (!target.isSameDeck(editedDeck) \u0026\u0026 contains(editedDeck)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        internalList.set(index, editedDeck);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Removes the equivalent deck from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * The deck must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void remove(Deck toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Sort all decks in the list in alphabetical order according to the name of decks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        internalList.sort(Comparator.comparing(o -\u003e o.getName().toString()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDecks(UniqueDeckList replacement) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Replaces the contents of this list with {@code decks}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        requireAllNonNull(decks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (!decksAreUnique(decks)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        internalList.setAll(decks);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public ObservableList\u003cDeck\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public Iterator\u003cDeck\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                || (other instanceof UniqueDeckList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDeckList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns true if {@code decks} contains only unique decks."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @param decks"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private boolean decksAreUnique(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size() - 1; i++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            for (int j \u003d i + 1; j \u003c decks.size(); j++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                if (decks.get(i).isSameDeck(decks.get(j))) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 135,
      "ChangDarren": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/CardNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Signals that the operation is unable to find the specified Card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class CardNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/DeckImportException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * Signals that the operation will result in duplicate Cards (Cards are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeckImportException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public DeckImportException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 10,
      "sciffany": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/DeckNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Signals that the operation is unable to find the specified deck."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeckNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/DuplicateCardException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Signals that the operation will result in duplicate Cards. (Cards are identified by the question)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class DuplicateCardException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public DuplicateCardException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        super(\"Cards list contains duplicate cards(s).\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/DuplicateDeckException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * Signals that the operation will result in duplicate Decks (Decks are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DuplicateDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public DuplicateDeckException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        super(\"Operation would result in duplicate decks\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 10,
      "sciffany": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/IllegalOperationWhileReviewingCardException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Signals that the operation cannot occur when reviewing cards."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class IllegalOperationWhileReviewingCardException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public IllegalOperationWhileReviewingCardException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        super(\"Operation is not allowed when user is reviewing decks.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/IllegalOperationWhileReviewingDeckException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Signals that the operation cannot occur when reviewing deck."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class IllegalOperationWhileReviewingDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public IllegalOperationWhileReviewingDeckException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        super(\"Operation is not allowed when user is reviewing deck.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/NotReviewingDeckException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Signals that the operation cannot occur without reviewing deck first."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class NotReviewingDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public NotReviewingDeckException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        super(\"Operation requires user to be reviewing deck.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns true if a given string is a valid tag."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return \"[\" + tagName + \"]\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static Card[] getSampleCards() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return new Card[]{new Card(\"What layer is HTTP at?\", \"Application\", getTagSet(\"CS2105\")), new Card("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                \"What transport does HTTP use?\", \"TCP\", getTagSet(\"CS2105\")), new Card("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                \"How many sides does a triangle have?\", \"3\", getTagSet(\"Geometry\")), new Card("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                \"How many seconds are there in 1 millisecond?\", \"1 * 10^-3\", new HashSet\u003cTag\u003e())};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static Deck[] getSampleDecks() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck sampleDeck \u003d new Deck(new Name(\"Sample Deck\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (Card sampleCard : getSampleCards()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            sampleDeck.addCard(sampleCard);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new Deck[]{sampleDeck};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static ReadOnlyTopDeck getSampleTopDeck() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck sampleTd \u003d new TopDeck();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (Deck sampleDeck : getSampleDecks()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            sampleTd.addDeck(sampleDeck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return sampleTd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 20,
      "sciffany": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Jackson-friendly version of {@link Card}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class JsonAdaptedCard {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Card\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Constructs a {@code JsonAdaptedCard} with the given card details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public JsonAdaptedCard(@JsonProperty(\"question\") String question, @JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            this.tags.addAll(tagged);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Converts a given {@code Card} into this class for Jackson\u0027s use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public JsonAdaptedCard(Card source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.question \u003d source.getQuestion();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.answer \u003d source.getAnswer();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        this.tags.addAll(source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Converts this Jackson-friendly adapted card object into the model\u0027s {@code Card} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted card."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Card toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        final List\u003cTag\u003e cardTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (JsonAdaptedTag tag : tags) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            cardTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (question \u003d\u003d null || question.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"question\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (answer \u003d\u003d null || answer.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"answer\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003cTag\u003e(cardTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new Card(question, answer, modelTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 71,
      "sciffany": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDeck.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Jackson-friendly version of {@link Deck}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class JsonAdaptedDeck {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deck\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @JsonProperty(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @JsonProperty(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private List\u003cJsonAdaptedCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeck} with the given deck details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public JsonAdaptedDeck(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           @JsonProperty(\"cards\") List\u003cJsonAdaptedCard\u003e cards) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.cards \u003d new ArrayList\u003c\u003e(cards);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Converts a given {@code Deck} into this class for Jackson\u0027s use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public JsonAdaptedDeck(Deck source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        cards \u003d source.getCards().internalList.stream().map(JsonAdaptedCard::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                                              .collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Converts this Jackson-friendly adapted deck object into the model\u0027s {@code Deck} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted deck."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public Deck toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        final List\u003cCard\u003e deckCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        for (JsonAdaptedCard card : cards) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            deckCards.add(card.toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        final Name deckName \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return new Deck(deckName, deckCards);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (!(other instanceof JsonAdaptedDeck)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        JsonAdaptedDeck otherDeck \u003d (JsonAdaptedDeck) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return Objects.equals(name, otherDeck.name) \u0026\u0026 cards.equals(otherDeck.cards);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 78,
      "sciffany": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 4,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTopDeck.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * An Immutable TopDeck that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "@JsonRootName(value \u003d \"topdeck\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "class JsonSerializableTopDeck {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"Decks list contains duplicate deck(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"Cards list contains duplicate cards(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final List\u003cJsonAdaptedDeck\u003e decks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Constructs a {@code JsonSerializableTopDeck} with the given decks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public JsonSerializableTopDeck(@JsonProperty(\"decks\") List\u003cJsonAdaptedDeck\u003e decks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.decks.addAll(decks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Converts a given {@code ReadOnlyTopDeck} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTopDeck}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public JsonSerializableTopDeck(ReadOnlyTopDeck source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        decks.addAll(source.getDeckList().stream().map(JsonAdaptedDeck::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Converts this serializable deck into the model\u0027s {@code TopDeck} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public TopDeck toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck topDeck \u003d new TopDeck();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        for (JsonAdaptedDeck jsonAdaptedDeck : decks) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            Deck deck \u003d jsonAdaptedDeck.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            if (topDeck.hasDeck(deck)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            topDeck.addDeck(deck);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return topDeck;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 48,
      "ckjohn000": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTopDeckStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class JsonTopDeckStorage implements TopDeckStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTopDeckStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public JsonTopDeckStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Path getTopDeckFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Optional\u003cReadOnlyTopDeck\u003e readTopDeck() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return readTopDeck(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Similar to {@link #readTopDeck()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Optional\u003cReadOnlyTopDeck\u003e readTopDeck(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        Optional\u003cJsonSerializableTopDeck\u003e jsonTopDeck \u003d JsonUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .readJsonFile(filePath, JsonSerializableTopDeck.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!jsonTopDeck.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return Optional.of(jsonTopDeck.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void saveTopDeck(ReadOnlyTopDeck topDeck) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        saveTopDeck(topDeck, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Similar to {@link #saveTopDeck(ReadOnlyTopDeck)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void saveTopDeck(ReadOnlyTopDeck topDeck, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        requireNonNull(topDeck);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTopDeck(topDeck), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 17,
      "sciffany": 2,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public interface Storage extends TopDeckStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    Path getTopDeckFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    Optional\u003cReadOnlyTopDeck\u003e readTopDeck() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    void saveTopDeck(ReadOnlyTopDeck topDeck) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private TopDeckStorage topDeckStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public StorageManager(TopDeckStorage topDeckStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.topDeckStorage \u003d topDeckStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Path getTopDeckFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return topDeckStorage.getTopDeckFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Optional\u003cReadOnlyTopDeck\u003e readTopDeck() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return readTopDeck(topDeckStorage.getTopDeckFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Optional\u003cReadOnlyTopDeck\u003e readTopDeck(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return topDeckStorage.readTopDeck(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void saveTopDeck(ReadOnlyTopDeck topDeck) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        saveTopDeck(topDeck, topDeckStorage.getTopDeckFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void saveTopDeck(ReadOnlyTopDeck topDeck, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeckStorage.saveTopDeck(topDeck, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 14,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TopDeckStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Represents a storage for {@link seedu.address.model.TopDeck}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public interface TopDeckStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    Path getTopDeckFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns TopDeck data as a {@link ReadOnlyTopDeck}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    Optional\u003cReadOnlyTopDeck\u003e readTopDeck() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see #getTopDeckFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    Optional\u003cReadOnlyTopDeck\u003e readTopDeck(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Saves the given {@link ReadOnlyTopDeck} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param topDeck cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    void saveTopDeck(ReadOnlyTopDeck topDeck) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see #saveTopDeck(ReadOnlyTopDeck)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    void saveTopDeck(ReadOnlyTopDeck topDeck, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 45,
      "sciffany": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CardDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * An UI component that displays information of a {@code Card}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class CardDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final String FXML \u003d \"CardListDisplayCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d {\"red\", \"yellow\", \"blue\", \"green\", \"grey\", \"magenta\", \"pink\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * @see"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public final Card card;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public CardDisplay(Card card, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xsot"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xsot"
        },
        "content": "        question.setText(card.getQuestion());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xsot"
        },
        "content": "        answer.setText(card.getAnswer());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xsot"
        },
        "content": "        initTags(card);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Creates the tag labels for {@code card}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private void initTags(Card card) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        card.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (!(other instanceof CardDisplay)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CardDisplay card \u003d (CardDisplay) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 this.card.equals(card.card);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 28,
      "xsot": 5,
      "sciffany": 3,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.PrefillCommandBoxCommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                keyEvent.consume();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                navigateToPreviousInput();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                keyEvent.consume();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                navigateToNextInput();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xsot"
        },
        "content": "            CommandResult commandResult \u003d commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xsot"
        },
        "content": "            if (commandResult instanceof PrefillCommandBoxCommandResult) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xsot"
        },
        "content": "                String prefilledText \u003d ((PrefillCommandBoxCommandResult) commandResult).getPrefilledText();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xsot"
        },
        "content": "                replaceText(prefilledText);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xsot"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xsot"
        },
        "content": "                replaceText(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xsot"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xsot": 8,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeckDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * An UI component that displays information of a {@code Deck}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class DeckDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static final String FXML \u003d \"DeckListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * @see"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public final Deck deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public DeckDisplay(Deck deck, int displayedIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        name.setText(deck.getName().fullName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": "        if (!(other instanceof DeckDisplay)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeckDisplay card \u003d (DeckDisplay) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 deck.equals(card.deck);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 50,
      "xsot": 4,
      "sciffany": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *                               Thread."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 4,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 3,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ListItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * Panel containing the list of cards."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class ListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private ListView\u003cListItem\u003e listView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public ListPanel(ObservableList\u003cListItem\u003e list, ObservableValue\u003cListItem\u003e selectedItem,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                     Consumer\u003cListItem\u003e onSelectedItemChange) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "        listView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            logger.fine(\"Selection in list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "            onSelectedItemChange.accept(newValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "        listView.setItems(list);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xsot"
        },
        "content": "        listView.setCellFactory(cardListView -\u003e new CardListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xsot"
        },
        "content": "        selectedItem.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xsot"
        },
        "content": "            logger.info(\"Selected item changed to: \" + newValue);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected card,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xsot"
        },
        "content": "            if (Objects.equals(listView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xsot"
        },
        "content": "                listView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xsot"
        },
        "content": "                int index \u003d listView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xsot"
        },
        "content": "                listView.scrollTo(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xsot"
        },
        "content": "                listView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code ListItem}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xsot"
        },
        "content": "    class CardListViewCell extends ListCell\u003cListItem\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xsot"
        },
        "content": "        protected void updateItem(ListItem item, boolean empty) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xsot"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xsot"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xsot"
        },
        "content": "                if (item instanceof Card) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xsot"
        },
        "content": "                    setGraphic(new CardDisplay((Card) item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xsot"
        },
        "content": "                } else if (item instanceof Deck) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xsot"
        },
        "content": "                    setGraphic(new DeckDisplay((Deck) item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xsot"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 5,
      "xsot": 31,
      "sciffany": 1,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.ExitCommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.HelpCommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.commands.StudyPanelCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.UpdatePanelCommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private ListPanel listPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private StudyPanel studyPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private StackPane contentPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        listPanel \u003d new ListPanel(logic.getFilteredList(), logic.selectedItemProperty(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                  logic::setSelectedItem);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        contentPanelPlaceholder.getChildren().add(listPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTopDeckFilePath(), logic.getTopDeck());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xsot"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                                                  (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public ListPanel getListPanel() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return listPanel;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xsot"
        },
        "content": "            if (commandResult instanceof UpdatePanelCommandResult) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                listPanel \u003d new ListPanel(logic.getFilteredList(), logic.selectedItemProperty(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                          logic::setSelectedItem);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                contentPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                contentPanelPlaceholder.getChildren().add(listPanel.getRoot());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            } else if (commandResult instanceof StudyPanelCommand) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                studyPanel \u003d new StudyPanel(logic.textShownProperty(), logic.studyStateProperty(),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                            logic.userAnswerProperty());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                contentPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                contentPanelPlaceholder.getChildren().add(studyPanel.getRoot());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xsot"
        },
        "content": "            } else if (commandResult instanceof HelpCommandResult) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xsot"
        },
        "content": "            } else if (commandResult instanceof ExitCommandResult) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 5,
      "xsot": 11,
      "sciffany": 14,
      "-": 180
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String TOTAL_CARDS_STATUS \u003d \"%d card(s) total\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String TOTAL_DECKS_STATUS \u003d \"%d deck(s) total\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Label totalCardsStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private Label totalDecksStatus;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyTopDeck topDeck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.addListener(observable -\u003e updateTotalDecksStatus((ReadOnlyTopDeck) observable));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        updateTotalDecksStatus(topDeck);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xsot"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Updates card count in the status bar to the actual count."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xsot"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private void updateTotalDecksStatus(ReadOnlyTopDeck topDeck) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        int decksCount \u003d topDeck.getDeckList().size();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        totalDecksStatus.setText(String.format(TOTAL_DECKS_STATUS, decksCount));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 10,
      "ckjohn000": 4,
      "xsot": 5,
      "sciffany": 8,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudyPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sciffany"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import javafx.css.PseudoClass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.StudyView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * The Study Panel of the App."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "public class StudyPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final String FXML \u003d \"StudyPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final PseudoClass ANSWER \u003d PseudoClass.getPseudoClass(\"answer\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final String YOUR_ANSWER_LABEL \u003d \"Your answer: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private HBox studyPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private HBox card;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private Label userAnswerLabel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public StudyPanel(ObservableValue\u003cString\u003e textShown, ObservableValue\u003cStudyView.StudyState\u003e studyState,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                      ObservableValue\u003cString\u003e userAnswer) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        question.setText(textShown.getValue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        userAnswerLabel.setVisible(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        card.pseudoClassStateChanged(ANSWER, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        textShown.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            logger.info(\"textShown changed to: \" + newValue);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            question.setText(textShown.getValue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        studyState.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            logger.info(\"color changed for: \" + newValue);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            card.pseudoClassStateChanged(ANSWER, studyState.getValue() \u003d\u003d StudyView.StudyState.ANSWER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            question.pseudoClassStateChanged(ANSWER, studyState.getValue() \u003d\u003d StudyView.StudyState.ANSWER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            userAnswerLabel.setVisible(studyState.getValue() \u003d\u003d StudyView.StudyState.ANSWER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        userAnswer.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            logger.info(\"user answer changed to: \" + newValue);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            userAnswerLabel.setText(YOUR_ANSWER_LABEL + userAnswer.getValue());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 6,
      "sciffany": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 4,
      "sciffany": 16,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 16,
      "-": 77
    }
  },
  {
    "path": "src/main/resources/view/CardListDisplayCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                \u003cLabel fx:id\u003d\"question\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answers\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 2,
      "sciffany": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": "               promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sciffany": 3,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-border-color: transparent transparent derive(-fx-base, 80%) transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sciffany"
        },
        "content": ".cell_huge_label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-font-size: 24px;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sciffany"
        },
        "content": ".userAnswer_label {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sciffany"
        },
        "content": "#studyPane {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sciffany"
        },
        "content": "#card {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-effect: dropshadow(three-pass-box, rgba(0, 0, 0, 0.8), 10, 0, 0, 0);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-border-radius: 10 10 10 10;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-background-radius: 10 10 10 10;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-background-color: #223040;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sciffany"
        },
        "content": "#card:answer {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sciffany"
        },
        "content": "#question {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-padding: 20px;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sciffany"
        },
        "content": "#question:answer {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    -fx-text-fill: #223040;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sciffany"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-background-color: skyblue;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "#tags .magenta {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-background-color: magenta;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 38,
      "sciffany": 46,
      "-": 345
    }
  },
  {
    "path": "src/main/resources/view/DeckListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"deckPane\" fx:id\u003d\"deckPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 30,
      "sciffany": 1
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sciffany": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/resources/view/ListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "    \u003cListView fx:id\u003d\"listView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "xsot": 1,
      "sciffany": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": "         title\u003d\"TopDeck\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xsot"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": "                    \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"contentPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "xsot": 3,
      "sciffany": 4,
      "-": 54
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"syncStatus\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    \u003cLabel fx:id\u003d\"totalCardsStatus\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    \u003cLabel fx:id\u003d\"totalDecksStatus\" GridPane.columnIndex\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 3,
      "sciffany": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/StudyPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"studyPane\" fx:id\u003d\"studyPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        \u003cInsets bottom\u003d\"20\" left\u003d\"20\" right\u003d\"20\" top\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    \u003cHBox fx:id\u003d\"card\" maxHeight\u003d\"300\" minHeight\u003d\"300\" minWidth\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \u003cLabel fx:id\u003d\"question\" prefHeight\u003d\"300.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"cell_huge_label\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    \u003cHBox fx:id\u003d\"status\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \u003cInsets bottom\u003d\"20\" left\u003d\"20\" right\u003d\"20\" top\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \u003cLabel fx:id\u003d\"userAnswerLabel\" styleClass\u003d\"userAnswer_label\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sciffany": 28
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    \u003clink href\u003d\"DarkTheme.css\" rel\u003d\"stylesheet\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "sciffany": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableTopDeckTest/duplicateCardTopDeck.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  \"decks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "      \"name\": \"Deck1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"cards\": ["
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "          \"question\": \"Duplicate question?\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "          \"answer\": \"Duplicate answer!\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tagged\": ["
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"tag1\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"tag2\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "          \"question\": \"Duplicate question?\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "          \"answer\": \"Duplicate answer!\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tagged\": ["
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"tag1\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"tag2\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 7,
      "sciffany": 18
    }
  },
  {
    "path": "src/test/data/JsonSerializableTopDeckTest/duplicateDeckTopDeck.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  \"decks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"DuplicateDeck\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"cards\": ["
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"watsup\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"nothing mcuh\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"why\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"because\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"hhhh\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"bbbb\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"DuplicateDeck\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"cards\": []"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"betaalpha\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"cards\": []"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"supppppppp\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"cards\": []"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 18,
      "sciffany": 18
    }
  },
  {
    "path": "src/test/data/JsonSerializableTopDeckTest/invalidDeckTopDeck.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  \"decks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"Deck1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"cards\": ["
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Is this an invalid question?\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"Yes it is\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tagged\": ["
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"bad*tag\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 5,
      "sciffany": 11
    }
  },
  {
    "path": "src/test/data/JsonSerializableTopDeckTest/typicalDeckTopDeck.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  \"decks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"Typical Deck\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"cards\": ["
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Solve 1 + 1.\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"2\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What is 10 - 10?\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"0\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What is 8 * 8?\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"64\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Evaluate 1024 / 2.\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"512\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Hello?\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"World\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"CS\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Simple\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Are there any tag?\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"No\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Is this card unique?\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"Yes it is.\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Which later is HTTP at?\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"Application\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"CS2105\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What transport does HTTP use?\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"TCP\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"CS2105\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What is the status code for OK in HTTP?\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"200\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"CS2105\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"Algebra\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"cards\": []"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"Bacon Salad Recipe\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"cards\": []"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"Calculus\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"cards\": []"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"Darwinian Studies\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"cards\": ["
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Solve 1 + 1.\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"2\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What is 10 - 10?\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"0\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What is 8 * 8?\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"64\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Evaluate 1024 / 2.\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"512\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Hello?\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"World\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"CS\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Simple\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Are there any tag?\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"No\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Is this card unique?\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"Yes it is.\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Which later is HTTP at?\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"Yes it is.\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What transport does HTTP use?\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"TCP\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"CS2105\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What is the status code for OK in HTTP?\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"200\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"CS2105\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"Epistemology\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"cards\": ["
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Solve 1 + 1.\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"2\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What is 10 - 10?\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"0\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What is 8 * 8?\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"64\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Evaluate 1024 / 2.\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"512\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Hello?\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"World\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"CS\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Simple\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Are there any tag?\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"No\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Is this card unique?\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"Yes it is.\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Which later is HTTP at?\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"Yes it is.\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What transport does HTTP use?\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"TCP\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"CS2105\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What is the status code for OK in HTTP?\","
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"200\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"CS2105\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"Baby there\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"cards\": ["
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Solve 1 + 1.\","
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"2\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What is 10 - 10?\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"0\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What is 8 * 8?\","
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"64\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Evaluate 1024 / 2.\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"512\","
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Math\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Hello?\","
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"World\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"CS\","
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"Simple\""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Are there any tag?\","
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"No\","
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Is this card unique?\","
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"Yes it is.\","
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Which later is HTTP at?\","
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"Yes it is.\","
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"tags\": []"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What transport does HTTP use?\","
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"TCP\","
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"CS2105\""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"What is the status code for OK in HTTP?\","
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"200\","
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tags\": ["
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"CS2105\""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"is nothing\","
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"cards\": []"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    },"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"holding me back\","
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"cards\": []"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 107,
      "sciffany": 199
    }
  },
  {
    "path": "src/test/data/JsonTopDeckStorageTest/invalidAndValidDeckTopDeck.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  \"decks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"Deck1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"cards\": ["
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Is this a valid question?\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"Yes it is\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tagged\": ["
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"tag1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Is this an invalid question?\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"Yes it is\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tagged\": ["
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"bad*tag\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 7,
      "sciffany": 16
    }
  },
  {
    "path": "src/test/data/JsonTopDeckStorageTest/invalidDeckTopDeck.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  \"decks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "      \"name\": \"Deck1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      \"cards\": ["
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"question\": \"Is this an invalid question?\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "          \"answer\": \"Yes it is\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          \"tagged\": ["
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"bad*tag\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "          ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 5,
      "sciffany": 11
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * to avoid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *                               DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               milliseconds."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return (int) listTargetWindows().stream().filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .getTitle().equals(stageTitle)).count();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                         .filter(Stage.class::isInstance) // checks that"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                         // the window is of type Stage"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                                                         .map(Stage.class::cast)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                                                         .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                                         .findFirst();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 8,
      "-": 113
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CardDisplayHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Provides a handle to a card display in the card list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class CardDisplayHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final String QUESTION_FIELD_ID \u003d \"#question\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final String ANSWER_FIELD_ID \u003d \"#answer\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Label questionLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Label answerLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public CardDisplayHandle(Node cardNode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        questionLabel \u003d getChildNode(QUESTION_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        answerLabel \u003d getChildNode(ANSWER_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        tagLabels \u003d tagsContainer.getChildrenUnmodifiable().stream().map(Label.class::cast)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                 .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return questionLabel.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return answerLabel.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return tagLabels.stream().map(Label::getText).collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns true if this handle contains {@code card}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param card"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public boolean equals(Card card) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return getQuestion().equals(card.getQuestion()) \u0026\u0026 getAnswer().equals(card.getAnswer())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            .copyOf(card.getTags().stream().map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                    .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 62,
      "sciffany": 4
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DeckDisplayHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Provides a handle to a deck card in the deck list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeckDisplayHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public DeckDisplayHandle(Node deckNode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        super(deckNode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns true if this handle contains {@code deck}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean equals(Deck deck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return getName().equals(deck.getName().fullName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 38
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Provides a handle for {@code ListPanel} containing the list of {@code DeckDisplay}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class ListPanelHandle extends NodeHandle\u003cListView\u003cDeck\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String DECK_LIST_VIEW_ID \u003d \"#listView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static final String DECK_PANE_ID \u003d \"#deckPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private Optional\u003cDeck\u003e lastRememberedSelectedDeckDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public ListPanelHandle(ListView\u003cDeck\u003e listPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        super(listPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns a handle to the selected {@code DeckDisplayHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @throws AssertionError        if no deck is selected, or more than 1 deck is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @throws IllegalStateException if the selected deck is currently not in the scene graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public DeckDisplayHandle getHandleToSelectedDeck() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        List\u003cDeck\u003e selectedDeckList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (selectedDeckList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"Deck list size expected 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return getAllDeckNodes().stream().map(DeckDisplayHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                .filter(handle -\u003e handle.equals(selectedDeckList.get(0))).findFirst()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns the index of the selected deck."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public int getSelectedDeckIndex() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns true if a deck is currently selected."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean isAnyDeckSelected() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        List\u003cDeck\u003e selectedDecksList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (selectedDecksList.size() \u003e 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"Deck list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return !selectedDecksList.isEmpty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Navigates the listview to display {@code deck}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void navigateToDeck(Deck deck) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (!getRootNode().getItems().contains(deck)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new IllegalArgumentException(\"Deck does not exist.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            getRootNode().scrollTo(deck);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void navigateToDeck(int index) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Selects the {@code DeckDisplay} at {@code index} in the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns the display deck handle of a deck associated with the {@code index} in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @throws IllegalStateException if the selected deck is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public DeckDisplayHandle getDeckDisplayHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return getAllDeckNodes().stream().map(DeckDisplayHandle::new)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                .filter(handle -\u003e handle.equals(getDeck(index))).findFirst()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private Deck getDeck(int index) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns all deck nodes in the scene graph."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Deck nodes that are visible in the listview are definitely in the scene graph, while some nodes that"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * are not"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private Set\u003cNode\u003e getAllDeckNodes() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return guiRobot.lookup(DECK_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Remembers the selected {@code DeckDisplay} in the list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void rememberSelectedDeckDisplay() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        List\u003cDeck\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            lastRememberedSelectedDeckDisplay \u003d Optional.empty();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            lastRememberedSelectedDeckDisplay \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Returns true if the selected {@code DeckDisplay} is different from the value remembered by the most"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * {@code rememberSelectedDeckDisplay()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public boolean isSelectedDeckDisplayChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        List\u003cDeck\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return lastRememberedSelectedDeckDisplay.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return !lastRememberedSelectedDeckDisplay.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                || !lastRememberedSelectedDeckDisplay.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 64,
      "ChangDarren": 6,
      "sciffany": 10,
      "-": 79
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final ListPanelHandle listPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        listPanel \u003d new ListPanelHandle(getChildNode(ListPanelHandle.DECK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public ListPanelHandle getListPanel() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return listPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 3,
      "xsot": 1,
      "sciffany": 2,
      "-": 40
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Labeled;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final String TOTAL_DECKS_STATUS_ID \u003d \"#totalDecksStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final String TOTAL_CARDS_STATUS_ID \u003d \"#totalCardsStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Labeled syncStatusNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Labeled totalCardsStatusNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Labeled totalDecksStatusNode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Labeled saveLocationNode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private String lastRememberedTotalCardsStatus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private String lastRememberedTotalDecksStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        totalDecksStatusNode \u003d getChildNode(TOTAL_DECKS_STATUS_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        totalCardsStatusNode \u003d getChildNode(TOTAL_CARDS_STATUS_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xsot"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the text of the \u0027total cards\u0027 portion of the status bar."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xsot"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public String getTotalCardsStatus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return totalCardsStatusNode.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the text of the \u0027total decks\u0027 portion of the status bar."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public String getTotalDecksStatus() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return totalDecksStatusNode.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * most recent"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xsot"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Remembers the content of the \u0027total cards\u0027 portion of the status bar."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void rememberTotalCardsStatus() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        lastRememberedTotalCardsStatus \u003d getTotalCardsStatus();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Remembers the content of the \u0027total decks\u0027 portion of the status bar."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xsot"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void rememberTotalDecksStatus() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        lastRememberedTotalDecksStatus \u003d getTotalDecksStatus();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xsot"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Returns true if the current content of the \u0027total persons\u0027 is different from the value remembered by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * the most"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * recent {@code rememberTotalPersonsStatus()} call."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xsot"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public boolean isTotalPersonsStatusChanged() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return !lastRememberedTotalCardsStatus.equals(getTotalDecksStatus());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * the most"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 28,
      "xsot": 14,
      "sciffany": 7,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.storage.JsonTopDeckStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            .getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d TestUtil"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            .getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    protected Supplier\u003cReadOnlyTopDeck\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyTopDeck\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            JsonTopDeckStorage jsonTopDeckStorage \u003d new JsonTopDeckStorage(saveFileLocation);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                jsonTopDeckStorage.saveTopDeck(initialDataSupplier.get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        userPrefs.setTopDeckFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public TopDeck readStorageTopDeck() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return new TopDeck(storage.readTopDeck().get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new AssertionError(\"Data is not in the TopDeck format.\", dce);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return storage.getTopDeckFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Model copy \u003d new ModelManager((model.getTopDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xsot"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 13,
      "xsot": 1,
      "sciffany": 8,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String defaultConfigAsString \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                \"Current log level : INFO\\n\" + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString, int major, int minor, int patch,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                              boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * (int)}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return configFileInTestDataFolder !\u003d null ? TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .resolve(configFileInTestDataFolder) : null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                     SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                     SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                     SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 6,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                       String word, Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        StringUtil.containsKeywordsInQuestionIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                              Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(StringUtil.containsKeywordsInQuestionIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(StringUtil.containsKeywordsInQuestionIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertFalse(StringUtil.containsKeywordsInQuestionIgnoreCase(\"aaa bbb ccc\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                    \"bb\")); // Sentence word bigger than"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        // query word"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertFalse(StringUtil.containsKeywordsInQuestionIgnoreCase(\"aaa bbb ccc\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                    \"bbbb\")); // Query word bigger than"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        // sentence word"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTrue(StringUtil.containsKeywordsInQuestionIgnoreCase(\"aaa bBb ccc\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                   \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTrue(StringUtil.containsKeywordsInQuestionIgnoreCase(\"aaa bBb ccc@1\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                   \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTrue(StringUtil.containsKeywordsInQuestionIgnoreCase(\"  AAA   bBb   ccc  \","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                   \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                StringUtil.containsKeywordsInQuestionIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        // (boundary case)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTrue(StringUtil.containsKeywordsInQuestionIgnoreCase(\"aaa bbb ccc\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                   \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(StringUtil.containsKeywordsInQuestionIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 4,
      "sciffany": 19,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_A_ARGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.AddDeckCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.storage.JsonTopDeckStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        JsonTopDeckStorage addressBookStorage \u003d new JsonTopDeckStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_DECK_SUCCESS, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        JsonTopDeckStorage addressBookStorage \u003d new JsonAddressBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String addCommand \u003d AddDeckCommand.COMMAND_WORD + VALID_DECK_NAME_A_ARGS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck expectedDeck \u003d new DeckBuilder(VALID_DECK_A).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.addDeck(expectedDeck);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xsot"
        },
        "content": "        logic.getFilteredList().remove(0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * thrown,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                                       String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            String expectedMessage \u003d String"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    .format(HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                     e);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonTopDeckStorage {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void saveTopDeck(ReadOnlyTopDeck topDeck, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 19,
      "xsot": 1,
      "sciffany": 16,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCardCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ListItem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.ViewState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class AddCardCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xsot"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertTrue(model.isAtCardsView());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void constructor_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xsot"
        },
        "content": "        new AddCardCommand((CardsView) model.getViewState(), null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void execute_cardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        ModelStubAcceptingCardAdded modelStub \u003d new ModelStubAcceptingCardAdded();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        CommandResult commandResult \u003d new AddCardCommand((CardsView) model.getViewState(), validCard)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertEquals(String.format(AddCardCommand.MESSAGE_SUCCESS, validCard),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                     commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(Arrays.asList(validCard), modelStub.cardsAdded);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void execute_duplicateCard_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xsot"
        },
        "content": "        AddCardCommand addCardCommand \u003d new AddCardCommand((CardsView) model.getViewState(), validCard);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCard(validCard);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xsot"
        },
        "content": "        thrown.expectMessage(AddCardCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xsot"
        },
        "content": "        addCardCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card addition \u003d new CardBuilder().withQuestion(\"What is 1 + 1?\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card subtraction \u003d new CardBuilder().withQuestion(\"What is 10 - 8?\").build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xsot"
        },
        "content": "        AddCardCommand addAdditionCommand \u003d new AddCardCommand((CardsView) model.getViewState(), addition);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        AddCardCommand addSubtractionCommand \u003d new AddCardCommand((CardsView) model.getViewState(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                  subtraction);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(addAdditionCommand.equals(addAdditionCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        AddCardCommand addAdditionCommandCopy \u003d new AddCardCommand((CardsView) model.getViewState(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                   addition);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(addAdditionCommand.equals(addAdditionCommandCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(addAdditionCommand.equals(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(addAdditionCommand.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(addAdditionCommand.equals(addSubtractionCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public Path getTopDeckFilePath() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void setTopDeckFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        public ReadOnlyTopDeck getTopDeck() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        public void setTopDeck(ReadOnlyTopDeck newData) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public boolean hasCard(Card card, Deck deck) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void addCard(Card card, Deck deck) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void deleteCard(Card target, Deck deck) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void setCard(Card target, Card editedCard, Deck deck) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public ObservableList\u003cListItem\u003e getFilteredList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void updateFilteredList(Predicate\u003c? extends ListItem\u003e predicate) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public boolean canUndoTopDeck() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public boolean canRedoTopDeck() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void undoTopDeck() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void redoTopDeck() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void commitTopDeck() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xsot"
        },
        "content": "        public ReadOnlyProperty\u003cListItem\u003e selectedItemProperty() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public ListItem getSelectedItem() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void setSelectedItem(ListItem item) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public Deck getDeck(Deck target) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void deleteDeck(Deck deck) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void updateDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public Command parse(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void changeDeck(Deck deck) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void goToDecksView() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void studyDeck(Deck deck) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public boolean isAtDecksView() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public ViewState getViewState() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public boolean isAtCardsView() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * A Model stub that contains a single card."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private class ModelStubWithCard extends ModelStub {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        private final Card card;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        ModelStubWithCard(Card card) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            this.card \u003d card;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public boolean hasCard(Card card, Deck deck) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return this.card.isSameCard(card);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * A Model stub that always accept the card being added."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private class ModelStubAcceptingCardAdded extends ModelStub {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public boolean hasCard(Card card, Deck deck) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return cardsAdded.stream().anyMatch(card::isSameCard);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void addCard(Card card, Deck deck) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            cardsAdded.add(card);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void commitTopDeck() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "xsot"
        },
        "content": "            // called by {@code AddCardCommand#execute()}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public ReadOnlyTopDeck getTopDeck() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            return new TopDeck();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 85,
      "ckjohn000": 42,
      "xsot": 22,
      "sciffany": 12,
      "-": 178
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddDeckCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ListItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.ViewState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class AddDeckCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void constructor_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xsot"
        },
        "content": "        new AddDeckCommand((DecksView) model.getViewState(), null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_deckAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        ModelStubAcceptingDeckAdded modelStub \u003d new ModelStubAcceptingDeckAdded();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        CommandResult commandResult \u003d new AddDeckCommand((DecksView) model.getViewState(), validDeck)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertEquals(String.format(AddDeckCommand.MESSAGE_SUCCESS, validDeck), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(Arrays.asList(validDeck), modelStub.decksAdded);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_duplicateDeck_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xsot"
        },
        "content": "        AddDeckCommand addDeckCommand \u003d new AddDeckCommand((DecksView) model.getViewState(), validDeck);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithDeck(validDeck);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expectMessage(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xsot"
        },
        "content": "        addDeckCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck firstDeck \u003d new DeckBuilder().withName(\"Test Deck1\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck secondDeck \u003d new DeckBuilder().withName(\"Test Deck2\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xsot"
        },
        "content": "        AddDeckCommand addFirstDeckCommand \u003d new AddDeckCommand((DecksView) model.getViewState(), firstDeck);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        AddDeckCommand addSecondDeckCommand \u003d new AddDeckCommand((DecksView) model.getViewState(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                 secondDeck);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(addFirstDeckCommand.equals(addFirstDeckCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        AddDeckCommand addFirstDeckCommandCopy \u003d new AddDeckCommand((DecksView) model.getViewState(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                    firstDeck);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(addFirstDeckCommand.equals(addFirstDeckCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(addFirstDeckCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(addFirstDeckCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(addFirstDeckCommand.equals(addSecondDeckCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public Path getTopDeckFilePath() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void setTopDeckFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        public ReadOnlyTopDeck getTopDeck() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        public void setTopDeck(ReadOnlyTopDeck newData) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public boolean hasCard(Card card, Deck deck) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void addCard(Card card, Deck deck) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void deleteCard(Card target, Deck deck) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void setCard(Card target, Card editedCard, Deck deck) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public Deck getDeck(Deck target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public ObservableList\u003cListItem\u003e getFilteredList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void updateFilteredList(Predicate\u003c? extends ListItem\u003e predicate) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public boolean canUndoTopDeck() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public boolean canRedoTopDeck() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void undoTopDeck() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void redoTopDeck() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void commitTopDeck() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xsot"
        },
        "content": "        public ReadOnlyProperty\u003cListItem\u003e selectedItemProperty() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public ListItem getSelectedItem() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void setSelectedItem(ListItem item) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void deleteDeck(Deck deck) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void updateDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public Command parse(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void changeDeck(Deck deck) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void goToDecksView() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void studyDeck(Deck deck) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public boolean isAtDecksView() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public ViewState getViewState() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public boolean isAtCardsView() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * A Model stub that contains a single deck."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private class ModelStubWithDeck extends ModelStub {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        private final Deck deck;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        ModelStubWithDeck(Deck deck) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            this.deck \u003d deck;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return this.deck.isSameDeck(deck);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * A Model stub that always accept the deck being added."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private class ModelStubAcceptingDeckAdded extends ModelStub {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        final ArrayList\u003cDeck\u003e decksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return decksAdded.stream().anyMatch(deck::isSameDeck);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            decksAdded.add(deck);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public void commitTopDeck() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "xsot"
        },
        "content": "            // called by {@code AddDeckCommand#execute()}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public ReadOnlyTopDeck getTopDeck() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return new TopDeck();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 270,
      "ChangDarren": 36,
      "xsot": 12,
      "sciffany": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddDeckIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTopDeck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCardCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class AddDeckIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void execute_addDeck_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.addDeck(validDeck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertCommandSuccess(new AddDeckCommand((DecksView) model.getViewState(), validDeck), model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             commandHistory, String.format(AddDeckCommand.MESSAGE_SUCCESS, validDeck),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck deckInList \u003d model.getTopDeck().getDeckList().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertCommandFailure(new AddDeckCommand((DecksView) model.getViewState(), deckInList), model,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             commandHistory, MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 4,
      "ckjohn000": 7,
      "xsot": 3,
      "sciffany": 6,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTopDeck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void execute_emptyTopDeck_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void execute_nonEmptyTopDeck_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.setTopDeck(new TopDeck());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 9,
      "sciffany": 4,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "        // HelpCommandResult -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertFalse(commandResult.equals(new HelpCommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "        // ExitCommandResult -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertFalse(commandResult.equals(new ExitCommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "        // PrefillCommandBoxCommandResult -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertFalse(commandResult.equals(new PrefillCommandBoxCommandResult(\"feedback\", \"a\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": "        // PrefillCommandBoxCommandResult with different fields -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CommandResult prefillCommandBoxCommandResult1 \u003d new PrefillCommandBoxCommandResult(\"feedback\", \"a\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CommandResult prefillCommandBoxCommandResult2 \u003d new PrefillCommandBoxCommandResult(\"feedback\", \"b\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(prefillCommandBoxCommandResult1.equals(prefillCommandBoxCommandResult2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xsot"
        },
        "content": "        // HelpCommandResult -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new HelpCommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xsot"
        },
        "content": "        // ExitCommandResult -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new ExitCommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xsot"
        },
        "content": "        // PrefillCommandBoxCommandResult -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                        new PrefillCommandBoxCommandResult(\"feedback\", \"a\").hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xsot"
        },
        "content": "        // PrefillCommandBoxCommandResult with different fields -\u003e returns different hashcode"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CommandResult prefillCommandBoxCommandResult1 \u003d new PrefillCommandBoxCommandResult(\"feedback\", \"a\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CommandResult prefillCommandBoxCommandResult2 \u003d new PrefillCommandBoxCommandResult(\"feedback\", \"b\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertNotEquals(prefillCommandBoxCommandResult1.hashCode(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                        prefillCommandBoxCommandResult2.hashCode());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 5,
      "xsot": 15,
      "sciffany": 4,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.ListItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.DeckNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.deck.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.EditDeckDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_QUESTION_HELLO \u003d \"Hello?\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_QUESTION_MOD \u003d \"What module is this?\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_QUESTION_ADDITION \u003d \"Solve 1 + 1.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_QUESTION_SUBTRACTION \u003d \"What is 10 - 10?\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_QUESTION_UNIQUE \u003d \"Is this a unique question?\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_ANSWER_HELLO \u003d \"World\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_ANSWER_MOD \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_ANSWER_ADDITION \u003d \"2\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_ANSWER_SUBTRACTION \u003d \"0\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_ANSWER_UNIQUE \u003d \"Yes it is unique\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_TAG_MOD \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_TAG_SUBJECT \u003d \"CS\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_TAG_MATH \u003d \"Math\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String VALID_TAG_SIMPLE \u003d \"Simple\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String QUESTION_DESC_HELLO \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_HELLO;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String QUESTION_DESC_MOD \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_MOD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String QUESTION_DESC_ADDITION \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_ADDITION;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String QUESTION_DESC_SUBTRACTION \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_SUBTRACTION;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String QUESTION_DESC_UNIQUE \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_UNIQUE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String ANSWER_DESC_HELLO \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_HELLO;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String ANSWER_DESC_MOD \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_MOD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String ANSWER_DESC_ADDITION \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_ADDITION;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String ANSWER_DESC_SUBTRACTION \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_SUBTRACTION;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String ANSWER_DESC_UNIQUE \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_UNIQUE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String TAG_DESC_MOD \u003d \" \" + PREFIX_TAG + VALID_TAG_MOD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String TAG_DESC_SUBJECT \u003d \" \" + PREFIX_TAG + VALID_TAG_SUBJECT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String TAG_DESC_MATH \u003d \" \" + PREFIX_TAG + VALID_TAG_MATH;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String TAG_DESC_SIMPLE \u003d \" \" + PREFIX_TAG + VALID_TAG_SIMPLE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String VALID_NAME \u003d \"My Deck\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String INVALID_NAME \u003d \"B@d_Deck_Name\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String VALID_NAME_JOHN \u003d \"John Phua\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String VALID_NAME_DECK_A \u003d \"My Deck A\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String VALID_NAME_DECK_B \u003d \"Your deck\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Deck VALID_DECK_A \u003d new DeckBuilder().withName(VALID_NAME_DECK_A).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Deck VALID_DECK_B \u003d new DeckBuilder().withName(VALID_NAME_DECK_B).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String VALID_DECK_NAME_A_ARGS \u003d \" \" + PREFIX_NAME + VALID_NAME_DECK_A;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String VALID_DECK_NAME_B_ARGS \u003d \" \" + PREFIX_NAME + VALID_NAME_DECK_B;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String INVALID_DECK_NAME_ARGS \u003d \" \" + PREFIX_NAME + \" Bad_Deck_Name!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final List\u003cCard\u003e VALID_CARD_LIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final EditCardCommand.EditCardDescriptor DESC_HELLO;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final EditCardCommand.EditCardDescriptor DESC_MOD;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final EditCardCommand.EditCardDescriptor DESC_ADDITION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final EditDeckCommand.EditDeckDescriptor DESC_A;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final EditDeckCommand.EditDeckDescriptor DESC_B;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        DESC_HELLO \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_HELLO)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                    .withAnswer(VALID_ANSWER_HELLO).withTags(VALID_TAG_MOD)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                    .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        DESC_MOD \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_MOD)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                  .withAnswer(VALID_ANSWER_MOD)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                  .withTags(VALID_TAG_MOD, VALID_TAG_SUBJECT).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        DESC_ADDITION \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_ADDITION)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                       .withAnswer(VALID_ANSWER_ADDITION)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                       .withTags(VALID_TAG_MATH).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        DESC_A \u003d new EditDeckDescriptorBuilder().withName(VALID_NAME_DECK_A).withCards(VALID_CARD_LIST)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        DESC_B \u003d new EditDeckDescriptorBuilder().withName(VALID_NAME_DECK_B).withCards(VALID_CARD_LIST)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                            CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Convenience wrapper to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * that takes a string {@code expectedMessage} and checks for {@code CommandResult}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                            CommandHistory actualCommandHistory, String expectedMessage,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Convenience wrapper to"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * that takes a string {@code expectedMessage} and checks for {@code UpdatePanelCommandResult}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static void assertUpdateCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                  CommandHistory actualCommandHistory, String expectedMessage,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                  Model expectedModel) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CommandResult expectedCommandResult \u003d new UpdatePanelCommandResult(expectedMessage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * - the topdeck, filtered card list and selected card in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xsot"
        },
        "content": "    // TODO: update this"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                            CommandHistory actualCommandHistory, String expectedMessage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck expectedTopDeck \u003d new TopDeck(actualModel.getTopDeck());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xsot"
        },
        "content": "        List\u003cListItem\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xsot"
        },
        "content": "        ListItem expectedSelectedItem \u003d actualModel.getSelectedItem();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            assertEquals(expectedTopDeck, actualModel.getTopDeck());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xsot"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xsot"
        },
        "content": "            assertEquals(expectedSelectedItem, actualModel.getSelectedItem());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the deck at the given {@code targetIndex} in"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code model}\u0027s Topdeck."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static void showDeckAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(model.isAtDecksView());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DecksView decksView \u003d (DecksView) model.getViewState();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c decksView.getFilteredList().size());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Deck deck \u003d decksView.getFilteredList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        final String[] splitName \u003d deck.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        decksView.updateFilteredList(new DeckNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertEquals(1, decksView.getFilteredList().size());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the card at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code model}\u0027s deck."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static void showCardAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(model.isAtCardsView());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xsot"
        },
        "content": "        CardsView cardsView \u003d (CardsView) model.getViewState();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c cardsView.getFilteredList().size());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Card card \u003d cardsView.getFilteredList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        final String question \u003d card.getQuestion().replace(\"?\", \"\").replace(\".\", \"\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xsot"
        },
        "content": "        cardsView.updateFilteredList(new QuestionContainsKeywordsPredicate(Arrays.asList(question)));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        //Gets all the question that starts with what"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertEquals(1, cardsView.getFilteredList().size());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Deletes the first deck in {@code model}\u0027s filtered list from {@code model}\u0027s deck."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static void deleteFirstDeck(Model model) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertTrue(model.isAtDecksView());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DecksView decksView \u003d (DecksView) model.getViewState();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Deck firstDeck \u003d decksView.getFilteredList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.deleteDeck(firstDeck);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.commitTopDeck();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Updates the given {@code model}\u0027s CardsView."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static void updateCardsView(Model model) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(model.isAtCardsView());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CardsView prevModelCardsView \u003d (CardsView) model.getViewState();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck newDeck \u003d model.getDeck(prevModelCardsView.getActiveDeck());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.changeDeck(newDeck);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the current active deck in {@code model}\u0027s CardsView."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * The model must be in CardsView."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static Deck extractActiveDeck(Model model) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CardsView cardsView \u003d (CardsView) model.getViewState();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d cardsView.getActiveDeck();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return activeDeck;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 83,
      "ckjohn000": 23,
      "xsot": 20,
      "sciffany": 33,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCardCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertUpdateCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.extractActiveDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.updateCardsView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalDeck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTopDeck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * {@code DeleteCardCommand}. TopDeck should be in CardsView before any test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class DeleteCardCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private CardsView cardsView;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(model.isAtCardsView());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xsot"
        },
        "content": "        cardsView \u003d (CardsView) model.getViewState();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Card cardToDelete \u003d cardsView.getFilteredList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteCardCommand deleteCommand \u003d new DeleteCardCommand(cardsView, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCardCommand.MESSAGE_DELETE_CARD_SUCCESS, cardToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.deleteCard(cardToDelete, activeDeck);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertUpdateCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(cardsView.getFilteredList().size() + 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteCardCommand deleteCommand \u003d new DeleteCardCommand(cardsView, outOfBoundIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Card cardToDelete \u003d cardsView.getFilteredList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteCardCommand deleteCommand \u003d new DeleteCardCommand(cardsView, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCardCommand.MESSAGE_DELETE_CARD_SUCCESS, cardToDelete);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.deleteCard(cardToDelete, activeDeck);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertUpdateCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of cards list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTopDeck().getDeckList().get(0)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                         .getCards().internalList.size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteCardCommand deleteCommand \u003d new DeleteCardCommand(cardsView, outOfBoundIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Card cardToDelete \u003d cardsView.getFilteredList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteCardCommand deleteCommand \u003d new DeleteCardCommand(cardsView, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.deleteCard(cardToDelete, activeDeck);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // delete -\u003e first card deleted"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // undo -\u003e reverts TopDeck back to previous state and filtered card list to show all persons"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.undoTopDeck();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        updateCardsView(expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertUpdateCommandSuccess(new UndoCommand(cardsView), model, commandHistory,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                   UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // redo -\u003e same first card deleted again"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.redoTopDeck();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        updateCardsView(expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertUpdateCommandSuccess(new RedoCommand(cardsView), model, commandHistory,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                   RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(cardsView.getFilteredList().size() + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteCardCommand deleteCommand \u003d new DeleteCardCommand(cardsView, outOfBoundIndex);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertCommandFailure(new UndoCommand(cardsView), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertCommandFailure(new RedoCommand(cardsView), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * 1. Deletes a {@code Card} from a filtered list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted card in the"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the card object regardless of indexing."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameCardDeleted() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteCardCommand deleteCommand \u003d new DeleteCardCommand(cardsView, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TopDeck(model.getTopDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        showCardAtIndex(model, INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Card cardToDelete \u003d cardsView.getFilteredList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.deleteCard(cardToDelete, activeDeck);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // delete -\u003e deletes second card in unfiltered card list / first card in filtered card list"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // undo -\u003e reverts topdeck back to previous state and filtered card list to show all cards"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.undoTopDeck();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        updateCardsView(expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertUpdateCommandSuccess(new UndoCommand(cardsView), model, commandHistory,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                   UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // redo -\u003e deletes same second card in unfiltered card list"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.redoTopDeck();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        updateCardsView(expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertUpdateCommandSuccess(new RedoCommand(cardsView), model, commandHistory,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                   RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteCardCommand deleteFirstCommand \u003d new DeleteCardCommand(cardsView, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteCardCommand deleteSecondCommand \u003d new DeleteCardCommand(cardsView, INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteCardCommand deleteFirstCommandCopy \u003d new DeleteCardCommand(cardsView, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private void showNoCard(Model model) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xsot"
        },
        "content": "        cardsView.updateFilteredList(p -\u003e false);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertTrue(cardsView.getFilteredList().isEmpty());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 79,
      "xsot": 23,
      "sciffany": 10,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteDeckCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showDeckAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * Contains integration tests (interaction with the TopDeck Model) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * {@code DeleteDeckCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeleteDeckCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private DecksView decksView \u003d (DecksView) model.getViewState();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Deck deckToDelete \u003d decksView.getFilteredList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteDeckCommand deleteCommand \u003d new DeleteDeckCommand(decksView, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteDeckCommand.MESSAGE_DELETE_DECK_SUCCESS, deckToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.deleteDeck(deckToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(decksView.getFilteredList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteDeckCommand deleteCommand \u003d new DeleteDeckCommand(decksView, outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                             Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Deck deckToDelete \u003d decksView.getFilteredList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteDeckCommand deleteCommand \u003d new DeleteDeckCommand(decksView, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteDeckCommand.MESSAGE_DELETE_DECK_SUCCESS, deckToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.deleteDeck(deckToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of TopDeck list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTopDeck().getDeckList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteDeckCommand deleteCommand \u003d new DeleteDeckCommand(decksView, outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                             Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteDeckCommand deleteFirstCommand \u003d new DeleteDeckCommand(decksView, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteDeckCommand deleteSecondCommand \u003d new DeleteDeckCommand(decksView, INDEX_SECOND_DECK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xsot"
        },
        "content": "        DeleteDeckCommand deleteFirstCommandCopy \u003d new DeleteDeckCommand(decksView, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private void showNoDeck(Model model) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xsot"
        },
        "content": "        decksView.updateFilteredList(p -\u003e false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertTrue(decksView.getFilteredList().isEmpty());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 103,
      "xsot": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCardCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HELLO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_MOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_MOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_MOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertUpdateCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.extractActiveDeck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.updateCardsView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalDeck;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTopDeck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * EditCardCommand."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class EditCardCommandTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private CardsView cardsView;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(model.isAtCardsView());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xsot"
        },
        "content": "        cardsView \u003d (CardsView) model.getViewState();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card editedCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditCardCommand editCommand \u003d new EditCardCommand(cardsView, INDEX_FIRST_CARD, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(expectedModel.isAtCardsView());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xsot"
        },
        "content": "        CardsView expectedCardsView \u003d (CardsView) expectedModel.getViewState();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Card currentCard \u003d expectedCardsView.getFilteredList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.setCard(currentCard, editedCard, activeDeck);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertUpdateCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Index indexLastCard \u003d Index.fromOneBased(cardsView.getFilteredList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Card lastCard \u003d cardsView.getFilteredList().get(indexLastCard.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CardBuilder cardInList \u003d new CardBuilder(lastCard);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card editedCard \u003d cardInList.withQuestion(VALID_QUESTION_MOD).withAnswer(VALID_ANSWER_MOD).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .withQuestion(VALID_QUESTION_MOD).withAnswer(VALID_ANSWER_MOD).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditCardCommand editCommand \u003d new EditCardCommand(cardsView, indexLastCard, descriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.setCard(lastCard, editedCard, activeDeck);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertUpdateCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditCardCommand editCommand \u003d new EditCardCommand(cardsView, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Card firstCard \u003d cardsView.getFilteredList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xsot"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (Tag tag : firstCard.getTags()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xsot"
        },
        "content": "            builder.append(\" \").append(PREFIX_TAG).append(tag.tagName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xsot"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String prefilledText \u003d String"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .format(\"%s %d %s%s %s%s %s\", EditCardCommand.COMMAND_WORD, 1, PREFIX_QUESTION,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                        firstCard.getQuestion(), PREFIX_ANSWER, firstCard.getAnswer(), builder.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        CommandResult expectedResult \u003d new PrefillCommandBoxCommandResult("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                EditCardCommand.MESSAGE_EDIT_CARD_AUTOCOMPLETE, prefilledText);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedResult, model);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Card cardInFilteredList \u003d cardsView.getFilteredList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card editedCard \u003d new CardBuilder(cardInFilteredList).withQuestion(VALID_QUESTION_MOD).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditCardCommand editCommand \u003d new EditCardCommand(cardsView, INDEX_FIRST_CARD,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                          new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                  .withQuestion(VALID_QUESTION_MOD).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TopDeck(model.getTopDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        expectedModel.setCard(cardsView.getFilteredList().get(INDEX_FIRST_CARD.getZeroBased()), editedCard,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                              activeDeck);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertUpdateCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void execute_duplicateCardUnfilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Card firstCard \u003d cardsView.getFilteredList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(firstCard).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditCardCommand editCommand \u003d new EditCardCommand(cardsView, INDEX_SECOND_CARD, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCardCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void execute_duplicateCardFilteredList_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Card cardInList \u003d cardsView.getFilteredList().get(INDEX_SECOND_CARD.getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // edit card in filtered list into a duplicate card in typical deck"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditCardCommand editCommand \u003d new EditCardCommand(cardsView, INDEX_FIRST_CARD,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                                          new EditCardDescriptorBuilder(cardInList).build());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCardCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void execute_invalidCardIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(cardsView.getFilteredList().size() + 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                .withQuestion(VALID_QUESTION_MOD).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditCardCommand editCommand \u003d new EditCardCommand(cardsView, outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * but smaller than size of the deck"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void execute_invalidCardIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of deck list"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTopDeck().getDeckList().get(0)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                         .getCards().internalList.size());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditCardCommand editCommand \u003d new EditCardCommand(cardsView, outOfBoundIndex,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                          new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                  .withQuestion(VALID_QUESTION_MOD).build());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card editedCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Card cardToEdit \u003d cardsView.getFilteredList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditCardCommand editCommand \u003d new EditCardCommand(cardsView, INDEX_FIRST_CARD, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TopDeck(model.getTopDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(expectedModel);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.setCard(cardToEdit, editedCard, activeDeck);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.undoTopDeck();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        updateCardsView(expectedModel);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // edit -\u003e first card edited"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // undo -\u003e reverts topdeck back to previous state and filtered card list to show all cards"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertUpdateCommandSuccess(new UndoCommand(cardsView), model, commandHistory,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                   UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // redo -\u003e same first card edited again"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.redoTopDeck();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        updateCardsView(expectedModel);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertUpdateCommandSuccess(new RedoCommand(cardsView), model, commandHistory,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                   RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(cardsView.getFilteredList().size() + 1);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                .withQuestion(VALID_QUESTION_MOD).build();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditCardCommand editCommand \u003d new EditCardCommand(cardsView, outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertCommandFailure(new UndoCommand(cardsView), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertCommandFailure(new RedoCommand(cardsView), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * 1. Edits a {@code Card} from a filtered list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited card in the"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the card object regardless of indexing."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameCardEdited() throws Exception {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card editedCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand editCommand \u003d new EditCardCommand(cardsView, INDEX_SECOND_CARD, descriptor);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TopDeck(model.getTopDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CardsView expectedCardsView \u003d (CardsView) expectedModel.getViewState();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        showCardAtIndex(expectedModel, INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card cardToEdit \u003d expectedCardsView.getFilteredList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(expectedModel);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.setCard(cardToEdit, editedCard, activeDeck);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // edit -\u003e edits second card in unfiltered card list / first card in filtered card list"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // undo -\u003e reverts topdeck back to previous state and filtered card list to show all persons"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.undoTopDeck();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CardsView expectedModelCardsView \u003d (CardsView) expectedModel.getViewState();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck newDeck \u003d expectedModel.getDeck(expectedModelCardsView.getActiveDeck());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(newDeck);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertUpdateCommandSuccess(new UndoCommand(cardsView), model, commandHistory,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                   UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertNotEquals(cardsView.getFilteredList().get(INDEX_FIRST_CARD.getZeroBased()), cardToEdit);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // redo -\u003e edits same second card in unfiltered card list"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.redoTopDeck();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModelCardsView \u003d (CardsView) expectedModel.getViewState();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        newDeck \u003d expectedModel.getDeck(expectedModelCardsView.getActiveDeck());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(newDeck);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertUpdateCommandSuccess(new RedoCommand(cardsView), model, commandHistory,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                   RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "xsot"
        },
        "content": "        final EditCardCommand standardCommand \u003d new EditCardCommand(cardsView, INDEX_FIRST_CARD, DESC_HELLO);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditCardCommand.EditCardDescriptor copyDescriptor \u003d new EditCardCommand.EditCardDescriptor("
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                DESC_HELLO);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditCardCommand commandWithSameValues \u003d new EditCardCommand(cardsView, INDEX_FIRST_CARD,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                    copyDescriptor);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCardCommand(cardsView, INDEX_SECOND_CARD, DESC_HELLO)));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCardCommand(cardsView, INDEX_FIRST_CARD, DESC_MOD)));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 138,
      "xsot": 35,
      "sciffany": 29,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCardDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HELLO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_MOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_MOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_MOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class EditCardDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptorWithSameValues \u003d new EditCardCommand.EditCardDescriptor("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                DESC_HELLO);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(DESC_HELLO.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(DESC_HELLO.equals(DESC_HELLO));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(DESC_HELLO.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(DESC_HELLO.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(DESC_HELLO.equals(DESC_MOD));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand.EditCardDescriptor editedHello \u003d new EditCardDescriptorBuilder(DESC_HELLO)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                .withQuestion(VALID_QUESTION_MOD).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(DESC_HELLO.equals(editedHello));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        editedHello \u003d new EditCardDescriptorBuilder(DESC_HELLO).withAnswer(VALID_ANSWER_MOD).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(DESC_HELLO.equals(editedHello));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        editedHello \u003d new EditCardDescriptorBuilder(DESC_HELLO).withTags(VALID_TAG_MATH).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(DESC_HELLO.equals(editedHello));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 47,
      "sciffany": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditDeckCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EDIT_DECK_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARD_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JOHN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertUpdateCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showDeckAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.EditDeckDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * Contains integration tests (interaction with the TopDeck Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": " * tests for"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * EditCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class EditDeckCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private DecksView decksView \u003d (DecksView) model.getViewState();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck editedDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder(editedDeck).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(decksView, INDEX_FIRST_DECK, descriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_DECK_SUCCESS, editedDeck);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xsot"
        },
        "content": "        expectedModel.updateDeck(decksView.getFilteredList().get(0), editedDeck);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Index indexLastTopDeckDeck \u003d Index.fromOneBased(decksView.getFilteredList().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Deck lastDeck \u003d decksView.getFilteredList().get(indexLastTopDeckDeck.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        DeckBuilder deckInList \u003d new DeckBuilder(lastDeck);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck editedDeck \u003d deckInList.withName(VALID_NAME_JOHN).withCards(VALID_CARD_LIST).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .withName(VALID_NAME_JOHN).withCards(VALID_CARD_LIST).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(decksView, indexLastTopDeckDeck, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_DECK_SUCCESS, editedDeck);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.updateDeck(lastDeck, editedDeck);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(decksView, INDEX_FIRST_DECK,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                          new EditDeckCommand.EditDeckDescriptor());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Deck editedDeck \u003d decksView.getFilteredList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_DECK_SUCCESS, editedDeck);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Deck deckInFilteredList \u003d decksView.getFilteredList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck editedDeck \u003d new DeckBuilder(deckInFilteredList).withName(VALID_NAME_JOHN).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(decksView, INDEX_FIRST_DECK,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                          new EditDeckDescriptorBuilder()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                  .withName(VALID_NAME_JOHN).build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_DECK_SUCCESS, editedDeck);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xsot"
        },
        "content": "        expectedModel.updateDeck(decksView.getFilteredList().get(0), editedDeck);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_duplicateTopDeckDeckUnfilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Deck firstDeck \u003d decksView.getFilteredList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder(firstDeck).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(decksView, INDEX_SECOND_DECK, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_duplicateTopDeckDeckFilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // edit deck in filtered list into a duplicate in TopDeck"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck deckInList \u003d model.getTopDeck().getDeckList().get(INDEX_SECOND_DECK.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(decksView, INDEX_FIRST_DECK,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                                                          new EditDeckDescriptorBuilder(deckInList).build());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_invalidTopDeckDeckIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(decksView.getFilteredList().size() + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .withName(VALID_NAME_JOHN).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(decksView, outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * but smaller than size of TopDeck"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void execute_invalidTopDeckDeckIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_DECK);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of TopDeck list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTopDeck().getDeckList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(decksView, outOfBoundIndex,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                          new EditDeckDescriptorBuilder()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                  .withName(VALID_NAME_JOHN).build());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                             Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck editedDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Deck deckToEdit \u003d decksView.getFilteredList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder(editedDeck).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(decksView, INDEX_FIRST_DECK, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.updateDeck(deckToEdit, editedDeck);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // edit -\u003e first deck edited"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // undo -\u003e reverts TopDeck back to previous state and filtered deck list to show all decks"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.undoTopDeck();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertUpdateCommandSuccess(new UndoCommand(decksView), model, commandHistory,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                   UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // redo -\u003e same first deck edited again"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.redoTopDeck();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertUpdateCommandSuccess(new RedoCommand(decksView), model, commandHistory,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xsot"
        },
        "content": "                                   RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(decksView.getFilteredList().size() + 1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .withName(VALID_NAME_JOHN).build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(decksView, outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // execution failed -\u003e TopDeck state not added into model"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                             Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // single TopDeck state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertCommandFailure(new UndoCommand(decksView), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertCommandFailure(new RedoCommand(decksView), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * 1. Edits a {@code Deck} from a filtered list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited deck in the"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the deck object regardless of indexing."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameTopDeckDeckEdited() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck editedDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder(editedDeck).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditDeckCommand editCommand \u003d new EditDeckCommand(decksView, INDEX_FIRST_DECK, descriptor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        showDeckAtIndex(model, INDEX_SECOND_DECK);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Deck deckToEdit \u003d decksView.getFilteredList().get(INDEX_FIRST_DECK.getZeroBased());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.updateDeck(deckToEdit, editedDeck);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.commitTopDeck();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // edit -\u003e edits second deck in unfiltered deck list / first deck in filtered deck list"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // undo -\u003e reverts TopDeck back to previous state and filtered deck list to show all decks"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.undoTopDeck();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertUpdateCommandSuccess(new UndoCommand(decksView), model, commandHistory,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                   UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertNotEquals(decksView.getFilteredList().get(INDEX_FIRST_DECK.getZeroBased()), deckToEdit);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // redo -\u003e edits same second deck in unfiltered deck list"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedModel.redoTopDeck();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertUpdateCommandSuccess(new RedoCommand(decksView), model, commandHistory,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xsot"
        },
        "content": "                                   RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xsot"
        },
        "content": "        final EditDeckCommand standardCommand \u003d new EditDeckCommand(decksView, INDEX_FIRST_DECK, DESC_A);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        EditDeckCommand.EditDeckDescriptor copyDescriptor \u003d new EditDeckCommand.EditDeckDescriptor(DESC_A);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditDeckCommand commandWithSameValues \u003d new EditDeckCommand(decksView, INDEX_FIRST_DECK,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                    copyDescriptor);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertFalse(standardCommand.equals(new EditDeckCommand(decksView, INDEX_SECOND_DECK, DESC_A)));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertFalse(standardCommand.equals(new EditDeckCommand(decksView, INDEX_FIRST_DECK, DESC_B)));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 209,
      "ChangDarren": 7,
      "xsot": 29,
      "sciffany": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "        CommandResult expectedCommandResult \u003d new ExitCommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xsot": 1,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCardCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.LAYER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.OK_STATUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalDeck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTopDeck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.deck.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class FindCardCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private CardsView cardsView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private CardsView expectedCardsView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void initialise() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(model.isAtCardsView());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(model.isAtCardsView());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xsot"
        },
        "content": "        cardsView \u003d (CardsView) model.getViewState();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xsot"
        },
        "content": "        expectedCardsView \u003d (CardsView) expectedModel.getViewState();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xsot"
        },
        "content": "        cardsView.updateFilteredList(Model.PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xsot"
        },
        "content": "        expectedCardsView.updateFilteredList(Model.PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d new QuestionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d new QuestionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xsot"
        },
        "content": "        FindCardCommand findFirstCommand \u003d new FindCardCommand(cardsView, firstPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xsot"
        },
        "content": "        FindCardCommand findSecondCommand \u003d new FindCardCommand(cardsView, secondPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xsot"
        },
        "content": "        FindCardCommand findFirstCommandCopy \u003d new FindCardCommand(cardsView, firstPredicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void execute_zeroKeywords_noCardFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xsot"
        },
        "content": "        FindCardCommand command \u003d new FindCardCommand(cardsView, predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xsot"
        },
        "content": "        expectedCardsView.updateFilteredList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertEquals(Collections.emptyList(), cardsView.getFilteredList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void execute_multipleKeywords_multipleCardsFound() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\"status layer\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xsot"
        },
        "content": "        FindCardCommand command \u003d new FindCardCommand(cardsView, predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xsot"
        },
        "content": "        expectedCardsView.updateFilteredList(predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertEquals(Arrays.asList(LAYER, OK_STATUS), cardsView.getFilteredList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void execute_sentence_foundSpecificCard() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String questionString \u003d LAYER.getQuestion().replace(\"?\", \"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d prepareStringPredicate(questionString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xsot"
        },
        "content": "        FindCardCommand command \u003d new FindCardCommand(cardsView, predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xsot"
        },
        "content": "        expectedCardsView.updateFilteredList(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertEquals(Arrays.asList(LAYER), cardsView.getFilteredList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Parses {@code userInput} into a {@code QuestionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private QuestionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new QuestionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Parses a {@code sentence} into a {@code QuestionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private QuestionContainsKeywordsPredicate prepareStringPredicate(String userInput) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new QuestionContainsKeywordsPredicate(Arrays.asList(userInput));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 81,
      "xsot": 18,
      "sciffany": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "        CommandResult expectedCommandResult \u003d new HelpCommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xsot": 1,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                             String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String expectedMessage \u003d String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .format(HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 4,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showDeckAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel \u003d new ModelManager(new TopDeck(model.getTopDeck()), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandSuccess(new ListCommand(model.getViewState()), model, commandHistory,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                             ListCommand.MESSAGE_DECK_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        showDeckAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandSuccess(new ListCommand(model.getViewState()), model, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                             ListCommand.MESSAGE_DECK_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 11,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertUpdateCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstDeck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        deleteFirstDeck(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        deleteFirstDeck(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.undoTopDeck();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.undoTopDeck();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        deleteFirstDeck(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        deleteFirstDeck(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.undoTopDeck();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.undoTopDeck();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.redoTopDeck();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertUpdateCommandSuccess(new RedoCommand(model.getViewState()), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                   RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.redoTopDeck();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertUpdateCommandSuccess(new RedoCommand(model.getViewState()), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                   RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertCommandFailure(new RedoCommand(model.getViewState()), model, commandHistory,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 15,
      "sciffany": 6,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCardCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTopDeck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class SelectCardCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private CardsView cardsView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(model.isAtCardsView());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xsot"
        },
        "content": "        cardsView \u003d (CardsView) model.getViewState();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(expectedModel.isAtCardsView());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(cardsView.getFilteredList().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_CARD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xsot"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(cardsView.getFilteredList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        showCardAtIndex(expectedModel, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        showCardAtIndex(expectedModel, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of TopDeck list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getTopDeck().getDeckList().get(0)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                          .getCards().internalList.size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xsot"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCardCommand(cardsView, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xsot"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCardCommand(cardsView, INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xsot"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCardCommand(cardsView, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * and checks that the model\u0027s selected card is set to the card at {@code index} in the filtered card"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xsot"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCardCommand(cardsView, index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xsot"
        },
        "content": "        expectedModel.setSelectedItem(cardsView.getFilteredList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * CommandException}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xsot"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCardCommand(cardsView, index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 32,
      "xsot": 10,
      "sciffany": 6,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertUpdateCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstDeck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        deleteFirstDeck(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        deleteFirstDeck(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        deleteFirstDeck(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        deleteFirstDeck(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.undoTopDeck();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertUpdateCommandSuccess(new UndoCommand(model.getViewState()), model, commandHistory,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                   UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.undoTopDeck();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertUpdateCommandSuccess(new UndoCommand(model.getViewState()), model, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                   UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertCommandFailure(new UndoCommand(model.getViewState()), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 11,
      "sciffany": 6,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCardCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_ADDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_HELLO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_SUBTRACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_ADDITION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_HELLO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_SUBTRACTION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SUBJECT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_HELLO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_HELLO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MOD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SUBJECT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ADDITION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.HELLO_WORLD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.SUBTRACTION;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalDeck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class AddCardCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private AddCardCommandParser parser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xsot"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertTrue(model.isAtCardsView());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xsot"
        },
        "content": "        parser \u003d new AddCardCommandParser((CardsView) model.getViewState());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card expectedCard \u003d new CardBuilder(SUBTRACTION).withTags(VALID_TAG_MOD).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + QUESTION_DESC_SUBTRACTION + ANSWER_DESC_SUBTRACTION"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xsot"
        },
        "content": "                + TAG_DESC_MOD, new AddCardCommand((CardsView) model.getViewState(), expectedCard));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_HELLO + QUESTION_DESC_SUBTRACTION + ANSWER_DESC_SUBTRACTION"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xsot"
        },
        "content": "                + TAG_DESC_MOD, new AddCardCommand((CardsView) model.getViewState(), expectedCard));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_SUBTRACTION + ANSWER_DESC_HELLO + ANSWER_DESC_SUBTRACTION"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xsot"
        },
        "content": "                + TAG_DESC_MOD, new AddCardCommand((CardsView) model.getViewState(), expectedCard));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        Card expectedCardMultipleTags \u003d new CardBuilder(HELLO_WORLD)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .withTags(VALID_TAG_MOD, VALID_TAG_SUBJECT).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_HELLO + ANSWER_DESC_HELLO + TAG_DESC_MOD + TAG_DESC_SUBJECT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           new AddCardCommand((CardsView) model.getViewState(), expectedCardMultipleTags));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card expectedCard \u003d new CardBuilder(ADDITION).withTags().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_ADDITION + ANSWER_DESC_ADDITION,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           new AddCardCommand((CardsView) model.getViewState(), expectedCard));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xsot"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // missing question prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_HELLO + ANSWER_DESC_HELLO, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // missing answer prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_HELLO + VALID_ANSWER_HELLO, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_HELLO + VALID_ANSWER_HELLO, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_HELLO + ANSWER_DESC_HELLO + INVALID_TAG_DESC + VALID_TAG_MOD,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                           Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           PREAMBLE_NON_EMPTY + QUESTION_DESC_HELLO + ANSWER_DESC_HELLO + TAG_DESC_SUBJECT"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                   + TAG_DESC_MOD,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xsot"
        },
        "content": "                           String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 29,
      "xsot": 24,
      "sciffany": 9,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddDeckCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DECK_NAME_ARGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_A_ARGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DECK_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.AddDeckCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class AddDeckCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private AddDeckCommandParser parser \u003d new AddDeckCommandParser((DecksView) model.getViewState());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck expectedDeck \u003d new DeckBuilder().withName(VALID_NAME_DECK_A).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // clean"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseSuccess(parser, VALID_DECK_NAME_A_ARGS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "                           new AddDeckCommand((DecksView) model.getViewState(), expectedDeck));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_DECK_NAME_A_ARGS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xsot"
        },
        "content": "                           new AddDeckCommand((DecksView) model.getViewState(), expectedDeck));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // No argument"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // Blank name"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseFailure(parser, PREFIX_NAME + \"\", expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseFailure(parser, \"n/\" + INVALID_DECK_NAME_ARGS, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_NAME_DECK_A,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 49,
      "xsot": 11,
      "sciffany": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                       String... expectedValues) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String argsString \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value\" + \" -t\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 4,
      "-": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCardCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * outside of the DeleteCardCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * same path through the DeleteCardCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class DeleteCardCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private DeleteCardCommandParser parser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xsot"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertTrue(model.isAtCardsView());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": "        parser \u003d new DeleteCardCommandParser((CardsView) model.getViewState());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseSuccess(parser, \"1\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           new DeleteCardCommand((CardsView) model.getViewState(), INDEX_FIRST_CARD));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 5,
      "xsot": 17,
      "sciffany": 4,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteDeckCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeleteDeckCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private DeleteDeckCommandParser parser \u003d new DeleteDeckCommandParser((DecksView) model.getViewState());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseSuccess(parser, \"1\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           new DeleteDeckCommand((DecksView) model.getViewState(), INDEX_FIRST_DECK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void parse_blankArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 26,
      "xsot": 7,
      "sciffany": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCardCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_ADDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_HELLO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_SUBTRACTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_ADDITION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_HELLO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SUBJECT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_ADDITION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_HELLO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_ADDITION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_HELLO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MOD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SUBJECT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalDeck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class EditCardCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            .format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private EditCardCommandParser parser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xsot"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertTrue(model.isAtCardsView());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xsot"
        },
        "content": "        parser \u003d new EditCardCommandParser((CardsView) model.getViewState());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_ADDITION, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertParseFailure(parser, \"-5\" + QUESTION_DESC_ADDITION, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertParseFailure(parser, \"0\" + QUESTION_DESC_ADDITION, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_MOD + TAG_DESC_SUBJECT + TAG_EMPTY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_MOD + TAG_EMPTY + TAG_DESC_SUBJECT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_MOD + TAG_DESC_SUBJECT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                targetIndex.getOneBased() + QUESTION_DESC_HELLO + ANSWER_DESC_HELLO + TAG_DESC_SUBJECT"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                        + TAG_DESC_MOD;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_HELLO)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                       .withAnswer(VALID_ANSWER_HELLO)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                       .withTags(VALID_TAG_SUBJECT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                                 VALID_TAG_MOD).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand((CardsView) model.getViewState(), targetIndex,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                              descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_HELLO;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                .withAnswer(VALID_ANSWER_HELLO).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand((CardsView) model.getViewState(), targetIndex,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                              descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void parse_noFieldsSpecified_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xsot"
        },
        "content": "        String userInput \u003d Integer.toString(targetIndex.getOneBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xsot"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand((CardsView) model.getViewState(), targetIndex);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // question"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_ADDITION;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                .withQuestion(VALID_QUESTION_ADDITION).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand((CardsView) model.getViewState(), targetIndex,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                              descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // answer"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_ADDITION;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_ADDITION).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xsot"
        },
        "content": "        expectedCommand \u003d new EditCardCommand((CardsView) model.getViewState(), targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_MOD;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withTags(VALID_TAG_MOD).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xsot"
        },
        "content": "        expectedCommand \u003d new EditCardCommand((CardsView) model.getViewState(), targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                targetIndex.getOneBased() + ANSWER_DESC_ADDITION + ANSWER_DESC_SUBTRACTION + ANSWER_DESC_HELLO"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                        + TAG_DESC_MOD + TAG_DESC_SUBJECT;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .withAnswer(VALID_ANSWER_HELLO).withTags(VALID_TAG_MOD, VALID_TAG_SUBJECT).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand((CardsView) model.getViewState(), targetIndex,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                              descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand((CardsView) model.getViewState(), targetIndex,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                              descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 44,
      "xsot": 28,
      "sciffany": 28,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditDeckCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DECK_NOT_EDITED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DECK_NAME_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_A_ARGS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_B_ARGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DECK_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DECK_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand.EditDeckDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.EditDeckDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class EditDeckCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            .format(MESSAGE_INVALID_COMMAND_FORMAT, EditDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private EditDeckCommandParser parser \u003d new EditDeckCommandParser((DecksView) model.getViewState());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_DECK_A, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_DECK_NOT_EDITED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_DECK_NAME_A_ARGS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_DECK_NAME_A_ARGS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DECK_NAME_ARGS, Name.MESSAGE_NAME); // invalid name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void parse_repeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_DECK_NAME_A_ARGS + VALID_DECK_NAME_B_ARGS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder().withName(VALID_NAME_DECK_B).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditDeckCommand expectedCommand \u003d new EditDeckCommand((DecksView) model.getViewState(), targetIndex,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                              descriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DECK_NAME_ARGS + VALID_DECK_NAME_B_ARGS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditDeckDescriptor descriptor \u003d new EditDeckDescriptorBuilder().withName(VALID_NAME_DECK_B).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditDeckCommand expectedCommand \u003d new EditDeckCommand((DecksView) model.getViewState(), targetIndex,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                              descriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 76,
      "xsot": 7,
      "sciffany": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCardCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xsot"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTopDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xsot"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.FindCardCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class FindCardCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private FindCardCommandParser parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xsot"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertTrue(model.isAtCardsView());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xsot"
        },
        "content": "        parser \u003d new FindCardCommandParser((CardsView) model.getViewState());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        FindCardCommand expectedFindCommand \u003d new FindCardCommand((CardsView) model.getViewState(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                  new QuestionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                          Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 3,
      "xsot": 17,
      "sciffany": 5,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(INDEX_FIRST_DECK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(INDEX_FIRST_DECK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 6,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTopDeck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.SelectDeckCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Test scope: similar to {@code DeleteCardCommandParserTest}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * @see DeleteCardCommandParserTest"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser(model.getViewState());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseSuccess(parser, \"1\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           new SelectDeckCommand((DecksView) model.getViewState(), INDEX_FIRST_CARD));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                           String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 11,
      "sciffany": 5,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TopDeckParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECK_NAME_A_ARGS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DECK_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTopDeck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.DecksView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.AddDeckCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.FindCardCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.SelectCardCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import seedu.address.model.deck.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.CardUtil;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class TopDeckParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final TopDeckParser parser \u003d new TopDeckParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTopDeck(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public void parseCommand_addDeck() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck deck \u003d new DeckBuilder().withName(VALID_NAME_DECK_A).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xsot"
        },
        "content": "        AddDeckCommand command \u003d (AddDeckCommand) parser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                .parseCommand(AddDeckCommand.COMMAND_WORD + VALID_DECK_NAME_A_ARGS, model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertEquals(new AddDeckCommand((DecksView) model.getViewState(), deck), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void parseCommand_addCard() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        AddCardCommand command \u003d (AddCardCommand) parser.parseCommand(CardUtil.getAddCommand(card), model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertEquals(new AddCardCommand((CardsView) model.getViewState(), card), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, model) instanceof ClearCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", model) instanceof"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ClearCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void parseCommand_deleteCard() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        DeleteCardCommand command \u003d (DeleteCardCommand) parser"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .parseCommand(DeleteCardCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased(), model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertEquals(new DeleteCardCommand((CardsView) model.getViewState(), INDEX_FIRST_CARD), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void parseCommand_editCard() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(card).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        EditCardCommand command \u003d (EditCardCommand) parser.parseCommand("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                EditCardCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased() + \" \" + CardUtil"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                        .getEditCardDescriptorDetails(descriptor), model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertEquals(new EditCardCommand((CardsView) model.getViewState(), INDEX_FIRST_CARD, descriptor),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                     command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, model) instanceof ExitCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", model) instanceof ExitCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void parseCommand_findCard() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        FindCardCommand command \u003d (FindCardCommand) parser.parseCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                FindCardCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertEquals(new FindCardCommand((CardsView) model.getViewState(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                         new QuestionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, model) instanceof HelpCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", model) instanceof HelpCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD, model) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\", model) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            parser.parseCommand(\"histories\", model);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, model) instanceof ListCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\", model) instanceof ListCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void parseCommand_selectCard() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.changeDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        SelectCardCommand command \u003d (SelectCardCommand) parser"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .parseCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased(), model);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertEquals(new SelectCardCommand((CardsView) model.getViewState(), INDEX_FIRST_CARD), command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD, model) instanceof RedoCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\", model) instanceof RedoCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD, model) instanceof UndoCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\", model) instanceof UndoCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        parser.parseCommand(\"\", model);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        parser.parseCommand(\"unknownCommand\", model);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 68,
      "ckjohn000": 6,
      "xsot": 7,
      "sciffany": 31,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.updateCardsView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ADDITION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.SUBTRACTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_B;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.CardsView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.DeckNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.TopDeckBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(new TopDeck(), modelManager.getTopDeck());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(null, modelManager.getSelectedItem());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        userPrefs.setTopDeckFilePath(Paths.get(\"topdeck/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        userPrefs.setTopDeckFilePath(Paths.get(\"new/topdeck/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setTopDeckFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.setTopDeckFilePath(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setTopDeckFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Path path \u003d Paths.get(\"topdeck/file/path\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.setTopDeckFilePath(path);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(path, modelManager.getTopDeckFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void hasDeck_deckNotInTopDeck_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(modelManager.hasDeck(DECK_A));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void hasDeck_deckInTopDeck_returnsTrue() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_A);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(modelManager.hasDeck(DECK_A));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void changeDeck_deckInTopDeck_changeViewState() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.changeDeck(DECK_B);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(modelManager.getViewState() instanceof CardsView);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Card Management Tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void hasCard_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.changeDeck(DECK_B);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.hasCard(null, activeDeck);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void hasCard_cardInTopDeck_returnsTrue() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.changeDeck(DECK_B);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addCard(ADDITION, activeDeck);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(modelManager.hasCard(ADDITION, activeDeck));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void hasCard_cardNotInTopDeck_returnsFalse() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.changeDeck(DECK_B);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addCard(ADDITION, activeDeck);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(modelManager.hasCard(SUBTRACTION, activeDeck));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void addCard_nullCard_throwsNulPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.changeDeck(DECK_B);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addCard(null, activeDeck);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void addCard_validCard_deckContainsNewCard() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.changeDeck(DECK_B);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addCard(SUBTRACTION, activeDeck);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        updateCardsView(modelManager);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(modelManager.hasCard(SUBTRACTION, activeDeck));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void deleteCard_nullCard_throwsNulPointerException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.changeDeck(DECK_B);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.deleteCard(null, activeDeck);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void deleteCard_cardIsSelected_selectionCleared() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.changeDeck(DECK_B);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addCard(ADDITION, activeDeck);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addCard(SUBTRACTION, activeDeck);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.setSelectedItem(ADDITION);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.deleteCard(SUBTRACTION, activeDeck);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(null, modelManager.getSelectedItem());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void deleteCard_cardInDeck_cardNotInDeck() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.changeDeck(DECK_B);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addCard(ADDITION, activeDeck);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(modelManager.hasCard(ADDITION, activeDeck));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.deleteCard(ADDITION, activeDeck);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(modelManager.hasCard(ADDITION, activeDeck));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard_nullCard_throwsNulPointerException() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.changeDeck(DECK_B);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.setCard(null, ADDITION, activeDeck);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard_cardInDeck_editedCardInDeck() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.changeDeck(DECK_B);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addCard(ADDITION, activeDeck);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(modelManager.hasCard(ADDITION, activeDeck));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.setCard(ADDITION, SUBTRACTION, activeDeck);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(modelManager.hasCard(SUBTRACTION, activeDeck));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //TODO delete functionality for deck"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //    public void deleteDeck_deckIsSelectedAndFirstDeckInFilteredDeckList_selectionCleared() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        modelManager.addDeck(DECK_A);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        modelManager.setSelectedItem(DECK_A);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        modelManager.deleteDeck(DECK_A);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        assertEquals(null, modelManager.getSelectedItem());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //TODO add delete deck functionality"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //    public void deleteDeck_deckIsSelectedAndSecondDeckInFilteredDeckList_firstDeckSelected() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        modelManager.addDeck(DECK_A);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        assertEquals(Arrays.asList(DECK_A, DECK_B), modelManager.getFilteredList());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        modelManager.setSelectedItem(DECK_B);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        modelManager.deleteDeck(DECK_B);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        assertEquals(DECK_A, modelManager.getSelectedItem());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //TODO add setDeck"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //    public void setDeck_deckIsSelected_selectedDeckUpdated() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        modelManager.addDeck(DECK_A);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        modelManager.setSelectedItem(DECK_A);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        Deck updatedAddition \u003d new DeckBuilder(DECK_A).build();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        modelManager.setDeck(DECK_A, updatedAddition);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //        assertEquals(updatedAddition, modelManager.getSelectedItem());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void getFilteredList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "xsot"
        },
        "content": "        modelManager.getFilteredList().remove(0);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setSelectedItem_cardNotInFilteredCardList_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.changeDeck(DECK_B);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(CardNotFoundException.class);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.setSelectedItem(ADDITION);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setSelectedItem_cardInFilteredCardList_setsSelectedCard() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addDeck(DECK_B);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.changeDeck(DECK_B);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d extractActiveDeck(modelManager);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.addCard(ADDITION, activeDeck);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        updateCardsView(modelManager);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(Collections.singletonList(ADDITION), modelManager.getFilteredList());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager.setSelectedItem(ADDITION);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(ADDITION, modelManager.getSelectedItem());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setSelectedItem_deckInFilteredDeckList_setsSelectedDeck() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        modelManager.addDeck(DECK_A);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(Collections.singletonList(DECK_A), modelManager.getFilteredList());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        modelManager.setSelectedItem(DECK_A);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(DECK_A, modelManager.getSelectedItem());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        TopDeck topDeck \u003d new TopDeckBuilder().withDeck(DECK_A).withDeck(DECK_B).build();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck differentTopDeck \u003d new TopDeck();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        modelManager \u003d new ModelManager(topDeck, userPrefs);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(topDeck, userPrefs);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different topDeck -\u003e returns false"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTopDeck, userPrefs)));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        String keyword \u003d DECK_A.getName().toString();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        modelManager.updateFilteredList(new DeckNameContainsKeywordsPredicate((Arrays.asList(keyword))));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(topDeck, userPrefs)));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        modelManager.updateFilteredList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        differentUserPrefs.setTopDeckFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(topDeck, differentUserPrefs)));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the activeDeck pointed to by CardsView in {@code model}."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param model must be in CardsView"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Deck extractActiveDeck(Model model) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CardsView cardsView \u003d (CardsView) modelManager.getViewState();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck activeDeck \u003d cardsView.getActiveDeck();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return activeDeck;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 185,
      "ckjohn000": 38,
      "xsot": 1,
      "-": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TopDeckTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ADDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.UNIQUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_F;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_WITH_CARDS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class TopDeckTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final TopDeck topDeck \u003d new TopDeck();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(Collections.emptyList(), topDeck.getDeckList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.resetData(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void resetData_withValidReadOnlyTopDeck_replacesData() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck newData \u003d getTypicalTopDeck();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.resetData(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(newData, topDeck);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void resetData_withDuplicateDecks_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // Two decks with the same name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck editedDeckA \u003d new DeckBuilder(DECK_A).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        List\u003cDeck\u003e newDecks \u003d Arrays.asList(DECK_A, editedDeckA);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeckStub newData \u003d new TopDeckTest.TopDeckStub(newDecks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(DuplicateDeckException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.resetData(newData);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void hasDeck_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.hasDeck(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void hasDeck_deckNotInTopDeck_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(topDeck.hasDeck(DECK_A));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void hasDeck_deckInTopDeck_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.addDeck(DECK_A);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Assert.assertTrue(topDeck.hasDeck(DECK_A));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void hasDeck_deckWithSameIdentityInTopDeck_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.addDeck(DECK_A);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck editedDeckA \u003d new DeckBuilder(DECK_A).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Assert.assertTrue(topDeck.hasDeck(editedDeckA));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void getDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.getDeckList().remove(0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.addListener(listener);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.addDeck(DECK_A);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.addListener(listener);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.removeListener(listener);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.addDeck(DECK_A);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void addCard_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.addCard(null, null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void addCard_deckNotInList_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck typicalTopDeck \u003d getTypicalTopDeck();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(DeckNotFoundException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        typicalTopDeck.addCard(UNIQUE, DECK_F);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void addCard_cardInList_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck typicalTopDeck \u003d getTypicalTopDeck();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        typicalTopDeck.addCard(ADDITION, DECK_WITH_CARDS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void addCard_validCard_returnsEditedDeck() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck typicalTopDeck \u003d getTypicalTopDeck();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck newDeck \u003d typicalTopDeck.addCard(ADDITION, DECK_A);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        Deck expectedDeck \u003d new DeckBuilder(DECK_A).withCards(Arrays.asList(ADDITION)).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(newDeck, expectedDeck);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void deleteCard_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.deleteCard(null, null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void deleteCard_deckNotInList_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck typicalTopDeck \u003d getTypicalTopDeck();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(DeckNotFoundException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        typicalTopDeck.deleteCard(UNIQUE, DECK_F);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void deleteCard_cardNotInList_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck typicalTopDeck \u003d getTypicalTopDeck();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(CardNotFoundException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        typicalTopDeck.deleteCard(ADDITION, DECK_A);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void deleteCard_cardInList_returnsEditedDeck() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck typicalTopDeck \u003d getTypicalTopDeck();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck newDeck \u003d typicalTopDeck.deleteCard(ADDITION, DECK_WITH_CARDS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck expectedDeck \u003d new DeckBuilder(DECK_WITH_CARDS).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedDeck.removeCard(ADDITION);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(newDeck, expectedDeck);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck.setCard(null, null, null);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard_deckNotInList_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck typicalTopDeck \u003d getTypicalTopDeck();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(DeckNotFoundException.class);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        typicalTopDeck.setCard(UNIQUE, ADDITION, DECK_F);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard_cardNotInList_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck typicalTopDeck \u003d getTypicalTopDeck();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(CardNotFoundException.class);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        typicalTopDeck.setCard(ADDITION, UNIQUE, DECK_A);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard_cardInList_returnsEditedDeck() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck typicalTopDeck \u003d getTypicalTopDeck();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        Card newCard \u003d new CardBuilder().withQuestion(\"Edited Question\").withAnswer(\"Edited Answer\").build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck newDeck \u003d typicalTopDeck.setCard(ADDITION, newCard, DECK_WITH_CARDS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck expectedDeck \u003d new DeckBuilder(DECK_WITH_CARDS).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedDeck.setCard(ADDITION, newCard);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(newDeck, expectedDeck);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * A stub ReadOnlyTopDeck whose cards list can violate interface constraints."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static class TopDeckStub implements ReadOnlyTopDeck {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        private final ObservableList\u003cDeck\u003e decks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeckStub(Collection\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            this.decks.setAll(decks);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            return decks;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 230,
      "ckjohn000": 7,
      "sciffany": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setTopDeckFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedTopDeckTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_C;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_D;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_E;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.TopDeckBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class VersionedTopDeckTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //Empty decks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final ReadOnlyTopDeck topDeckWithDeckA \u003d new TopDeckBuilder().withDeck(DECK_A).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final ReadOnlyTopDeck topDeckWithDeckB \u003d new TopDeckBuilder().withDeck(DECK_B).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final ReadOnlyTopDeck topDeckWithDeckC \u003d new TopDeckBuilder().withDeck(DECK_C).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //Decks with cards"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final ReadOnlyTopDeck topDeckWithDeckD \u003d new TopDeckBuilder().withDeck(DECK_D).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final ReadOnlyTopDeck topDeckWithDeckE \u003d new TopDeckBuilder().withDeck(DECK_E).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final ReadOnlyTopDeck emptyTopDeck \u003d new TopDeckBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //    private final ReadOnlyTopDeck topDeckWithAdd \u003d new TopDeckBuilder().withCard(ADDITION).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //    private final ReadOnlyTopDeck topDeckWithSub \u003d new TopDeckBuilder().withCard(SUBTRACTION).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //    private final ReadOnlyTopDeck topDeckWithMul \u003d new TopDeckBuilder().withCard(MULTIPLICATION)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //    .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    //    private final ReadOnlyTopDeck emptyTopDeck \u003d new TopDeckBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void commit_singleTopDeck_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        versionedTopDeck.commit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTopDeckListStatus(versionedTopDeck, Collections.singletonList(emptyTopDeck), emptyTopDeck,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                Collections.emptyList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void commit_multipleTopDeckPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        versionedTopDeck.commit();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTopDeckListStatus(versionedTopDeck,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                                Arrays.asList(emptyTopDeck, topDeckWithDeckA, topDeckWithDeckB),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                topDeckWithDeckB, Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void commit_multipleTopDeckPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTopDeck, 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        versionedTopDeck.commit();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTopDeckListStatus(versionedTopDeck, Collections.singletonList(emptyTopDeck), emptyTopDeck,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                Collections.emptyList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void canUndo_multipleTopDeckPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(versionedTopDeck.canUndo());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void canUndo_multipleTopDeckPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTopDeck, 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(versionedTopDeck.canUndo());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void canUndo_singleTopDeck_returnsFalse() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(versionedTopDeck.canUndo());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void canUndo_multipleTopDeckPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTopDeck, 2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(versionedTopDeck.canUndo());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void canRedo_multipleTopDeckPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTopDeck, 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(versionedTopDeck.canRedo());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void canRedo_multipleTopDeckPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTopDeck, 2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(versionedTopDeck.canRedo());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void canRedo_singleTopDeck_returnsFalse() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(versionedTopDeck.canRedo());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void canRedo_multipleTopDeckPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(versionedTopDeck.canRedo());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void undo_multipleTopDeckPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        versionedTopDeck.undo();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTopDeckListStatus(versionedTopDeck, Collections.singletonList(emptyTopDeck), topDeckWithDeckA,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                                Collections.singletonList(topDeckWithDeckB));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void undo_multipleTopDeckPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTopDeck, 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        versionedTopDeck.undo();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTopDeckListStatus(versionedTopDeck, Collections.emptyList(), emptyTopDeck,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                                Arrays.asList(topDeckWithDeckA, topDeckWithDeckB));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void undo_singleTopDeck_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertThrows(VersionedTopDeck.NoUndoableStateException.class, versionedTopDeck::undo);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void undo_multipleTopDeckPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTopDeck, 2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertThrows(VersionedTopDeck.NoUndoableStateException.class, versionedTopDeck::undo);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void redo_multipleTopDeckPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTopDeck, 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        versionedTopDeck.redo();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTopDeckListStatus(versionedTopDeck, Arrays.asList(emptyTopDeck, topDeckWithDeckA),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                topDeckWithDeckB, Collections.emptyList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void redo_multipleTopDeckPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTopDeck, 2);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        versionedTopDeck.redo();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertTopDeckListStatus(versionedTopDeck, Collections.singletonList(emptyTopDeck), topDeckWithDeckA,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                                Collections.singletonList(topDeckWithDeckB));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void redo_singleTopDeck_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertThrows(VersionedTopDeck.NoRedoableStateException.class, versionedTopDeck::redo);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void redo_multipleTopDeckPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(emptyTopDeck, topDeckWithDeckA,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                               topDeckWithDeckB);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertThrows(VersionedTopDeck.NoRedoableStateException.class, versionedTopDeck::redo);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d prepareTopDeckList(topDeckWithDeckA, topDeckWithDeckB);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        VersionedTopDeck copy \u003d prepareTopDeckList(topDeckWithDeckA, topDeckWithDeckB);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(versionedTopDeck.equals(copy));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(versionedTopDeck.equals(versionedTopDeck));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(versionedTopDeck.equals(null));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(versionedTopDeck.equals(1));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        VersionedTopDeck differentAddressBookList \u003d prepareTopDeckList(topDeckWithDeckB, topDeckWithDeckC);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(versionedTopDeck.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        VersionedTopDeck differentCurrentStatePointer \u003d prepareTopDeckList(topDeckWithDeckA,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                           topDeckWithDeckB);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTopDeck, 1);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(versionedTopDeck.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Asserts that {@code versionedTopDeck} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * states before {@code versionedTopDeck#currentStatePointer} is equal to {@code"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * and states after {@code versionedTopDeck#currentStatePointer} is equal to {@code"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private void assertTopDeckListStatus(VersionedTopDeck versionedTopDeck,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                         List\u003cReadOnlyTopDeck\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                         ReadOnlyTopDeck expectedCurrentState,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                         List\u003cReadOnlyTopDeck\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(new TopDeck(versionedTopDeck), expectedCurrentState);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        while (versionedTopDeck.canUndo()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            versionedTopDeck.undo();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (ReadOnlyTopDeck expectedTopDeck : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            assertEquals(expectedTopDeck, new TopDeck(versionedTopDeck));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            versionedTopDeck.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (ReadOnlyTopDeck expectedTopDeck : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            versionedTopDeck.redo();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            assertEquals(expectedTopDeck, new TopDeck(versionedTopDeck));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(versionedTopDeck.canRedo());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedTopDeck.undo());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Creates and returns a {@code VersionedTopDeck} with the {@code topDeckStates} added into it, and the"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code VersionedTopDeck#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private VersionedTopDeck prepareTopDeckList(ReadOnlyTopDeck... topDeckStates) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(topDeckStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        VersionedTopDeck versionedTopDeck \u003d new VersionedTopDeck(topDeckStates[0]);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (int i \u003d 1; i \u003c topDeckStates.length; i++) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            versionedTopDeck.resetData(topDeckStates[i]);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            versionedTopDeck.commit();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return versionedTopDeck;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Shifts the {@code versionedTopDeck#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedTopDeck versionedTopDeck, int count) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            versionedTopDeck.undo();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 231,
      "ckjohn000": 28,
      "sciffany": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/CardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ADDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.SUBTRACTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class CardTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        card.getTags().remove(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void isSameCard() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card additionCopy \u003d new CardBuilder(ADDITION).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(additionCopy.isSameCard(additionCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(additionCopy.isSameCard(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different question and answer -\u003e return false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(additionCopy.isSameCard(SUBTRACTION));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // same question, different answer -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card editedAddition \u003d new CardBuilder(ADDITION).withAnswer(\"DIFFERENT\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(ADDITION.isSameCard(editedAddition));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card additionCopy \u003d new CardBuilder(ADDITION).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(additionCopy.equals(additionCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(additionCopy.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different type -\u003e return false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(additionCopy.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different card -\u003e return false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(additionCopy.equals(SUBTRACTION));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different answer -\u003e return false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card editedAddition \u003d new CardBuilder(ADDITION).withAnswer(\"DIFFERENT\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(ADDITION.equals(editedAddition));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/DeckNameContainsKeywordPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeckNameContainsKeywordPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        DeckNameContainsKeywordsPredicate firstPredicate \u003d new DeckNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        DeckNameContainsKeywordsPredicate secondPredicate \u003d new DeckNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        DeckNameContainsKeywordsPredicate firstPredicateCopy \u003d new DeckNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        DeckNameContainsKeywordsPredicate predicate \u003d new DeckNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        predicate \u003d new DeckNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        predicate \u003d new DeckNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        predicate \u003d new DeckNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        DeckNameContainsKeywordsPredicate predicate \u003d new DeckNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(predicate.test(new DeckBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        predicate \u003d new DeckNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(predicate.test(new DeckBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 72,
      "sciffany": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/DeckTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARD_LIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DECK_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeckTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void isSameDeck() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(DECK_A.isSameDeck(DECK_A));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(DECK_A.isSameDeck(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck editedDeckA \u003d new DeckBuilder(DECK_A).withName(VALID_NAME_DECK_A).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(DECK_A.isSameDeck(editedDeckA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        editedDeckA \u003d new DeckBuilder(DECK_A).withCards(VALID_CARD_LIST).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(DECK_A.isSameDeck(editedDeckA));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck aliceCopy \u003d new DeckBuilder(DECK_A).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(DECK_A.equals(aliceCopy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(DECK_A.equals(DECK_A));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(DECK_A.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(DECK_A.equals(5));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(DECK_A.equals(DECK_B));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck editedDeckA \u003d new DeckBuilder(DECK_A).withName(VALID_NAME_DECK_A).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(DECK_A.equals(editedDeckA));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        // same name, different cardList -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        editedDeckA \u003d new DeckBuilder(DECK_A).withCards(VALID_CARD_LIST).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(DECK_A.equals(editedDeckA));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(Name.isValidName(\"what*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(Name.isValidName(\"are you with me\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(Name.isValidName(\"ankin the second\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(Name.isValidName(\"HEYYYYY\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(Name.isValidName(\"Why are you reading this test\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 7,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/QuestionContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class QuestionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d new QuestionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d new QuestionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicateCopy \u003d new QuestionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d new QuestionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withQuestion(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d new QuestionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withQuestion(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // Keywords match answer but does not match question"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"12345\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withQuestion(\"Alice\").withAnswer(\"12345\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 17,
      "sciffany": 10,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/UniqueCardListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_HELLO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_MOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ADDITION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.SUBTRACTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class UniqueCardListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final UniqueCardList uniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void contains_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.contains(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void contains_cardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(uniqueCardList.contains(ADDITION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void contains_cardInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.add(ADDITION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(uniqueCardList.contains(ADDITION));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void contains_cardWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.add(ADDITION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card editedAddition \u003d new CardBuilder(ADDITION).withAnswer(VALID_ANSWER_MOD).withTags(VALID_TAG_MOD)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                                       .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(uniqueCardList.contains(editedAddition));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void add_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.add(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void add_duplicateCard_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.add(ADDITION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.add(ADDITION);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard_nullTargetCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.setCard(null, ADDITION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard_nullEditedCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.setCard(ADDITION, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard_targetCardNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(CardNotFoundException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.setCard(ADDITION, ADDITION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard_editedCardIsSameCard_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.add(ADDITION);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.setCard(ADDITION, ADDITION);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        UniqueCardList expectedUniquePersonList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedUniquePersonList.add(ADDITION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCardList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard_editedCardHasSameIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.add(ADDITION);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card editedAddition \u003d new CardBuilder(ADDITION).withAnswer(VALID_ANSWER_HELLO).withTags(VALID_TAG_MOD)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                                       .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.setCard(ADDITION, editedAddition);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedUniqueCardList.add(editedAddition);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard_editedCardHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.add(ADDITION);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.setCard(ADDITION, SUBTRACTION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        UniqueCardList expectedUniquePersonList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedUniquePersonList.add(SUBTRACTION);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCardList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCard_editedCardHasNonUniqueIdentity_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.add(ADDITION);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.add(SUBTRACTION);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.setCard(ADDITION, SUBTRACTION);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void remove_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.remove(null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void remove_cardDoesNotExist_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(CardNotFoundException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.remove(ADDITION);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void remove_existingCard_removesCard() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.add(ADDITION);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.remove(ADDITION);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCards_nullUniqueCardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.setCards((UniqueCardList) null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCards_uniqueCardList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.add(ADDITION);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedUniqueCardList.add(SUBTRACTION);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.setCards(expectedUniqueCardList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.setCards((List\u003cCard\u003e) null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.add(ADDITION);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        List\u003cCard\u003e cardList \u003d Collections.singletonList(SUBTRACTION);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.setCards(cardList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        UniqueCardList expectedUniquePersonList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedUniquePersonList.add(SUBTRACTION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCardList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void setCards_listWithDuplicateCards_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        List\u003cCard\u003e listWithDuplicateCards \u003d Arrays.asList(ADDITION, ADDITION);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.setCards(listWithDuplicateCards);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueCardList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 187
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/UniqueDeckListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARD_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class UniqueDeckListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final UniqueDeckList uniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void contains_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void contains_deckNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(uniqueDeckList.contains(DECK_A));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void contains_deckInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(uniqueDeckList.contains(DECK_A));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void contains_deckWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck editedDeckA \u003d new DeckBuilder(DECK_A).withCards(VALID_CARD_LIST).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertTrue(uniqueDeckList.contains(editedDeckA));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void add_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.add(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void add_duplicateDeck_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(DuplicateDeckException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void getDeck_nullTargetDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueDeckList.getDeck(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void getDeck_targetDeckNotInList_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(DeckNotFoundException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueDeckList.getDeck(DECK_A);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void getDeck_targetDeckInList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uniqueDeckList.add(DECK_B);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck retrievedDeck \u003d uniqueDeckList.getDeck(DECK_A);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(retrievedDeck.isSameDeck(DECK_A));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDeck_nullTargetDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.setDeck(null, DECK_A);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDeck_nullEditedDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.setDeck(DECK_A, null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDeck_targetDeckNotInList_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(DeckNotFoundException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.setDeck(DECK_B, DECK_B);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDeck_editedDeckIsSameDeck_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.setDeck(DECK_A, DECK_A);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedUniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDeck_editedDeckHasSameIdentity_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Deck editedDeckA \u003d new DeckBuilder(DECK_A).withCards(VALID_CARD_LIST).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.setDeck(DECK_A, editedDeckA);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedUniqueDeckList.add(editedDeckA);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDeck_editedDeckHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.setDeck(DECK_A, DECK_B);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedUniqueDeckList.add(DECK_B);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDeck_editedDeckHasNonUniqueIdentity_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.add(DECK_B);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(DuplicateDeckException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.setDeck(DECK_A, DECK_B);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void remove_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.remove(null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void remove_deckDoesNotExist_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(DeckNotFoundException.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.remove(DECK_A);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void remove_existingDeck_removesDeck() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.remove(DECK_A);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDecks_nullUniqueDeckList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.setDecks((UniqueDeckList) null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDecks_uniqueDeckList_replacesOwnListWithProvidedUniqueDeckList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedUniqueDeckList.add(DECK_B);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.setDecks(expectedUniqueDeckList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDecks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.setDecks((List\u003cDeck\u003e) null);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDecks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.add(DECK_A);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        List\u003cDeck\u003e deckList \u003d Collections.singletonList(DECK_B);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.setDecks(deckList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        expectedUniqueDeckList.add(DECK_B);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void setDecks_listWithDuplicateDecks_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        List\u003cDeck\u003e listWithDuplicateDecks \u003d Arrays.asList(DECK_A, DECK_A);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(DuplicateDeckException.class);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.setDecks(listWithDuplicateDecks);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueDeckList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 181,
      "ChangDarren": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.storage.JsonAdaptedCard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.HELLO_WORLD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class JsonAdaptedCardTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final String VALID_QUESTION \u003d HELLO_WORLD.getQuestion();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final String VALID_ANSWER \u003d HELLO_WORLD.getAnswer();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d HELLO_WORLD.getTags().stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                                                      .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                                                      .collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void toModelType_validCardDetails_returnsCard() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        JsonAdaptedCard card \u003d new JsonAdaptedCard(HELLO_WORLD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(HELLO_WORLD, card.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void toModelType_nullQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        JsonAdaptedCard card \u003d new JsonAdaptedCard(null, VALID_ANSWER, VALID_TAGS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"question\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void toModelType_nullAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        JsonAdaptedCard card \u003d new JsonAdaptedCard(VALID_QUESTION, null, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"answer\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        JsonAdaptedCard card \u003d new JsonAdaptedCard(VALID_QUESTION, VALID_ANSWER, invalidTags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, card::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 54,
      "sciffany": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedDeckTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDeck.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class JsonAdaptedDeckTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static final String INVALID_NAME \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static final String VALID_NAME \u003d DECK_A.getName().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final List\u003cJsonAdaptedCard\u003e VALID_CARDS \u003d DECK_A.getCards().internalList.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                                           .map(JsonAdaptedCard::new)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                                           .collect(Collectors"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                                                                            .toList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void toModelType_validDeckDetails_returnsDeck() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        JsonAdaptedDeck deck \u003d new JsonAdaptedDeck(DECK_A);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(DECK_A, deck.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        JsonAdaptedDeck deck \u003d new JsonAdaptedDeck(INVALID_NAME, VALID_CARDS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, deck::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        JsonAdaptedDeck deck \u003d new JsonAdaptedDeck(null, VALID_CARDS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, deck::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 39,
      "sciffany": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTopDeckTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.TypicalDecks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class JsonSerializableTopDeckTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableTopDeckTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final Path TYPICAL_DECKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalDeckTopDeck.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static final Path INVALID_DECK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDeckTopDeck.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static final Path DUPLICATE_DECK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateDeckTopDeck.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final Path DUPLICATE_CARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateCardTopDeck.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void toModelType_typicalDecksFile_success() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        JsonSerializableTopDeck dataFromFile \u003d JsonUtil"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .readJsonFile(TYPICAL_DECKS_FILE, JsonSerializableTopDeck.class).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck topDeckFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        TopDeck typicalDeckTopDeck \u003d TypicalDecks.getTypicalTopDeck();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(topDeckFromFile, typicalDeckTopDeck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void toModelType_invalidDeckFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        JsonSerializableTopDeck dataFromFile \u003d JsonUtil"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .readJsonFile(INVALID_DECK_FILE, JsonSerializableTopDeck.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public void toModelType_duplicateDecksFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        JsonSerializableTopDeck dataFromFile \u003d JsonUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .readJsonFile(DUPLICATE_DECK_FILE, JsonSerializableTopDeck.class).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        thrown.expectMessage(JsonSerializableTopDeck.MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void toModelType_duplicateCardsFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        JsonSerializableTopDeck dataFromFile \u003d JsonUtil"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .readJsonFile(DUPLICATE_CARD_FILE, JsonSerializableTopDeck.class).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expectMessage(JsonSerializableTopDeck.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 12,
      "ckjohn000": 11,
      "sciffany": 10,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTopDeckStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ADDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.MULTIPLICATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.UNIQUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTopDeck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class JsonTopDeckStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTopDeckStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void readTopDeck_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        readTopDeck(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTopDeck\u003e readTopDeck(String filePath) throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new JsonTopDeckStorage(Paths.get(filePath)).readTopDeck(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder) : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(readTopDeck(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        readTopDeck(\"notJsonFormatTopDeck.json\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void readTopDeck_invalidCardTopDeck_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        readTopDeck(\"invalidDeckTopDeck.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void readTopDeck_invalidAndValidCardTopDeck_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        readTopDeck(\"invalidAndValidDeckTopDeck.json\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void readAndSaveTopDeck_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempTopDeck.json\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck original \u003d getTypicalTopDeck();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck originalDeck \u003d original.getDeckList().get(0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        JsonTopDeckStorage jsontopDeckStorage \u003d new JsonTopDeckStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        jsontopDeckStorage.saveTopDeck(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        ReadOnlyTopDeck readBack \u003d jsontopDeckStorage.readTopDeck(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(original, new TopDeck(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        original.addCard(MULTIPLICATION, originalDeck);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        original.deleteCard(ADDITION, originalDeck);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        jsontopDeckStorage.saveTopDeck(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        readBack \u003d jsontopDeckStorage.readTopDeck(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(original, new TopDeck(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        original.addCard(UNIQUE, originalDeck);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        jsontopDeckStorage.saveTopDeck(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        readBack \u003d jsontopDeckStorage.readTopDeck().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(original, new TopDeck(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void saveTopDeck_nullTopDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        saveTopDeck(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Saves {@code topDeck} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private void saveTopDeck(ReadOnlyTopDeck topDeck, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            new JsonTopDeckStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                    .saveTopDeck(topDeck, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void saveTopDeck_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        saveTopDeck(new TopDeck(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 121,
      "ckjohn000": 2,
      "sciffany": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null ? TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .resolve(userPrefsFileInTestDataFolder) : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        userPrefs.setTopDeckFilePath(Paths.get(\"data/topdeck.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 1,
      "sciffany": 4,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalTopDeck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        JsonTopDeckStorage topDeckStorage \u003d new JsonTopDeckStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        storageManager \u003d new StorageManager(topDeckStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "         * class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void topDeckReadSave() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "         * {@link JsonTopDeckStorage} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTopDeckStorageTest} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck original \u003d getTypicalTopDeck();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        storageManager.saveTopDeck(original);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        ReadOnlyTopDeck retrieved \u003d storageManager.readTopDeck().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(original, new TopDeck(retrieved));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void getTopDeckFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertNotNull(storageManager.getTopDeckFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 14,
      "sciffany": 2,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class \u003c ? extends Throwable \u003e, VoidCallable }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                errorMessage \u003d String"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                        .format(\"Expected exception thrown: %s, actual: %s\", expectedException.getName(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                actualException.getClass().getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                errorMessage \u003d String.format(\"Expected message thrown: %s, actual: %s\", expectedMessage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                             actualException.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        throw new AssertionError(String.format(\"Expected %s to be thrown, but nothing was thrown.\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                               expectedException.getName()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 7,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * A utility class to help with building a Card object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class CardBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"What is the name of this app?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"TopDeck\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public CardBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.question \u003d DEFAULT_QUESTION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.answer \u003d DEFAULT_ANSWER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.tags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Initialize the CardBuilder using the data of {@code cardToCopy}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param cardToCopy the card to get the information from"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public CardBuilder(Card cardToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.question \u003d cardToCopy.getQuestion();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.answer \u003d cardToCopy.getAnswer();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.tags \u003d cardToCopy.getTags();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Sets the question of the {@code Card} we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public CardBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Sets the answer of the {@code Card} we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public CardBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public CardBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public Card build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new Card(question, answer, tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * A utility class for Card."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class CardUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns an add command string for adding the {@code card}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param card"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static String getAddCommand(Card card) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return AddCardCommand.COMMAND_WORD + \" \" + getCardDetails(card);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the part of command string for the given {@code card}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static String getCardDetails(Card card) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        sb.append(PREFIX_QUESTION + card.getQuestion() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        sb.append(PREFIX_ANSWER + card.getAnswer() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        card.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the part of command string for the given {@code EditCardDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static String getEditCardDescriptorDetails(EditCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        descriptor.getQuestion()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                  .ifPresent(question -\u003e sb.append(PREFIX_QUESTION).append(question).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        descriptor.getAnswer().ifPresent(answer -\u003e sb.append(PREFIX_ANSWER).append(answer).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 51,
      "xsot": 2,
      "sciffany": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeckBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.UniqueCardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * A utility class to help with building Deck objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeckBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"My Deck\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private UniqueCardList cards;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public DeckBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Initializes the DeckBuilder with the data of {@code deckToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public DeckBuilder(Deck deckToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        name \u003d deckToCopy.getName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        cards \u003d deckToCopy.getCards();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Sets the {@code Name} of the {@code Deck} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public DeckBuilder withName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Sets the {@code UniqueCardList} of the {@code Deck} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public DeckBuilder withCards(List\u003cCard\u003e cardlist) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        UniqueCardList uniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueCardList.setCards(cardlist);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.cards \u003d uniqueCardList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public Deck build() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return new Deck(name, cards.internalList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeckUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.AddDeckCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * A utility class for Deck."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeckUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns a new deck command string for adding the {@code deck}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public static String getAddDeckCommand(Deck deck) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return AddDeckCommand.COMMAND_WORD + \" \" + getDeckDetails(deck);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns the part of command string for the given {@code deck}\u0027s details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static String getDeckDetails(Deck deck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        sb.append(PREFIX_NAME + deck.getName().fullName + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 26,
      "xsot": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditCardDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class EditCardDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private EditCardCommand.EditCardDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public EditCardDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        descriptor \u003d new EditCardCommand.EditCardDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public EditCardDescriptorBuilder(EditCardCommand.EditCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.descriptor \u003d new EditCardCommand.EditCardDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code card}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param card"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public EditCardDescriptorBuilder(Card card) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        descriptor \u003d new EditCardCommand.EditCardDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        descriptor.setQuestion(card.getQuestion());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        descriptor.setAnswer(card.getAnswer());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        descriptor.setTags(card.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Sets the {@code Question} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public EditCardDescriptorBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        descriptor.setQuestion(question);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditCardDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public EditCardDescriptorBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        descriptor.setAnswer(answer);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCardDescriptor}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public EditCardDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public EditCardCommand.EditCardDescriptor build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 67,
      "sciffany": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditDeckDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.commands.EditDeckCommand.EditDeckDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.UniqueCardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * A utility class to help with building EditDeckDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class EditDeckDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private EditDeckDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public EditDeckDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        descriptor \u003d new EditDeckDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public EditDeckDescriptorBuilder(EditDeckDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        this.descriptor \u003d new EditDeckDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns an {@code EditDeckDescriptor} with fields containing {@code deck}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public EditDeckDescriptorBuilder(Deck deck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        descriptor \u003d new EditDeckDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        descriptor.setName(deck.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Sets the {@code Name} of the {@code EditDeckDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public EditDeckDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Sets the {@code Cards} of the {@code EditDeckDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public EditDeckDescriptorBuilder withCards(List\u003cCard\u003e cardlist) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        UniqueCardList uniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        uniqueCardList.setCards(cardlist);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public EditDeckDescriptor build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            .format(\"{%n\" + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\" + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                            + \"\\\"0001-01-01T01:01:00\\\" ],%n\" + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                            + \"    \\\"1\\\" : \\\"One\\\",%n\" + \"    \\\"2\\\" : \\\"Two\\\",%n\" + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                            + \"  }%n\" + \"}\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 5,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the middle index of the card in the {@code model}\u0027s card list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return Index.fromOneBased(model.getFilteredList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the last index of the card in the {@code model}\u0027s card list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return Index.fromOneBased(model.getFilteredList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns the card in the {@code model}\u0027s card list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static Card getCard(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return (Card) model.getFilteredList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns the deck in the {@code model}\u0027s deck list at {@code index}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static Deck getDeck(Model model, Index index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return (Deck) model.getFilteredList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 5,
      "ckjohn000": 9,
      "xsot": 2,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TopDeckBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * A utility class to help with building TopDeck objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * {@code TopDeck td \u003d new TopDeckBuilder().withCard(\"Question1\", \"Question2\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class TopDeckBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private TopDeck topDeck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public TopDeckBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        topDeck \u003d new TopDeck();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public TopDeckBuilder(TopDeck topDeck) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        this.topDeck \u003d topDeck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Adds a new {@code Deck} to the {@code TopDeck} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public TopDeckBuilder withDeck(Deck deck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        topDeck.addDeck(deck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public TopDeck build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return topDeck;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 30,
      "ckjohn000": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCards.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * A utility class containing a list of {@code Card} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class TypicalCards {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final Card ADDITION \u003d new CardBuilder().withQuestion(\"Solve 1 + 1.\").withAnswer(\"2\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                         .withTags(\"Math\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final Card SUBTRACTION \u003d new CardBuilder().withQuestion(\"What is 10 - 10?\").withAnswer(\"0\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                            .withTags(\"Math\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final Card MULTIPLICATION \u003d new CardBuilder().withQuestion(\"What is 8 * 8?\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                                               .withAnswer(\"64\").withTags(\"Math\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final Card DIVISION \u003d new CardBuilder().withQuestion(\"Evaluate 1024 / 2.\").withAnswer(\"512\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                         .withTags(\"Math\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final Card HELLO_WORLD \u003d new CardBuilder().withQuestion(\"Hello?\").withAnswer(\"World\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                            .withTags(\"Simple\", \"CS\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final Card NO_TAG \u003d new CardBuilder().withQuestion(\"Are there any tag?\").withAnswer(\"No\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                       .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final Card UNIQUE \u003d new CardBuilder().withQuestion(\"Is this card unique?\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                                       .withAnswer(\"Yes it is.\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final Card LAYER \u003d new CardBuilder().withQuestion(\"Which layer is HTTP at?\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                                      .withAnswer(\"Application\").withTags(\"CS2105\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final Card TRANSPORT \u003d new CardBuilder().withQuestion(\"What transport does HTTP use?\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                                          .withAnswer(\"TCP\").withTags(\"CS2105\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final Card OK_STATUS \u003d new CardBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            .withQuestion(\"What is the status code for OK in HTTP?\").withAnswer(\"200\").withTags(\"CS2105\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final String KEYWORD_MATCHING_HTTP \u003d \"HTTP\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private TypicalCards() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns a {@code Deck} with all the typical cards."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static Deck getTypicalDeck() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck ad \u003d new Deck(new Name(\"Typical Deck\"), getTypicalCards());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return ad;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns an {@code TopDeck} with all the typical cards."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static TopDeck getTypicalTopDeck() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        TopDeck td \u003d new TopDeck();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        td.addDeck(getTypicalDeck());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return td;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static List\u003cCard\u003e getTypicalCards() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        //The cards must start with different words"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ADDITION, DIVISION, NO_TAG, LAYER, OK_STATUS, HELLO_WORLD));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 51,
      "ckjohn000": 9,
      "sciffany": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDecks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalCards;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " * A utility class containing a list of {@code Deck} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class TypicalDecks {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Deck DECK_A \u003d new DeckBuilder().withName(\"Algebra\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Deck DECK_B \u003d new DeckBuilder().withName(\"Bacon Salad Recipe\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Deck DECK_C \u003d new DeckBuilder().withName(\"Calculus\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final Deck DECK_D \u003d new DeckBuilder().withName(\"Darwinian Studies\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                       .withCards(getTypicalCards()).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final Deck DECK_E \u003d new DeckBuilder().withName(\"Epistemology\").withCards(getTypicalCards())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                       .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Deck DECK_WITH_CARDS \u003d TypicalCards.getTypicalDeck();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Deck DECK_F \u003d new DeckBuilder().withName(\"Finance\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Deck DECK_G \u003d new DeckBuilder().withName(\"Geometry\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Deck DECK_H \u003d new DeckBuilder().withName(\"John GraphQL\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Deck DECK_I \u003d new DeckBuilder().withName(\"John History\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static final Deck THERE \u003d new DeckBuilder().withName(\"Baby there\").withCards(getTypicalCards())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                      .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Deck NOTHING \u003d new DeckBuilder().withName(\"is nothing\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Deck HOLDING \u003d new DeckBuilder().withName(\"holding me back\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final String KEYWORD_MATCHING_JOHN \u003d \"John\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private TypicalDecks() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Returns an {@code TopDeck} with all the typical decks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static TopDeck getTypicalTopDeck() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        TopDeck td \u003d new TopDeck();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        for (Deck deck : getTypicalDecks()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            td.addDeck(deck);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return td;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static List\u003cDeck\u003e getTypicalDecks() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        return new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                Arrays.asList(DECK_WITH_CARDS, DECK_A, DECK_B, DECK_C, DECK_D, DECK_E, THERE, NOTHING,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                              HOLDING));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 50,
      "sciffany": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Index INDEX_FIRST_DECK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Index INDEX_SECOND_DECK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public static final Index INDEX_THIRD_DECK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final Index INDEX_FIRST_CARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final Index INDEX_SECOND_CARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static final Index INDEX_THIRD_CARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 4,
      "ChangDarren": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CardDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysCardObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import guitests.guihandles.CardDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class CardDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        Card cardWithNoTags \u003d new CardBuilder().withTags().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CardDisplay cardDisplay \u003d new CardDisplay(cardWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uiPartRule.setUiPart(cardDisplay);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCardDisplay(cardDisplay, cardWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card personWithTags \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        cardDisplay \u003d new CardDisplay(personWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        uiPartRule.setUiPart(cardDisplay);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCardDisplay(cardDisplay, personWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card person \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CardDisplay cardDisplay \u003d new CardDisplay(person, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // same card, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CardDisplay copy \u003d new CardDisplay(person, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(cardDisplay.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTrue(cardDisplay.equals(cardDisplay));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(cardDisplay.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(cardDisplay.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // different card, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Card differentQuestion \u003d new CardBuilder().withQuestion(\"differentQuestion\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(cardDisplay.equals(new CardDisplay(differentQuestion, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // same card, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertFalse(cardDisplay.equals(new CardDisplay(person, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Asserts that {@code cardDisplay} displays the details of {@code expectedCard} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private void assertCardDisplay(CardDisplay cardDisplay, Card expectedCard, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        CardDisplayHandle cardDisplayHandle \u003d new CardDisplayHandle(cardDisplay.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertEquals(expectedId + \". \", cardDisplayHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        // verify card details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCardDisplaysCardObject(expectedCard, cardDisplayHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 30,
      "sciffany": 2,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                getChildNode(commandBox.getRoot(), CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * expectedCommand}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 5,
      "-": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * A GUI unit test class for TopDeck."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.getTypicalDecks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysDeckObject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertDeckDisplayEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import guitests.guihandles.DeckDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xsot"
        },
        "content": "import guitests.guihandles.ListPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.logic.ListItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xsot"
        },
        "content": "public class ListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final ObservableList\u003cDeck\u003e TYPICAL_DECKS \u003d FXCollections.observableList(getTypicalDecks());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static final long DECK_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private final SimpleObjectProperty\u003cListItem\u003e selectedItem \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private ListPanelHandle listPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        initUi(TYPICAL_DECKS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_DECKS.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            listPanelHandle.navigateToDeck(TYPICAL_DECKS.get(i));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            Deck expectedDeck \u003d TYPICAL_DECKS.get(i);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            DeckDisplayHandle actualDeck \u003d listPanelHandle.getDeckDisplayHandle(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            assertCardDisplaysDeckObject(expectedDeck, actualDeck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            assertEquals((i + 1) + \". \", actualDeck.getId());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void selection_modelSelectedDeckChanged_selectionChanges() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        initUi(TYPICAL_DECKS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck secondDeck \u003d TYPICAL_DECKS.get(INDEX_SECOND_DECK.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        guiRobot.interact(() -\u003e selectedItem.set(secondDeck));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        DeckDisplayHandle expectedDeck \u003d listPanelHandle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .getDeckDisplayHandle(INDEX_SECOND_DECK.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        DeckDisplayHandle selectedDeck \u003d listPanelHandle.getHandleToSelectedDeck();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertDeckDisplayEquals(expectedDeck, selectedDeck);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Verifies that creating and deleting large number of cards in {@code ListPanel} requires lesser than"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code DECK_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        ObservableList\u003cDeck\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(DECK_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }, \"Creation and deletion of card cards exceeded time limit\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns a list of decks containing {@code deckCount} decks that is used to populate the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * {@code ListPanel}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private ObservableList\u003cDeck\u003e createBackingList(int deckCount) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        ObservableList\u003cDeck\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (int i \u003d 0; i \u003c deckCount; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            String name \u003d i + \" deck\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            Deck deck \u003d new Deck(new Name(name));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            backingList.add(deck);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Initializes {@code listPanelHandle} with a {@code ListPanel} backed by {@code list}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code ListPanel}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private void initUi(ObservableList\u003c? extends ListItem\u003e list) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        ListPanel listPanel \u003d new ListPanel((ObservableList\u003cListItem\u003e) list, selectedItem, selectedItem::set);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xsot"
        },
        "content": "        uiPartRule.setUiPart(listPanel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        listPanelHandle \u003d new ListPanelHandle("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                getChildNode(listPanel.getRoot(), ListPanelHandle.DECK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 64,
      "ckjohn000": 10,
      "xsot": 7,
      "sciffany": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.storage.JsonTopDeckStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        JsonTopDeckStorage jsonAddressBookStorage \u003d new JsonTopDeckStorage("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonAddressBookStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sciffany"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sciffany"
        },
        "content": "         * \u0027X\u0027 button on"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 1,
      "sciffany": 6,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                getChildNode(resultDisplay.getRoot(), ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.testutil.TypicalDecks.DECK_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_DECKS_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    private static final int INITIAL_TOTAL_DECKS \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private final TopDeck topDeck \u003d new TopDeck();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, topDeck);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                               String.format(TOTAL_DECKS_STATUS, INITIAL_TOTAL_DECKS));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        guiRobot.interact(() -\u003e topDeck.addDeck(DECK_A));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                               String.format(SYNC_STATUS_UPDATED,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                             new Date(injectedClock.millis()).toString()),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "                               String.format(TOTAL_DECKS_STATUS, topDeck.getDeckList().size()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}, and the total persons matches"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * that of {@code expectedTotalPersonsStatus}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xsot"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                                        String expectedTotalDecksStatus) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedTotalDecksStatus, statusBarFooterHandle.getTotalDecksStatus());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 6,
      "ChangDarren": 5,
      "xsot": 6,
      "sciffany": 2,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import guitests.guihandles.CardDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import guitests.guihandles.DeckDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xsot"
        },
        "content": "import guitests.guihandles.ListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.ListItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static void assertCardDisplayEquals(CardDisplayHandle expectedCard, CardDisplayHandle actualCard) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedCard.getQuestion(), actualCard.getQuestion());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedCard.getAnswer(), actualCard.getAnswer());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Asserts that {@code actualDeck} displays the same name as {@code expectedDeck}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static void assertDeckDisplayEquals(DeckDisplayHandle expectedDeck, DeckDisplayHandle actualDeck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedDeck.getId(), actualDeck.getId());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedDeck.getName(), actualDeck.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static void assertCardDisplaysCardObject(Card expectedCard, CardDisplayHandle actualCard) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedCard.getQuestion(), actualCard.getQuestion());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedCard.getAnswer(), actualCard.getAnswer());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertTagsEqual(expectedCard, actualCard);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Asserts that {@code actualDeck} displays the details of {@code expectedDeck}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static void assertCardDisplaysDeckObject(Deck expectedDeck, DeckDisplayHandle actualDeck) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedDeck.getName().fullName, actualDeck.getName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Asserts that the list in {@code listPanelHandle} displays the details of {@code listItems} correctly."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    public static void assertListMatching(ListPanelHandle listPanelHandle,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                          List\u003c? extends ListItem\u003e listItems) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        ListItem firstItem \u003d listItems.get(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        if (firstItem instanceof Deck) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            ArrayList\u003cDeck\u003e deckList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            for (ListItem item : listItems) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                deckList.add((Deck) item);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            assertDeckListMatching(listPanelHandle, deckList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Asserts that the list in {@code listPanelHandle} displays the details of {@code decks} correctly and"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static void assertDeckListMatching(ListPanelHandle listPanelHandle, List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertDeckListMatching(listPanelHandle, decks.toArray(new Deck[0]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Asserts that the list in {@code listPanelHandle} displays the details of {@code decks} correctly and"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static void assertDeckListMatching(ListPanelHandle listPanelHandle, Deck... decks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.length; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            listPanelHandle.navigateToDeck(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            assertCardDisplaysDeckObject(decks[i], listPanelHandle.getDeckDisplayHandle(i));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Asserts the size of the list in {@code listPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xsot"
        },
        "content": "    public static void assertListSize(ListPanelHandle listPanelHandle, int size) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xsot"
        },
        "content": "        int numberOfCards \u003d listPanelHandle.getListSize();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(size, numberOfCards);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all the tag names in {@code expectedCard}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static void assertTagsEqual(Card expectedCard, CardDisplayHandle actualCard) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        for (Tag tag : expectedCard.getTags()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            expectedTags.add(tag.tagName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(expectedTags, actualCard.getTags());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 58,
      "xsot": 4,
      "sciffany": 2,
      "-": 52
    }
  },
  {
    "path": "src/test/java/systemtests/AddDeckCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xsot"
        },
        "content": "import seedu.address.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.testutil.DeckUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class AddDeckCommandSystemTest extends TopDeckSystemTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    public void add() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Model model \u003d getModel();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* ------------------------ Perform add operations on the shown unfiltered list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ----------------------------- */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: add a card without tags to a non-empty address book, command with leading spaces and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        trailing spaces"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         * -\u003e added"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Card toAdd \u003d SUBTRACTION;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        String command \u003d \"   \" + AddCardCommand.COMMAND_WORD + \"  \" + QUESTION_DESC_SUBTRACTION + \"  \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //            + ANSWER_DESC_SUBTRACTION + \"   \" + TAG_DESC_MATH + \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: undo adding Subtraction card to the list -\u003e Subtraction card deleted */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: redo adding Subtraction card to the list -\u003e Subtraction card added again */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        model.addCard(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: add a card with all fields same as another card in the deck except question -\u003e added */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        toAdd \u003d new CardBuilder(ADDITION).withQuestion(VALID_QUESTION_UNIQUE).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d AddCardCommand.COMMAND_WORD + QUESTION_DESC_UNIQUE + ANSWER_DESC_ADDITION"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                + TAG_DESC_MATH;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        deleteAllDecks();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(ADDITION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: add a card with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        toAdd \u003d SUBTRACTION;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        command \u003d AddCardCommand.COMMAND_WORD + TAG_DESC_MATH + ANSWER_DESC_SUBTRACTION +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        QUESTION_DESC_SUBTRACTION;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: add a card, missing tags -\u003e added */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(NO_TAG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* -------------------------- Perform add operation on the shown filtered list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ------------------------------ */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: filters the card list before adding -\u003e added */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        showDecksWithQuestion(KEYWORD_MATCHING_HTTP);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(HELLO_WORLD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* ------------------------ Perform add operation while a card card is selected"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        --------------------------- */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: selects first card in the card list, add a card -\u003e added, card selection remains"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        unchanged */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        selectDeck(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(MULTIPLICATION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* ----------------------------------- Perform invalid add operations"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        --------------------------------------- */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: add a duplicate card -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d CardUtil.getAddCommand(NO_TAG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, AddCardCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: add a duplicate card except with different answer -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        toAdd \u003d new CardBuilder(NO_TAG).withAnswer(VALID_ANSWER_ADDITION).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d CardUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, AddCardCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: add a duplicate card except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d CardUtil.getAddCommand(NO_TAG) + \" \" + PREFIX_TAG.getPrefix() + \"interesting\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, AddCardCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: missing question -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d AddCardCommand.COMMAND_WORD + ANSWER_DESC_ADDITION + TAG_DESC_MATH;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        .MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: missing answer -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d AddCardCommand.COMMAND_WORD + QUESTION_DESC_ADDITION + TAG_DESC_MATH;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        .MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d \"adds \" + CardUtil.getCardDetails(toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        command \u003d AddCardCommand.COMMAND_WORD + QUESTION_DESC_ADDITION + ANSWER_DESC_ADDITION +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Executes the {@code AddCardCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCardCommand} with the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * details of"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * 4. {@code Storage} and {@code ListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * @see TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private void assertCommandSuccess(Deck toAdd) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandSuccess(DeckUtil.getAddDeckCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see AddDeckCommandSystemTest#assertCommandSuccess(Deck)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private void assertCommandSuccess(String command, Deck toAdd) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.addDeck(toAdd);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xsot"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCardCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * 2. {@code Storage} and {@code ListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see AddDeckCommandSystemTest#assertCommandSuccess(String, Deck)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * 4. {@code Storage} and {@code ListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 90,
      "ckjohn000": 3,
      "xsot": 7,
      "sciffany": 27,
      "-": 53
    }
  },
  {
    "path": "src/test/java/systemtests/ClearDecksCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class ClearDecksCommandSystemTest extends TopDeckSystemTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    public void clear() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        characters and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: selects first card in card list and clears address book -\u003e cleared and no card"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        selected */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        selectDeck(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckDeselected();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: filters the card list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        showDecksWithQuestion(KEYWORD_MATCHING_HTTP);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * model."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * displays"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @see ClearDecksCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 3,
      "ChangDarren": 43,
      "xsot": 1,
      "sciffany": 15,
      "-": 40
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 56
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteDeckCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.DeleteCardCommand.MESSAGE_DELETE_CARD_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.testutil.TestUtil.getDeck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class DeleteDeckCommandSystemTest extends TopDeckSystemTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d String"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            .format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    public void delete() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* ----------------- Performing delete operation while an unfiltered list is being shown"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        -------------------- */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: delete the first card in the list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        -\u003e deleted */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        String command \u003d \"     \" + DeleteCardCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_CARD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        .getOneBased() + \"       \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Card deletedCard \u003d removeCard(expectedModel, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARD_SUCCESS, deletedCard);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: delete the last card in the list -\u003e deleted */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: undo deleting the last card in the list -\u003e last card restored */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: redo deleting the last card in the list -\u003e last card deleted again */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        removeCard(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: delete the middle card in the list -\u003e deleted */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* ------------------ Performing delete operation while a filtered list is being shown"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ---------------------- */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: filtered card list, delete index within bounds of address book and card list -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        showDecksWithQuestion(KEYWORD_MATCHING_HTTP);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Index index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertTrue(index.getZeroBased() \u003c getModel().getFilteredList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: filtered card list, delete index within bounds of address book but out of bounds of"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        card list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         * -\u003e rejected"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        showDecksWithQuestion(KEYWORD_MATCHING_HTTP);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        int invalidIndex \u003d getModel().getTopDeck().getDeckList().size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d DeleteCardCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* --------------------- Performing delete operation while a card card is selected"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ------------------------ */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: delete the selected card -\u003e card list panel selects the card before the deleted card */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        showAllDecks();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        selectDeck(selectedIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d DeleteCardCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        deletedCard \u003d removeCard(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARD_SUCCESS, deletedCard);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* --------------------------------- Performing invalid delete operation"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ------------------------------------ */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d DeleteCardCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d DeleteCardCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                getModel().getTopDeck().getDeckList().size() + 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d DeleteCardCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        assertCommandFailure(DeleteCardCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        assertCommandFailure(DeleteCardCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Removes the {@code Card} at the specified {@code index} in {@code model}\u0027s deck."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @return the removed card"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private Deck removeDeck(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck targetDeck \u003d getDeck(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.deleteDeck(targetDeck);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return targetDeck;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Deletes the card at {@code toDelete} by creating a default {@code DeleteCardCommand} using {@code"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * toDelete} and"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @see DeleteDeckCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        Deck deletedDeck \u003d removeDeck(expectedModel, toDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARD_SUCCESS, deletedDeck);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        assertCommandSuccess(DeleteCardCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * the browser url"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @see DeleteDeckCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @see TopDeckSystemTest#assertSelectedDeckChanged(Index)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            assertSelectedDeckChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 93,
      "ckjohn000": 7,
      "xsot": 1,
      "sciffany": 35,
      "-": 64
    }
  },
  {
    "path": "src/test/java/systemtests/EditDeckCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.commands.EditCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.deck.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "public class EditDeckCommandSystemTest extends TopDeckSystemTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    public void edit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Model model \u003d getModel();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* ----------------- Performing edit operation while an unfiltered list is being shown"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ---------------------- */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        between each field"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         * -\u003e edited"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Index index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        String command \u003d \" \" + EditCardCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //            + QUESTION_DESC_ADDITION + \"  \" + ANSWER_DESC_ADDITION + \" \" + TAG_DESC_MATH + \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Card editedCard \u003d new CardBuilder(ADDITION).withTags(VALID_TAG_MATH).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, index, editedCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: undo editing the last card in the list -\u003e last card restored */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: redo editing the last card in the list -\u003e last card edited again */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        model.setCard(getModel().getFilteredList().get(INDEX_FIRST_CARD.getZeroBased()), editedCard);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: edit a card with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        command \u003d EditCardCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_ADDITION +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ANSWER_DESC_ADDITION"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                + TAG_DESC_MATH;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, index, ADDITION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: edit a card with new answer same as another card\u0027s answer but with different"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        question -\u003e edited */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertTrue(getModel().getTopDeck().getDeckList().contains(ADDITION));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        index \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertNotEquals(getModel().getFilteredList().get(index.getZeroBased()), ADDITION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d EditCardCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_SUBTRACTION"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //            + ANSWER_DESC_ADDITION + TAG_DESC_MATH;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        editedCard \u003d new CardBuilder(ADDITION).withQuestion(VALID_QUESTION_SUBTRACTION).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, index, editedCard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        command \u003d EditCardCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        .getPrefix();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Card cardToEdit \u003d getModel().getFilteredList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        editedCard \u003d new CardBuilder(cardToEdit).withTags().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, index, editedCard);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* ------------------ Performing edit operation while a filtered list is being shown"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ------------------------ */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: filtered card list, edit index within bounds of the deck and card list -\u003e edited */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        showDecksWithQuestion(KEYWORD_MATCHING_HTTP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertTrue(index.getZeroBased() \u003c getModel().getFilteredList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d EditCardCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + QUESTION_DESC_UNIQUE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        cardToEdit \u003d getModel().getFilteredList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        editedCard \u003d new CardBuilder(cardToEdit).withQuestion(VALID_QUESTION_UNIQUE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, index, editedCard);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: filtered card list, edit index within bounds of the deck but out of bounds of card list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         * -\u003e rejected"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        showDecksWithQuestion(KEYWORD_MATCHING_HTTP);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        int invalidIndex \u003d getModel().getTopDeck().getCardList().size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(EditCardCommand.COMMAND_WORD + \" \" + invalidIndex + QUESTION_DESC_HELLO,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* --------------------- Performing edit operation while a card card is selected"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        -------------------------- */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: selects first card in the card list, edit a card -\u003e edited, card selection remains"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        unchanged but"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         * browser url changes"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        showAllDecks();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        selectDeck(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        command \u003d EditCardCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_ADDITION +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ANSWER_DESC_ADDITION"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                + TAG_DESC_MATH;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        // browser\u0027s url is updated to reflect the new card\u0027s name"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, index, ADDITION, index);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* --------------------------------- Performing invalid edit operation"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        -------------------------------------- */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(EditCardCommand.COMMAND_WORD + \" 0\" + QUESTION_DESC_SUBTRACTION,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(EditCardCommand.COMMAND_WORD + \" -1\" + QUESTION_DESC_SUBTRACTION,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        invalidIndex \u003d getModel().getFilteredList().size() + 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        assertCommandFailure(EditCardCommand.COMMAND_WORD + \" \" + invalidIndex +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        QUESTION_DESC_SUBTRACTION,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(EditCardCommand.COMMAND_WORD + QUESTION_DESC_SUBTRACTION,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        assertCommandFailure(EditCardCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased() +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: edit a card with new values same as another card\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        executeCommand(CardUtil.getAddCommand(ADDITION));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertTrue(getModel().getTopDeck().getCardList().contains(ADDITION));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertFalse(getModel().getFilteredList().get(index.getZeroBased()).equals(HELLO_WORLD));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        command \u003d EditCardCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_HELLO +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ANSWER_DESC_HELLO"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                + TAG_DESC_SUBJECT + TAG_DESC_SIMPLE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, EditCardCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: edit a card with new values same as another card\u0027s values but with different tags -\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        command \u003d EditCardCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_HELLO +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ANSWER_DESC_HELLO"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                + TAG_DESC_SUBJECT;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, EditCardCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: edit a card with new values same as another card\u0027s question but with different"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        answer -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        command \u003d EditCardCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_HELLO +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ANSWER_DESC_SUBTRACTION"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                + TAG_DESC_SUBJECT + TAG_DESC_SIMPLE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, EditCardCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * that"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @see EditDeckCommandSystemTest#assertCommandSuccess(String, Index, Card, Index)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Card editedCard) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedCard, null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCardCommand}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * .\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the card at index {@code toEdit}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * being"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * updated to values specified {@code editedCard}.\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @see EditDeckCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Card editedCard,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        //expectedModel.setCard(expectedModel.getFilteredList().get(toEdit.getZeroBased()), editedCard);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.updateFilteredList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                             expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * that the"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @see EditDeckCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @see TopDeckSystemTest#assertSelectedDeckChanged(Index)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        expectedModel.updateFilteredList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            assertSelectedDeckChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 124,
      "ckjohn000": 8,
      "sciffany": 51,
      "-": 64
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class FindCommandSystemTest extends TopDeckSystemTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    public void find() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find multiple cards in deck, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         * -\u003e 2 cards found"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_HTTP + \"   \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel, LAYER, TRANSPORT); // first names of Benson and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        Daniel are \"Meier\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: repeat previous find command where card list is displaying the cards we are finding"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         * -\u003e 2 cards found"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_HTTP;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find card where card list is not displaying the card we are finding -\u003e 1 card found */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" Hello?\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel, HELLO_WORLD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find multiple cards in deck, 2 keywords -\u003e 2 cards found */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" transport layer\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel, TRANSPORT, LAYER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find multiple cards in deck, 2 keywords in reversed order -\u003e 2 cards found */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" layer transport\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find multiple cards in deck, 2 keywords with 1 repeat -\u003e 2 cards found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" transport layer transport\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find multiple cards in deck, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         * -\u003e 2 cards found"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" transport layer NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find same cards in deck after deleting 1 of them -\u003e 1 card found */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        executeCommand(DeleteCardCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertFalse(getModel().getTopDeck().getDeckList().contains(LAYER));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_HTTP;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel, TRANSPORT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find card in deck, keyword is same as name but of different case -\u003e 1 card found */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" HttP\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find card in deck, keyword is substring of name -\u003e 0 cards found */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" HT\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find card in deck, name is substring of keyword -\u003e 0 cards found */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" Transpo\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find card not in deck -\u003e 0 cards found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" NotInBook\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find answer of card in deck -\u003e 0 cards found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" \" + TRANSPORT.getAnswer();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find tags of card in deck -\u003e 0 cards found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(TRANSPORT.getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find while a card is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        showAllDecks();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        selectDeck(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        assertFalse(getCardListPanel().getHandleToSelectedDeck().getQuestion().equals(TRANSPORT"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        .getQuestion()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" transport\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel, TRANSPORT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckDeselected();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: find card in empty deck -\u003e 0 cards found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        deleteAllDecks();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_HTTP;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel, TRANSPORT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d \"FiNd HTTP\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * filtered list,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * class, and the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String expectedResultMessage \u003d String"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .format(MESSAGE_CARDS_LISTED_OVERVIEW, expectedModel.getFilteredList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * box has the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 124,
      "ckjohn000": 1,
      "sciffany": 14,
      "-": 36
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class HelpCommandSystemTest extends TopDeckSystemTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + \"location. We suspect \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + \"that this is a bug with TestFX library that we are using. If this test fails, you \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                    + \"have to run your \" + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    public void openHelpWindow() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        //use accelerator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        getCommandBox().click();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        getResultDisplay().click();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        getCardListPanel().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        //use menu button"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        //use command box"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        // open help window and give it focus"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        //TODO: Fix the assertListMatching to check for decks list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        //assertListMatching(getCardListPanel(), getModel().getFilteredList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        executeCommand(DeleteCardCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 57,
      "sciffany": 6,
      "-": 34
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.logic.ListItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static final Predicate\u003cListItem\u003e PREDICATE_MATCHING_NO_CARDS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static void setFilteredList(Model model, List\u003c? extends ListItem\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        Optional\u003cPredicate\u003cListItem\u003e\u003e predicate \u003d toDisplay.stream().map(ModelHelper::getPredicateMatching)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                           .reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        model.updateFilteredList(predicate.orElse(PREDICATE_MATCHING_NO_CARDS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public static void setFilteredList(Model model, ListItem... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code ListItem} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    private static Predicate\u003cListItem\u003e getPredicateMatching(ListItem other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        return item -\u003e item.equals(other);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 9,
      "sciffany": 3,
      "-": 29
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class SampleDataTest extends TopDeckSystemTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    protected TopDeck getInitialData() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    public void topDeck_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Deck[] expectedList \u003d SampleDataUtil.getSampleDecks();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertDeckListMatching(getCardListPanel(), expectedList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 9,
      "-": 37
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public class SelectCommandSystemTest extends TopDeckSystemTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    public void select() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* ------------------------ Perform select operations on the shown unfiltered list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        -------------------------- */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: select the first card in the card list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         * -\u003e selected"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased() +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        \"   \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: select the last card in the card list -\u003e selected */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: select the middle card in the card list -\u003e selected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* ------------------------ Perform select operations on the shown filtered list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ---------------------------- */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: filtered card list, select index within bounds of address book but out of bounds of"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        card list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         * -\u003e rejected"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        showDecksWithQuestion(KEYWORD_MATCHING_HTTP);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        int invalidIndex \u003d getModel().getTopDeck().getDeckList().size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* Case: filtered card list, select index within bounds of address book and card list -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        selected */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        /* ----------------------------------- Perform invalid select operations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        ------------------------------------ */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        invalidIndex \u003d getModel().getFilteredList().size() + 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    //        MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        deleteAllDecks();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //                MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected card.\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * 4. {@code Storage} and {@code ListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * .\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @see TopDeckSystemTest#assertSelectedDeckChanged(Index)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sciffany"
        },
        "content": "        String expectedResultMessage \u003d String"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                .format(MESSAGE_SELECT_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getCardListPanel().getSelectedDeckIndex();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "            assertSelectedDeckChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * 4. {@code Storage} and {@code ListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * {@code TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "     * @see TopDeckSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertSelectedDeckUnchanged();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 77,
      "ckjohn000": 5,
      "xsot": 2,
      "sciffany": 22,
      "-": 47
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.ReadOnlyTopDeck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyTopDeck\u003e topDeck, Path saveFileLocation) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(topDeck, saveFileLocation));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChangDarren": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/java/systemtests/TopDeckSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_DECKS_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sciffany"
        },
        "content": "import guitests.guihandles.ListPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "import seedu.address.model.TopDeck;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "import seedu.address.testutil.TypicalDecks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": " * A system test class for TopDeck, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "public abstract class TopDeckSystemTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d Arrays"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sciffany"
        },
        "content": "            .asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "    protected TopDeck getInitialData() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return TypicalDecks.getTypicalTopDeck();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public ListPanelHandle getCardListPanel() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        return mainWindowHandle.getListPanel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    public ListPanelHandle getDeckListPanel() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xsot"
        },
        "content": "        return mainWindowHandle.getListPanel();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Displays all decks."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    protected void showAllDecks() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(getModel().getTopDeck().getDeckList().size(), getModel().getFilteredList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Displays all decks with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * TODO: uncomment when FindDeckCommand is implemented"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xsot"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     protected void showDecksWithQuestion(String keyword) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xsot"
        },
        "content": "     executeCommand(FindDeckCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     assertTrue(getModel().getFilteredList().size() \u003c getModel().getTopDeck().getDeckList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xsot"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Selects the Deck at {@code index} of the displayed list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    protected void selectDeck(Index index) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(index.getZeroBased(), getDeckListPanel().getSelectedDeckIndex());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Deletes all Decks."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    protected void deleteAllDecks() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(0, getModel().getTopDeck().getDeckList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     * displays"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same deck objects as {@code expectedModel}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * and the deck list panel displays the decks in the model correctly."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sciffany"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sciffany"
        },
        "content": "                                                     String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(new TopDeck(expectedModel.getTopDeck()), testApp.readStorageTopDeck());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertListMatching(getDeckListPanel(), expectedModel.getFilteredList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code ListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        statusBarFooterHandle.rememberTotalCardsStatus();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        getDeckListPanel().rememberSelectedDeckDisplay();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Asserts that the previously selected deck is now deselected."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    protected void assertSelectedDeckDeselected() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(getDeckListPanel().isAnyDeckSelected());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Asserts that only the deck at {@code expectedSelectedDeckIndex} is selected."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @see ListPanelHandle#isSelectedDeckDisplayChanged()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    protected void assertSelectedDeckChanged(Index expectedSelectedDeckIndex) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        getDeckListPanel().navigateToDeck(getDeckListPanel().getSelectedDeckIndex());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        String selectedDeckName \u003d getDeckListPanel().getHandleToSelectedDeck().getName();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(expectedSelectedDeckIndex.getZeroBased(), getDeckListPanel().getSelectedDeckIndex());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * Asserts that the selected deck in the deck list panel remains unchanged."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sciffany"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * @see ListPanelHandle#isSelectedDeckDisplayChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "    protected void assertSelectedDeckUnchanged() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertFalse(getDeckListPanel().isSelectedDeckDisplayChanged());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertFalse(handle.isTotalPersonsStatusChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location and the total deck"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * list remains the same."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertFalse(handle.isTotalPersonsStatusChanged());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "xsot"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "xsot"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * Asserts that the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, and total persons was changed to match the total"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "xsot"
        },
        "content": "     * number of persons in the address book, while the save location remains the same."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "xsot"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "xsot"
        },
        "content": "    protected void assertStatusBarChangedExceptSaveLocation() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "xsot"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "xsot"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "xsot"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        final int totalPersons \u003d testApp.getModel().getTopDeck().getDeckList().size();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "        assertEquals(String.format(TOTAL_DECKS_STATUS, totalPersons), handle.getTotalDecksStatus());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "xsot"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "xsot"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertListMatching(getDeckListPanel(), getModel().getFilteredList());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                     getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ckjohn000"
        },
        "content": "        assertEquals(String.format(TOTAL_DECKS_STATUS, getModel().getTopDeck().getDeckList().size()),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChangDarren"
        },
        "content": "                     getStatusBarFooter().getTotalDecksStatus());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ckjohn000": 38,
      "ChangDarren": 10,
      "xsot": 25,
      "sciffany": 9,
      "-": 211
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sciffany"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"seedu.address.ui.TestFxmlObject\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sciffany"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sciffany": 2,
      "-": 4
    }
  }
]
