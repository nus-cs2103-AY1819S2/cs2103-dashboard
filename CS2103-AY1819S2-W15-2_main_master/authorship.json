[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "\u003d Personal Finance Tracker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W15-2/main[image:https://travis-ci.org/CS2103-AY1819S2-W15-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W15-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W15-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "//insert image of our future project here"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "//ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "//endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "//ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "//image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "//endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Having trouble tracking your finance? We can help you effortlessly manage your finance with our Personal Finance Tracker application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Track expenses?"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": "** Easily keep track of what you have spent on! View various statistics about your spending so that you can plan ahead!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Budgets?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Easily create budgets and be constantly aware of your spending limits!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Bills and debts?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** Keep track of them so that you will never ever miss another deadline!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Adapted from https://github.com/se-edu/addressbook-level4[AddressBook-Level4 project] created by https://github.com/se-edu/[SE-EDU iniative]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 8,
      "zht96830": 1,
      "-": 27
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        \u0027site-name\u0027: \u0027Personal Finance Tracker\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2103-ay1819s2-w15-2/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 2,
      "-": 234
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Personal Finance Tracker was developed by the https://github.com/orgs/CS2103-AY1819S2-W15-2/teams/developers team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d James Pang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "image::jamessspanggg.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/jamessspanggg[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: List view of expenses. +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFx Expert +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "In charge of UI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Johnson Ho"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "image::jhocx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/jhocx[github]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Bill control. +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Travis Expert +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "In charge of Storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Goh Yin Hao"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "image::gohyinhao.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/gohyinhao[github]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Debt control. +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle Expert +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "In charge of Model."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lim Jiahui"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "image::lim-jiahui.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/lim-jiahui[github]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Budget control. +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Java Expert +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "In charge of Commons."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Teoh Zhi Hui"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "image::zht96830.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/zht96830[github]]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Expense statistics. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Git Expert +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "In charge of Logic."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 5,
      "-": 61
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "\u003d Personal Finance Tracker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w15-2/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "By: `CS2103-AY1819S2-W15-2`      Since: `Feb 2019`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "image::SDforDeleteExpense.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ".  `Logic` uses the `FinanceTrackerParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a expense)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "* stores the Finance Tracker data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "* exposes unmodifiable `ObservableList\u003cExpense\u003e`, `ObservableList\u003cRecurring\u003e`, `ObservableList\u003cDebt\u003e`, `ObservableList\u003cBudget\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* can save the Finance Tracker data in json format and read it back."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedFinanceTracker`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "It extends `FinanceTracker` with an undo/redo history, stored internally as a `financeTrackerStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* `VersionedFinanceTracker#commit()` -- Saves the current finance tracker state in its history."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* `VersionedFinanceTracker#undo()` -- Restores the previous finance tracker state from its history."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* `VersionedFinanceTracker#redo()` -- Restores a previously undone finance tracker state from its history."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitFinanceTracker()`, `Model#undoFinanceTracker()` and `Model#redoFinanceTracker()` respectively."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedFinanceTracker` will be initialized with the initial finance tracker state, and the `currentStatePointer` pointing to that single finance tracker state."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th expense in the finance tracker. The `delete` command calls `Model#commitFinanceTracker()`, causing the modified state of the finance tracker after the `delete 5` command executes to be saved in the `financeTrackerStateList`, and the `currentStatePointer` is shifted to the newly inserted finance tracker state."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Step 3. The user executes `add n/cai tao kuey ...` to add a new expense. The `add` command also calls `Model#commitFinanceTracker()`, causing another modified finance tracker state to be saved into the `financeTrackerStateList`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "If a command fails its execution, it will not call `Model#commitFinanaceTracker()`, so the finance tracker state will not be saved into the `financeTrackerStateList`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Step 4. The user now decides that adding the expense was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoFinanceTracker()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous finance tracker state, and restores the finance tracker to that state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial finance tracker state, then there are no previous finance tracker states to restore. The `undo` command uses `Model#canUndoFinanceTracker()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoFinanceTracker()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the finance tracker to that state."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "If the `currentStatePointer` is at index `financeTrackerStateList.size() - 1`, pointing to the latest finance tracker state, then there are no undone finance tracker states to restore. The `redo` command uses `Model#canRedoFinanceTracker()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the finance tracker, such as `list`, will usually not call `Model#commitFinanceTracker()`, `Model#undoFInanceTracker()` or `Model#redoFinanceTracker()`. Thus, the `financeTrackerStateList` remains unchanged."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitFinanceTracker()`. Since the `currentStatePointer` is not pointing at the end of the `financeTrackerStateList`, all finance tracker states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/cai tao kuey ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire finance tracker."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the expense being deleted)."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of finance tracker states."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedFinanceTracker`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "A project often depends on third-party libraries. For example, Finance Tracker depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all expenses in the list."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from every expense in the finance tracker."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/FinanceTracker.java[`FinanceTracker`] API need to be updated."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/FinanceTracker.java[`FinanceTracker`] and link:{repoURL}/src/main/java/seedu/address/model/expense/Expense.java[`Expense`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/FinanceTracker.java[`FinanceTracker`] allows you to update a expense, and link:{repoURL}/src/main/java/seedu/address/model/expense/Expense.java[`Expense`] allows you to update the tags."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/FinanceTracker.java[`FinanceTracker`]. Loop through each expense, and remove the `tag` from each expense."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `FinanceTracker#removeTag(Tag)`."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your finance tracker application. You realize that one of the users occasionally tries to delete non-existent tags from an expense, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last expense in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ". Use different colors for different tags inside expense cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/ExpenseCard.java[the `ExpenseCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** You can modify the existing test methods for `ExpenseCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/FinanceTrackerSystemTest.java[`FinanceTrackerSystemTest#assertCommandBoxShowsDefaultStyle() and FinanceTrackerTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the finance tracker."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the finance tarcker is updated."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of expenses when the application just started."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleFinanceTrackerChangedEvent(FinanceTrackerChangedEvent)`] to update the number of expenses whenever there are new changes to the finance tracker."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/FinanceTrackerSystemTest.java[`FinanceTrackerSystemTest`] to also verify the new total number of expenses status bar."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the finance tracker to the cloud. However, the current implementation of the application constantly saves the finance tracker after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the finance tracker storage."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Add a new method `backupFinanceTracker(ReadOnlyFinanceTracker)`, so that the finance tracker can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/FinanceTrackerStorage.java[`FinanceTrackerStorage`] interface."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonFinanceTrackerStorage.java[`JsonFinanceTrackerStorage`] class."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Scenario:* You are a software maintainer for `financetracker`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular expense, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "Edits the remark for a expense specified in the `INDEX`. +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "Edits the remark for the first expense to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "Removes the remark for the first expense."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`FinanceTrackerParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/FinanceTrackerParserTest.java[`FinanceTrackerParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/FinanceTrackerParser.java[`FinanceTrackerParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/FinanceTrackerParserTest.java[`FinanceTrackerParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `ExpenseCard`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/ExpenseCard.java[`ExpenseCard`] s to display a remark for each expense later."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/ExpenseListCard.fxml[`ExpenseListCard.fxml`]."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/ExpenseCard.java[`ExpenseCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/expense/Expense.java[`Expense`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/attributes/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Expense` to support a `Remark` field"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/expense/Expense.java[`Expense`]."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/expense/Expense.java[`Expense`]."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the expense will be created without a remark)."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "We now have `Remark` s for `Expense` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedExpense.java[`JsonAdaptedExpense`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsFinanceTracker.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Since `Expense` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/expense/Expense.java[`Expense`]."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the expense that it is currently building."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `ExpenseCard`"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/ExpenseCard.java[`ExpenseCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/ExpenseCard.java[`ExpenseCard`]\u0027s constructor to bind the `Remark` field to the `Expense` \u0027s remark."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of an expense."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* has a need to manage a significant number of expenses"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Value proposition*: manage finances faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|Priority |As a/an ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* *` |user |view a list of my expenses in certain time periods |have a better overview of my expenses"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |add expenses into the finance tracker |record all my expenses"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |see the total amount of money I have |see how much money I have left overall and better plan my finances"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |make changes to expenses I previously added |correct any mistakes"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |organised user |categorise my expenses |know my spending for each category"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |delete an expense |remove entries that I no longer need to keep track of"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |thrifty user |set a budget |manage my expenses and see how much more I can spend for the remaining part of the day/week/month/year"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* *` |user |split my budget into different categories |enhance my finance planning further and not spend excessively on a single category, e.g. food"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |edit my budget |change the amount of budget available or the duration"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |cancel my budget |"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* *` |user |view a list of my debts and see when they are due |remind myself to pay the people I owe by their due dates"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |forgetful user |add my debts |can see who I owe money to"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |edit my debts |change the amount I owe if any changes occur"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |delete my debts |"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |clear my paid debts |know I have settled them"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |add my recurring expenses |keep track of my subscriptions and bills"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |edit my recurring expenses |change the details of my bills if any changes occur"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |delete my recurring expenses |"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |analytical user |see a breakdown of my expenses |know what I spend the most on"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* *` |visual user |have charts and graphs to represent my expenditure |have a better picture on the different categories of my expenses"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* *` |efficient user |be able to view my command history |easily input a repeated command when needed"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |undo and redo my actions |"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* * *` |user |clear all entries |start with an empty finance tracker again when needed"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`* *` |non-tech-savvy user |type simple commands step by step |use the programme more easily without having to keep referring to the help menu"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "|`*` |user |receive reminders regarding my expenditure |know if my spending is about to exceed my budget or when my debts are about to be due"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "(For all use cases below, the *System* is the `Personal Finance Tracker (PFT)` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 1: List expenses"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to list all expenses and specifies if user wants to view by specific duration or category"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT displays all expenses according to specified duration or category"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. PFT detects invalid value for view"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1a1. PFT informs user that input is invalid"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 2: Add expense"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to add an expense"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT prompts user for name of expense"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "3. User enters name"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "4. PFT prompts user for amount for expense"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "5. User enters amount"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "6. PFT prompts user for date of expense"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "7. User enters date"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "8. PFT prompts user for remark of expense"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "9. User enters remark"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "10. PFT creates expense and displays confirmation"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. User enters \u003c\u003ccomplex-command,complex command\u003e\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 10."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters complex command with missing parameters"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1b1. PFT informs user of invalid command"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 3(5,7,9)a. PFT detects wrong format or incorrect data"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "**\t3(5,7,9)a1. PFT requests for correct format"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "**\t3(5,7,9)a2. User enters correct data"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 4(6,8,10)"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 3: Edit expense"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to edit an existing expense by specifying its index"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT prompts user for new name of expense"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "3. User enters new name"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "4. PFT prompts user for new amount of expense"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "5. User enters new amount"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "6. PFT prompts user for new category of expense"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "7. User enters new category"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "8. PFT prompts user for new date of expense"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "9. User enters new date"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "10. PFT prompts user for new remark for expense"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "11. User enters new remark"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "12. PFT updates the existing values to the values entered by user"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. User enters \u003c\u003ccomplex-command,complex command\u003e\u003e"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 12."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters complex command with missing parameters"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1b1. PFT informs user of invalid command"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 3(5,7,9,11)a. PFT detects wrong format or incorrect data"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11)a1. PFT requests for correct format"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11)a2. User enters correct data"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 4(6,8,10,12)"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 4: Delete expense"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1.  User chooses to delete an existing expense and specifies its index"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2.  PFT deletes the expense at the specified index"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. PFT detects that index is invalid."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1a1. PFT informs user that index is invalid."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 5: Add budget"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to add a budget"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT prompts user for category of budget"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "3. User enters category"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "4. PFT prompts user for amount for budget"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "5. User enters amount"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "6. PFT prompts user for start date of budget"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "7. User enters start date"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "8. PFT prompts user for end date of budget"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "9. User enters end date"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "10. PFT creates budget for specified time frame"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. User enters \u003c\u003ccomplex-command,complex command\u003e\u003e"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 10."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters complex command with missing parameters"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1b1. PFT informs user that command is invalid"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 3(5,7,9)a. PFT detects wrong format or incorrect data"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9)a1. PFT requests for correct format"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9)a2. User enters correct data"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 4(6,8,10)."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 6: Edit budget"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to edit an existing budget"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT prompts user for category to edit budget for"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "3. User enters category"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "4. PFT prompts user for new amount for budget"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "5. User enters new amount"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "6. PFT prompts user for new start date of budget"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "7. User enters new start date"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "8. PFT prompts user for new end date of budget"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "9. User enters new end date"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "10. PFT updates the existing values to the values entered by user"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. User enters \u003c\u003ccomplex-command,complex command\u003e\u003e"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 10."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters complex command with missing parameters"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1b1. PFT informs user of invalid command"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 3(5,7,9)a. PFT detects wrong format or incorrect data"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9)a1. PFT requests for correct format"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9)a2. User enters correct data"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 4(6,8,10)."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 7: Delete budget"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to delete an existing budget and specifies its category"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT deletes the budget for the specified category"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. PFT detects invalid category"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1a1. PFT informs user that category is invalid"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 8: List debt"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to list debts"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT lists debts"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. User enters \u003c\u003ccomplex-command,complex command\u003e\u003e"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 2"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters complex command with missing parameters"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1b1. PFT informs user of invalid command"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 9: Add debt"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to add a debt"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "2. PFT prompts user for expense owed for debt"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "3. User enters name"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "4. PFT prompts user for amount owed of debt"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "5. User enters amount"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "6. PFT prompts user for category of debt"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "7. User enters category"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "8. PFT prompts user for deadline of debt"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "9. User enters deadline"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "10. PFT prompts user for remark of debt"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "11. User enters remark"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "12. PFT creates budget for specified time frame"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. User enters \u003c\u003ccomplex-command,complex command\u003e\u003e"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 12."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters complex command with missing parameters"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1b1. PFT informs user of invalid command"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 3(5,7,9,11)a. PFT detects wrong format or incorrect data"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11)a1. PFT requests for correct format"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11)a2. User enters correct data"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 4(6,8,10,12)."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 10: Edit budget"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to edit an existing debt"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "2. PFT prompts user for new expense owed for debt"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "3. User enters new name"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "4. PFT prompts user for new amount for debt"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "5. User enters new amount"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "6. PFT prompts user for new category for debt"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "7. User enters new category"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "8. PFT prompts user for new end deadline for debt"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "9. User enters new deadline"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "10. PFT prompts user for new remark  of debt"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "11. User enters new remark"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "12. PFT updates the existing values to the values entered by user"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. User enters \u003c\u003ccomplex-command,complex command\u003e\u003e"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 12."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters complex command with missing parameters"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1b1. PFT informs user of invalid command"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 3(5,7,9,11)a. PFT detects wrong format or incorrect data"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11)a1. PFT requests for correct format"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11)a2. User enters correct data"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 4(6,8,10,12)."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 11: Delete debt"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to delete an existing debt and specifies its index"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT deletes the debt at the specified index"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. PFT detects invalid index"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1a1. PFT informs user that index is invalid"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 12: Pay debt"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to pay off an existing debt and specifies its index"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT converts the debt into an expense entry"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. User enters \u003c\u003ccomplex-command,complex command\u003e\u003e"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 2."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters complex command with missing parameters"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1b1. PFT informs user of invalid command"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 13: Add recurring expense"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to add recurring expense"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT prompts user for name of recurring expense"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "3. User enters name"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "4. PFT prompts user for amount of recurring expense"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "5. User enters amount"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "6. PFT prompts user for category of recurring expense"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "7. User enters category"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "8. PFT prompts user for frequency of recurring expense"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "9. User enters frequency"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "10. PFT prompts user for number of occurrences of recurring expense"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "11. User enters number of occurrences"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "12. PFT prompts user for start date of recurring expence"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "13. User enters start date"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "14. PFT prompts user for remark of recurring expense"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "15. User enters remark"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "16. PFT creates recurring expense and displays confirmation"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. User enters \u003c\u003ccomplex-command,complex command\u003e\u003e"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 16."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters complex command with missing parameters"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 3(5,7,9,11,13,15)a. PFT detects wrong format or incorrect data"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11,13,15)a1. PFT requests for correct format"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11,13,15)a2. User enters correct data"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 4(6,8,10,12,14,16)."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 14: Edit recurring expense"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to edit existing recurring expense"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT prompts user for new name of recurring expense"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "3. User enters new name"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "4. PFT prompts user for new amount of recurring expense"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "5. User enters new amount"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "6. PFT prompts user for new category of recurring expense"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "7. User enters new category"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "8. PFT prompts user for new frequency of recurring expense"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "9. User enters new frequency"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "10. PFT prompts user for new number of occurrences of recurring expense"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "11. User enters new number of occurrences"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "12. PFT prompts user for new start date of recurring expense"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "13. User enters new start date"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "14. PFT prompts user for new remark of recurring expense"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "15. User enters new remark"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "16. PFT updates parameters with new values"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. User enters \u003c\u003ccomplex-command,complex command\u003e\u003e"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 16."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters complex command with missing parameters"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 3(5,7,9,11,13,15)a. PFT detects wrong format or incorrect data"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11,13,15)a1. PFT requests for correct format"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11,13,15)a2. User enters correct data"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 4(6,8,10,12,14,16)."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 15: Delete recurring expense"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to delete existing recurring expense and specifies both its index and whether to delete all old expenses already added by this recurring expense"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT deletes the recurring expense at the specified index"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. PFT detects invalid index."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1a1. PFT informs user that index is invalid"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters command with missing or invalid parameters"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1b1. PFT informs user of invalid input."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 16: View statistics"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to view statistics"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT prompts user for mode"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "3. User enters mode"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "4. PFT prompts user for category"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "5. User enters category"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "6. PFT prompts user for start date"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "7. User enters start date"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "8. PFT prompts user for end date"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "9. User enters end date"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "10. PFT prompts user for visual representation method"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "11. User enters visual representation method"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "12. PFT displays the statistics requested"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. User enters \u003c\u003ccomplex-command,complex command\u003e\u003e"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 12"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters complex command with missing parameters"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1b1. Use case ends"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 3(5,7,9,11)a. PFT detects wrong format or incorrect data"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11)a1. PFT requests for correct format"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11)a2. User enters correct data"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 4(6,8,10,12)"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 3b. User chooses to display statistics by the mode of categories"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 6"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 17: View trend macro statistics"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to view trend macro statistics"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT prompts user for start date"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "3. User enters start date"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "4. PFT prompts user for end date"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "5. User enters end date"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "6. PFT prompts user for period"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "7. User enters period"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "8. PFT prompts user for category"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "9. User enters category"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "10. PFT prompts user for visual representation method"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "11. User enters visual representation method"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "12. PFT displays the statistics requested"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. User enters \u003c\u003ccomplex-command,complex command\u003e\u003e"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 12."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters complex command with missing parameters"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 3(5,7,9,11)a. PFT detects wrong format or incorrect data"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11)a1. PFT requests for correct format"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11)a2. User enters correct data"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 4(6,8,10,12)."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 18: View compare macro statistics"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to view compare macro statistics"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT prompts user for date 1"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "3. User enters date"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "4. PFT prompts user for date 2"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "5. User enters date"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "6. PFT prompts user for date 3"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "7. User enters date"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "8. PFT prompts user for date 4"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "9. User enters date"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "10. PFT prompts user for date 5"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "11. User enters date"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "12. PFT prompts user for period"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "13. User enters period"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "14. PFT prompts user for category"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "15. User enters category"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "16. PFT prompts user for visual representation method"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "17. User enters visual representation method"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "18. PFT displays the statistics requested"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. User enters \u003c\u003ccomplex-command,complex command\u003e\u003e"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 12."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1b. User enters complex command with missing parameters"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 3(5,7,9,11,13,15,17)a. PFT detects wrong format or incorrect data"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11,13,15,17)a1. PFT requests for correct format"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 3(5,7,9,11,13,15,17)a2. User enters correct data"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 4(6,8,10,12,14,16,18)"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 7(9)b User enters data that is not a date"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 12."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 19: View command history"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to view command history"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT lists all valid commands entered in reverse chronological order"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 20: Auto-fill previous command"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User keys in “Up” arrow"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT auto-fills previous command stored in history in the command line"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Steps 1-2 can be repeated as many times as required until the command wanted is reached"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "3. User presses enter"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "4. PFT executes autofilled command"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 2a. User realises user has accidentally pressed \"Up\" arrow too many times"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 2a1. User presses \"Down\" arrow"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 2a2. PFT auto-fills next command stored in history in the command line"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Steps 2a1-2a2 can be repeated as many times as required until the command wanted is reached"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** Use case resumes from step 3."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 21: Undo previous command"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to undo previous command"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT restores itself to the state before the previous undoable command"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*Extensions:*"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "* 1a. PFT does not find any undoable command"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "** 1a1. PFT informs user that there are no undoable commands executed previously"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 22: Clear all entries"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to clear all entries stored"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT requests for confirmation"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "3. User enters confirmation"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "4. PFT deletes all entries"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[discete]"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Use case 23: Exit programme"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "1. User chooses to exit"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "2. PFT closes itself and exits"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "+"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ".  Should respond to most commands within 2 seconds."
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ".  Should be able to hold up to 1000 entries without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ".  A user with below average to average typing speed for regular English text should be able to accomplish most of the tasks using commands as easily as using the mouse."
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ".  User interface should be easily understood and navigated in."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "[[complex-command]] Complex command::"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": " A command in which both the command as well as the compulsory parameters are entered in the same command line"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "\u003d\u003d\u003d Deleting an expense"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ". Deleting an expense while all expenses are listed"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ".. Prerequisites: List all expenses using the `list` command. Multiple expenses in the list."
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "   Expected: First expense is deleted from the list. Details of the deleted expense shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "   Expected: No expense is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 20,
      "lim-jiahui": 684,
      "-": 863
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Personal Finance Tracker - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w15-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `CS2103-AY1819S2-W15-2`      Since: `Feb 2019`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Personal Finance Tracker is for those who *prefer to use a desktop app for expense tracking*. More importantly, Personal Finance Tracker is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). Whether if you are an expert user or a non tech savvy user, we have commands that cater towards you guys!Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `main.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Personal Finance Tracker."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **`list`**`v/all` : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/Sofa $/200 c/HOME` : adds an expense named `Sofa` of amount `$200` and category of `HOME` to the Finance Tracker."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd expense shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jhocx"
        },
        "content": ".  Refer to \u003c\u003cCommands\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jhocx"
        },
        "content": "\u003d\u003d\u003d Expense"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jhocx"
        },
        "content": "Want to start tracking your expenses but don’t know what application to use? +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jhocx"
        },
        "content": "Fret not, our Finance Tracker allows you to track your expenses by adding it into our system. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jhocx"
        },
        "content": "You can even categorise your expenses in terms of food, travel, transport and more!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jhocx"
        },
        "content": "\u003d\u003d\u003d Budget"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jhocx"
        },
        "content": "Trying to save up for that upcoming trip? +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jhocx"
        },
        "content": "The Budget feature helps you stay within your desired level of expenses within a specified time period! +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jhocx"
        },
        "content": "You can even set budgets for specific categories to better manage your expenses!"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jhocx"
        },
        "content": "\u003d\u003d\u003d Debt"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jhocx"
        },
        "content": "Always losing track of payments due, personal loans or debts owed? +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jhocx"
        },
        "content": "With the Debt feature, you\u0027ll never forget your payments due ever again! +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jhocx"
        },
        "content": "The Debt feature helps you to make expenses in advance and helps you keep track of these expenses due."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jhocx"
        },
        "content": "\u003d\u003d\u003d Recurring"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jhocx"
        },
        "content": "Want to keep track of monthly bills in the expense tracker as well? +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jhocx"
        },
        "content": "The Recurring feature simplifies the process of adding periodic expenses such as phone bills or Netflix subscriptions. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jhocx"
        },
        "content": "Instead of manually adding the same expense repetitively, just add a Recurring and the Finance Tracker will automatically"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jhocx"
        },
        "content": "add the expense for you periodically at your specified frequency and for your specified duration! +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jhocx"
        },
        "content": "The Recurring feature also simplifies the deletion and editing of these recurring expenses!"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jhocx"
        },
        "content": "\u003d\u003d\u003d Stats"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jhocx"
        },
        "content": "Want to see trends and statistics of your expenses? +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jhocx"
        },
        "content": "The Stats feature allows you to view a variety of statistics based on the expenses you\u0027ve input into the Finance Tracker. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jhocx"
        },
        "content": "These statistics will help you better understand your expenses and make effective changes to your habits if so desired."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jhocx"
        },
        "content": "[[Commands]]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jhocx"
        },
        "content": "\u003d\u003d Commands"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Hamburger`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Hamburger t/lunch` or as `n/Hamburger`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/lunch`, `t/lunch t/happy hour` etc."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME $/AMOUNT c/CATEGORY`, `$/AMOUNT c/CATEGORY n/NAME` is also acceptable."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* We take into account non-tech savvy users and offer alternative command format that prompts users to add parameters step by step. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. When adding an expense, instead of inputting an entire line of command such as `add n/NAME $/AMOUNT c/CATEGORY [d/DATE] [r/REMARK]` (Format 1), we also allow user to type in command `add` and prompts the user to input each parameter one by one. (Format 2)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing expenses : `list`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of expenses in the finance tracker according to the view specified. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list v/VIEW`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* The VIEW specifies how the list of expenses are displayed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "** v/all: displays entire list of expenses"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "** v/day: displays list of expenses added since a day ago"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "** v/month: displays list of expenses added since a month ago"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "** v/year: displays list of expenses added since a year ago"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "** v/CATEGORY: displays list of expenses with CATEGORY"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding an expense: `add`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Adds an expense to the finance tracker. +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Format 1: `add n/NAME $/AMOUNT c/CATEGORY [d/DATE] [r/REMARK]`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* The AMOUNT *must be a positive integer or decimal of max 2 decimal places.*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* The CATEGORY only consists of “food”, “shopping”, “work”, “transport”, “utilities”, “healthcare”, “entertainment” and “others” which are case insensitive."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* DATE must be in dd-mm-yyyy format."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* If DATE is omitted, current date will be used."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/BKT $/3.00 c/food d/13-01-1996 r/My weekly bak kut teh intake.`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Sofa $/200 c/HOME`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Format 2: `add`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "You can omit (optional) parameters by leaving them empty."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* `add` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "  `Please enter the name of the expense: BKT` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "  `Please enter the amount of the expense: 3.00` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "  `Please enter the category of the expense: food` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "  `Please enter the date of the expense (optional):` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "  `Please enter the remark of the expense (optional):`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing an expense : `edit`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing expense in the finance tracker. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Format 1: `edit INDEX [n/NAME] [$/AMOUNT] [c/CATEGORY] [d/DATE] [r/REMARK]`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the expense at the specified `INDEX`. The index refers to the index number shown in the displayed expense list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 9 $/450 c/food` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the amount and category of the 9th expense to be `450` and `food` respectively."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Format 2: `edit INDEX`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can omit (optional) parameters by leaving them empty. If all parameters are empty, no edits will occur."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "`edit 9` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the name of the expense to be updated (optional):` +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the amount of the expense to be updated (optional): 450` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the category of the expense to be updated (optional): food` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the date of the expense to be updated (optional):` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the remark of the expense to be updated (optional):`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting an expense : `delete`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified expense from the finance tracker. +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the expense at the specified `INDEX`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed expense list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd expense in the finance tracker."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a budget : `addbudget`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a budget with a time frame to the tracker. +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Format 1: `addbudget $/AMOUNT c/CATEGORY sd/START_DATE ed/END_DATE`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* The categories include: “food”, “shopping”, “work”, “transport”, “utilities”, “healthcare”,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "“entertainment” and “others” which are case insensitive."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* The program only limits one budget for each category."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* `addbudget c/food $/400  sd/1-2-2019 ed/28-2-2019`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* `addbudget c/all $/12000 sd/1-1-2019 ed/31-12-2019`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Format 2: `addbudget`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* `addbudget` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the category of the budget: food` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the amount of the budget: 400` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the start date of budget: 1-2-2019` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the end date of budget: 28-2-2019`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a budget: `editbudget`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Edits a budget in the finance tracker."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Format 1: `editbudget c/CATEGORY [$/AMOUNT] [sd/NEW_START_DATE] [ed/NEW_END_DATE]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* `editbudget c/food $/500`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* `editbudget c/all ed/31-3-2019`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* `editbudget c/all $/5000 sd/1-1-2019 ed/31-3-2019`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Format 2: `editbudget`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "`editbudget` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the category of the budget to be updated: food` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the amount of the budget to be updated (optional):` +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the start date of budget to be updated (optional):` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the end date of budget to be updated (optional):`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a budget: `deletebudget`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes a budget from the finance tracker."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deletebudget c/CATEGORY`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* `deletebudget c/food`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing debts: `listdebt`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of debts in the finance tracker according to the view specified."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `listdebt [v/VIEW]`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* The VIEW specifies how the list of expenses are displayed."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "** v/DEADLINE: display list of debts showing nearest DEADLINE first. Debts without deadlines will be at the bottom of the list."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "** v/CATEGORY: displays list of expenses with CATEGORY"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a debt: `adddebt`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a debt to the finance tracker."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "Format 1: `adddebt n/PERSON_OWED $/AMOUNT_OWED c/CATEGORY due/DEADLINE [r/REMARK]`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* AMOUNT_OWED *must be a positive integer or decimal of max 2 decimal places.*"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* CATEGORY only consists of “food”, “shopping”, “work”, “transport”, “utilities”, “healthcare”, “entertainment” and “others” which are case insensitive."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* DEADLINE must be in dd-mm-yyyy format."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "* `adddebt n/John Doe $/50.00 c/shopping due/25-02-2019 r/Loan from John to finance my new earphones` +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "* `adddebt n/Jane Doe $/200 c/FOOD due/03-03-2019`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Format 2: `adddebt`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "You can omit (optional) parameters by leaving them empty."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* `adddebt` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "`Please enter the name of the expense you owed: John Doe` +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the amount owed : 50.00` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the category: shopping` +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "`Please enter the deadline of the debt: 25-02-2019` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the remark of the debt (optional): Loan from John to finance my new earphones.`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a debt: `editdebt`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Edits debt at specified INDEX based on latest debt list shown and updates values of parameters."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "Format 1: `editdebt INDEX [n/PERSON_OWED] [$/AMOUNT_OWED] [c/CATEGORY] [due/DEADLINE] [r/REMARK]`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the debt at the specified INDEX. The index refers to the index number shown in the displayed debt list. The index *must be a positive integer* 1, 2, 3, …​"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* `editdebt 5 n/Tommy $/60`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "Edits expense owed and amount owed of the 5th debt to be `Tommy` and `$60` respectively."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Format 2: `editdebt`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "You can omit (optional) parameters by leaving them empty. If all parameters are empty, no edits will occur."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* `editdebt 5` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "`Please enter the updated name of the expense you owed (optional): Tommy` +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the updated amount owed (optional): 60.00` +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the updated category (optional):` +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the updated deadline of the debt (optional):` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the updated remark of the debt (optional):`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a debt: `deletedebt`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified debt from the finance tracker."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deletedebt INDEX`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the debt at the specified INDEX."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed debt list."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, …​"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* `listdebt` +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": " `deletedebt 5` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": " Deletes the 5th debt in the finance tracker."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Paying off a debt: `paydebt`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "Convert the debt record to an expense."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "Format: `paydebt INDEX [d/DATE]`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters from debt will be carried over to expense"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* NAME will be entered as “Debt to PERSON_OWED”"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* AMOUNT will be entered as “AMOUNT_OWED”"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* CATEGORY will carry over as such"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* DESCRIPTION will carry over as such"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* DATE must be in dd-mm-yyyy format and can be used to indicate actual day when user paid off the debt"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* If DATE is omitted, current date will be used"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "* `listdebt` +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "`paydebt 3` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "Converts the 3rd debt in the finance tracker into an expense."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a recurring: `addrecurring`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a recurring payment to the finance tracker."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Format 1: `addrecurring n/NAME $/AMOUNT c/CATEGORY [d/STARTDATE] [r/REMARK] f/FREQUENCY o/OCCURRENCE`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* AMOUNT *must be a positive integer or decimal of max 2 decimal places.*"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* CATEGORY only consists of “food”, “shopping”, “work”, “transport”, “utilities”, “healthcare”, “entertainment” and “others” which are case insensitive."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* STARTDATE must be in dd-mm-yyyy format."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* If STARTDATE is omitted, current date will be used."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jhocx"
        },
        "content": "* FREQUENCY only consists of D, W, M, Y for daily, weekly, monthly and yearly respectively. Any numbers following D, W, M or Y means a multiple of that frequency e.g. W2 means fortnightly (every 2 weeks)."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jhocx"
        },
        "content": "* `addrecurring n/Phone Bill $/50.00 c/utilities d/23-2-2019 r/Signed a new 2 year contract. f/M o/24 ` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* `addrecurring n/Magazine Subscription $/20 c/utilities f/M2 o/12`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "Format 2: `addrecurring`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "You can omit (optional) parameters by leaving them empty."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* `addrecurring` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "  `Please enter the name of the recurring: Magazine Subscription` +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "  `Please enter the amount of the recurring: 20` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "  `Please enter the category of the recurring: utilities` +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "  `Please enter the start date of the recurring (optional):` +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jhocx"
        },
        "content": "  `Please enter the remark of the expense (optional):` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jhocx"
        },
        "content": "  `Please enter the frequency of the recurring: M2` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "  `Please enter the number of occurrence of the recurring: 12`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a recurring : `editrecurring`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing recurring in the finance tracker. +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Format 1: `editrecurring INDEX p/EDITPASTOPTION [n/NAME] [$/AMOUNT] [c/CATEGORY] [d/STARTDATE] [r/REMARK] [f/FREQUENCY] [o/OCCURRENCE]` +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the expense at the specified `INDEX`. The index refers to the index number shown in the displayed expense list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jhocx"
        },
        "content": "* EDITPASTOPTION can only be \u0027Y\u0027 or \u0027N\u0027. This prompts user if expenses previously added by this recurring should be edited to reflect the new changes."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "* Agreeing (Y) will edit the recurring, such that new expenses made by this recurring from this time on will reflect the new changes, while also changing old expenses already added by this recurring."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "* Disagreeing (N) will edit the recurring, such that new expenses made by this recurring from this time on will reflect the new changes, while old expenses already added by this recurring will not be changed."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* `editrecurring 9 p/N $/450 c/food` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the amount and category of the 9th recurring to be `450` and `food` respectively. No changes will be made to old expenses already added by this recurring."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jhocx"
        },
        "content": "Format 2: `editrecurring INDEX p/EDITPASTOPTION`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "You can omit (optional) parameters by leaving them empty. If all parameters are empty, no edits will occur."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "`editrecurring 9 p/N` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the name of the recurring to be updated (optional):` +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the amount of the recurring to be updated (optional): 450` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the category of the recurring to be updated (optional): food` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the frequency of the recurring to be updated (optional):` +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the number of occurrence of the recurring to be updated (optional):` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the start date of the recurring to be updated (optional):` +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "`Please enter the remark of the expense to be updated (optional):`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a recurring: `deleterecurring`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified recurring from the finance tracker. +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jhocx"
        },
        "content": "Format: `deleterecurring INDEX p/DELETEPASTOPTION` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the recurring at the specified `INDEX`."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed recurring list."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jhocx"
        },
        "content": "* DELETEPASTOPTION can only be \u0027Y\u0027 or \u0027N\u0027. This prompts user if expenses previously added by this recurring should be deleted."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* Agreeing (Y) will delete the recurring, and delete all old expenses already added by this recurring."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "* Disagreeing (N) will delete the recurring, but does not delete old expenses already added by this recurring."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "* `listrecurring` +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "`deleterecurring 2 p/N` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd recurring in the finance tracker, without deleting old expenses already added by this recurring."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zht96830"
        },
        "content": "\u003d\u003d\u003d Viewing Statistics - Summary: `stats`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zht96830"
        },
        "content": "Produces statistics regarding the user\u0027s finance. +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zht96830"
        },
        "content": "The statistics include the frequency of entries, the total amount of money spent +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zht96830"
        },
        "content": "The user may choose the time frame to be considered for the statistic by entering the start date and end date. +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zht96830"
        },
        "content": "The user may also choose to display only the results in a specific category. +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zht96830"
        },
        "content": "The user may also choose the way he wants the information expressed. Options: Pie Chart, Bar Chart, Table."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zht96830"
        },
        "content": "Table Example:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zht96830"
        },
        "content": "[width\u003d\"50%\"]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|Category       |Total Amount   |Entries"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|FOOD           |$302           |38"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|TRANSPORT      |$205           |4"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|SHOPPING       |$1702          |8"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|WORK           |$52            |1"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|OTHERS         |$40            |1"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "zht96830"
        },
        "content": "`stats [vr/VISUAL_REPRESENTATION] [sd/START_DATE] [ed/END_DATE] [c/CATEGORY]`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "* If category is selected in MODE, CATEGORY field will be unavailable"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* If START_DATE is empty but END_DATE is specified, statistics will be calculated from the one month before END_DATE"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "to END_DATE"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "* If START_DATE is specified but END_DATE is empty, statistics will be calculated from START_DATE to the earlier of"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "one month after START_DATE or the current date"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* If both START_DATE and END_DATE are empty, statistics will be calculated from one month before to the current date"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "* If VISUAL_REPRESENTATION field is left empty, vr options will be displayed"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "* `stats`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "zht96830"
        },
        "content": "* `stats vr/pie`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "zht96830"
        },
        "content": "* `stats sd/12-02-2018`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "zht96830"
        },
        "content": "* `stats sd/01-01-2019 ed/01-02-2019 vr/bar c/food`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "zht96830"
        },
        "content": "\u003d\u003d\u003d Viewing Statistics - Trend: `statstrend`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "zht96830"
        },
        "content": "Produces statistics regarding the user\u0027s finance over a period of time to show trends. +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "zht96830"
        },
        "content": "The statistics include the total amount of money spent on different categories and the frequency of entries in those categories. +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "zht96830"
        },
        "content": "The user must choose the time frame to be considered for the statistic by entering the start date and end date. +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "zht96830"
        },
        "content": "The user may also choose to display only the results in a specific category. +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zht96830"
        },
        "content": "The user may also choose the way he wants the information expressed. Options: Pie Chart, Bar Chart, Table."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "zht96830"
        },
        "content": "Table Example:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "zht96830"
        },
        "content": "[width\u003d\"50%\"]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|Month starting:    |01-01-2019     |01-02-2019     |01-03-2019"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|FOOD               |A:$302, E:38   |A:$23,  E:1   |A:$782,  E:64"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|TRANSPORT          |A:$123, E:2    |A:$0,   E:0   |A:$140,  E:2"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|SHOPPING           |A:$324, E:1    |A:$0,   E:0   |A:$200,  E:1"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|WORK               |A:$0,   E:0    |A:$401, E:2   |A:$0,    E:0"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|TOTAL              |A:$749, E:41   |A:$424, E:3   |A:$1122, E:67"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "zht96830"
        },
        "content": "Format: `statstrend sd/START_DATE ed/END_DATE p/PERIOD [vr/VISUAL_REPRESENTATION] [c/CATEGORY]`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "If VISUAL_REPRESENTATION field is left empty, vr options will be displayed."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "zht96830"
        },
        "content": "* `statstrend sd/01-01-2018 ed/01-01-2018 p/month`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "zht96830"
        },
        "content": "* `statstrend sd/01-01-2018 ed/01-01-2018 p/14`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "zht96830"
        },
        "content": "* `statstrend sd/01-01-2018 ed/01-01-2018 p/month vr/line c/food`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "zht96830"
        },
        "content": "\u003d\u003d\u003d Viewing Statistics - Compare: `statscompare`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "zht96830"
        },
        "content": "Produces and displays statistics regarding the user\u0027s finance for 2 to 4 time periods."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "zht96830"
        },
        "content": "The statistics include the total amount of money spent on different categories and the frequency of entries in those categories. +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "zht96830"
        },
        "content": "The user must specify at least 2 and not more than 4 time periods by specifying the starting dates and the desired period length. +"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "zht96830"
        },
        "content": "The user may also choose to display only the results in a specific category. +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "zht96830"
        },
        "content": "The user may also choose the way he wants the information expressed. Options: Pie Chart, Bar Chart, Table."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "zht96830"
        },
        "content": "Table Example:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "zht96830"
        },
        "content": "[width\u003d\"50%\"]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|Fortnight starting:    |01-01-2019     |02-01-2019     |01-03-2019     |13-03-2019"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|FOOD                   |A:$302, E:38   |A:$23,  E:1   |A:$782,  E:64   |A:$23, E:5"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|TRANSPORT              |A:$123, E:2    |A:$0,   E:0   |A:$140,  E:2    |A:$0,  E:0"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|SHOPPING               |A:$324, E:1    |A:$0,   E:0   |A:$200,  E:1    |A:$0,  E:0"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|WORK                   |A:$0,   E:0    |A:$401, E:2   |A:$0,    E:0    |A:$0,  E:0"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|TOTAL                  |A:$749, E:41   |A:$424, E:3   |A:$1122, E:67   |A:$23, E:5"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "zht96830"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "zht96830"
        },
        "content": "Format: `statscompare d1/DATE_1 d2/DATE_2 [d#/DATE#] p/PERIOD [vr/VISUAL_REPRESENTATION] [c/CATEGORY]`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "If VISUAL_REPRESENTATION field is left empty, vr options will be displayed"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "zht96830"
        },
        "content": "* `statscompare d1/01-01-2019 d2/01-02-2019 p/month`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "zht96830"
        },
        "content": "* `statscompare d1/01-01-2019 d2/07-01-2019 d3/07-01-2019 d4/13-02-2019 p/7`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "zht96830"
        },
        "content": "* `statscompare d1/01-01-2018 d2/01-01-2018 p/month vr/pie c/food`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered, along with its index, in reverse chronological order. +"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Restores the finance tracker to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the finance tracker\u0027s content (`add`, `delete`, `edit` and `clear`), modify budget (`addbudget`, `deletedudget` and `editbudget`), modify debt (`adddebt`, `deletedebt`, `editdebt` and `paydebt`) and modify recurring (`addrecurring`, `deleterecurring` and `editrecurring`)."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Clears all entries from the finance tracker. +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "Finance tracker data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Email reminders `[coming in v2.0]`"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "_{Sends an email if the expenses are about to exceed the budget or when debts are due.}_"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Financial Tracker folder."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME $/AMOUNT c/CATEGORY [d/DATE] [r/REMARK]` +"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/BKT $/3.00 c/food d/13-01-1996 r/My weekly bak kut teh intake`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [$/AMOUNT] [c/CATEGORY] [d/DATE] [r/REMARK]` +"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/Bak Kut Teh`"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add a budget* : `addbudget $/AMOUNT c/CATEGORY sd/START_DATE ed/END_DATE` +"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `addbudget c/food $/400  sd/1-2-2019 ed/28-2-2019`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit a budget* : `editbudget c/CATEGORY [$/AMOUNT] [sd/NEW_START_DATE] [ed/NEW_END_DATE]` +"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `editbudget c/all $/5000 sd/1-1-2019 ed/31-3-2019`"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete a budget* : `deletebudget c/CATEGORY` +"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `deletebudget c/food`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "* *Add a debt* : `adddebt n/PERSON_OWED $/AMOUNT_OWED c/CATEGORY [due/DEADLINE] [r/REMARK]` +"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `adddebt n/Jane Doe $/200 c/FOOD`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "* *Edit a debt* : `editdebt INDEX [n/PERSON_OWED] [$/AMOUNT_OWED] [c/CATEGORY] [due/DEADLINE] [r/REMARK]` +"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `editdebt 5 n/Tommy $/60`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "* *List debts* : `listdebt [v/VIEW]`"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete a debt* : `deletedebt INDEX` +"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `deletedebt 5`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "* *Pay off debt* : `paydebt INDEX [d/DATE]` +"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `payDebt 2`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add a recurring* : `addrecurring n/NAME $/AMOUNT c/CATEGORY [d/STARTDATE] [r/REMARK] [f/FREQUENCY] [o/OCCURRENCE]` +"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jhocx"
        },
        "content": "e.g. `addrecurring n/Phone Bill $/50.00 c/utilities d/23-2-2019 r/Signed a new 2 year contract. f/M o/24` +"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit a recurring* : `editrecurring INDEX p/EDITPASTOPTION [n/NAME] [$/AMOUNT] [c/CATEGORY] [d/STARTDATE] [r/REMARK] [f/FREQUENCY] [o/OCCURRENCE]` +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `editrecurring 9 p/N $/450 c/food` +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jhocx"
        },
        "content": "* *Delete a recurring* : `deleterecurring INDEX p/DELETEPASTOPTION` +"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `deleterecurring 2 p/N` +"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "* *Viewing statistics* : `stats [m/MODE] [vr/VISUAL_REPRESENTATION] [sd/START_DATE] [ed/END_DATE] [c/CATEGORY]` +"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `stats c/frequency sd/01-01-2019 ed/01-02-2019 vr/bar c/food`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "* *Viewing Macro Statistic Trend* : `stats_mt sd/START_DATE ed/END_DATE p/PERIOD [vr/VISUAL_REPRESENTATION]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "[c/CATEGORY]` +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `stats_mt sd/01-01-2018 ed/01-01-2018 p/month vr/line c/food`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "* *Viewing Macro Statistic Comparison* : `stats_mc d1/DATE_1 d2/DATE_2 [d#/DATE#] p/PERIOD"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "[vr/VISUAL_REPRESENTATION] [c/CATEGORY]` +"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `stats_mc d1/01-01-2018 d2/01-01-2018 p/month vr/pie c/food`"
      }
    ],
    "authorContributionMap": {
      "jhocx": 41,
      "gohyinhao": 11,
      "zht96830": 65,
      "lim-jiahui": 5,
      "-": 554
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.storage.FinanceTrackerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.storage.JsonFinanceTrackerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FinanceTracker ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        FinanceTrackerStorage financeTrackerStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                new JsonFinanceTrackerStorage(userPrefs.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        storage \u003d new StorageManager(financeTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s finance tracker and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * The data from the sample finance tracker will be used instead if {@code storage}\u0027s finance tracker is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * or an empty finance tracker will be used instead if errors occur when reading {@code storage}\u0027s finance tracker."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Optional\u003cReadOnlyFinanceTracker\u003e financeTrackerOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        ReadOnlyFinanceTracker initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            financeTrackerOptional \u003d storage.readFinanceTracker();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            if (!financeTrackerOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FinanceTracker\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            initialData \u003d financeTrackerOptional.orElseGet(SampleDataUtil::getSampleFinanceTracker);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FinanceTracker\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            initialData \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FinanceTracker\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            initialData \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FinanceTracker\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        logger.info(\"Starting FinanceTracker \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Finance Tracker ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 3,
      "jhocx": 2,
      "jamessspanggg": 2,
      "lim-jiahui": 17,
      "-": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX \u003d \"The expense index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String MESSAGE_INVALID_CATEGORY \u003d \"The category is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String MESSAGE_INVALID_DEBT_DISPLAYED_INDEX \u003d \"The debt index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String MESSAGE_INVALID_RECURRING_DISPLAYED_INDEX \u003d \"The recurring index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String MESSAGE_EXPENSES_LISTED_OVERVIEW \u003d \"%1$d expenses listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String MESSAGE_DEBTS_LISTED_OVERVIEW \u003d \"%1$d debts listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String MESSAGE_RECURRINGS_LISTED_OVERVIEW \u003d \"%1$d recurrings listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String MESSAGE_BUDGET_EXISTS \u003d \"Budget already exists for that category.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 3,
      "jhocx": 2,
      "zht96830": 1,
      "lim-jiahui": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Returns the FinanceTracker."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @see seedu.address.model.Model#getFinanceTracker()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    ReadOnlyFinanceTracker getFinanceTracker();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of expenses */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of debts */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    ObservableList\u003cDebt\u003e getFilteredDebtList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of budgets */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    ObservableList\u003cBudget\u003e getFilteredBudgetList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of recurring expenses */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    ObservableList\u003cRecurring\u003e getFilteredRecurringList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Returns the user prefs\u0027 Finance Tracker file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Selected expense in the filtered expense list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * null if no expense is selected."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see seedu.address.model.Model#selectedExpenseProperty()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the selected expense in the filtered expense list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedExpense(Expense)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    void setSelectedExpense(Expense expense);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Selected debt in the filtered debt list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * null if no debt is selected."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @see seedu.address.model.Model#selectedDebtProperty()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    ReadOnlyProperty\u003cDebt\u003e selectedDebtProperty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Sets the selected debt in the filtered expense list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedDebt(Debt)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    void setSelectedDebt(Debt debt);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Selected budget in the filtered budget list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * null if no budget is selected."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @see seedu.address.model.Model#selectedBudgetProperty()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    ReadOnlyProperty\u003cBudget\u003e selectedBudgetProperty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Sets the selected budget in the filtered budget list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedBudget(Budget)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    void setSelectedBudget(Budget budget);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Selected recurring in the filtered recurring list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * null if no recurring is selected."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @see seedu.address.model.Model#selectedRecurringProperty()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    ReadOnlyProperty\u003cRecurring\u003e selectedRecurringProperty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Sets the selected recurring in the filtered recurring list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedRecurring(Recurring)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    void setSelectedRecurring(Recurring recurring);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 9,
      "zht96830": 52,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.FinanceTrackerParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final FinanceTrackerParser financeTrackerParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private boolean financeTrackerModified;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        financeTrackerParser \u003d new FinanceTrackerParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // Set financeTrackerModified to true whenever the models\u0027 Finance Tracker is modified."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        model.getFinanceTracker().addListener(observable -\u003e financeTrackerModified \u003d true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        financeTrackerModified \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            Command command \u003d financeTrackerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (financeTrackerModified) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            logger.info(\"Finance Tracker modified, saving to file.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                storage.saveFinanceTracker(model.getFinanceTracker());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return model.getFinanceTracker();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ObservableList\u003cDebt\u003e getFilteredDebtList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return model.getFilteredDebtList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public ObservableList\u003cRecurring\u003e getFilteredRecurringList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return model.getFilteredRecurringList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return model.getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return model.selectedExpenseProperty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void setSelectedExpense(Expense expense) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.setSelectedExpense(expense);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public ReadOnlyProperty\u003cDebt\u003e selectedDebtProperty() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return model.selectedDebtProperty();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public void setSelectedDebt(Debt debt) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        model.setSelectedDebt(debt);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public ReadOnlyProperty\u003cBudget\u003e selectedBudgetProperty() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return model.selectedBudgetProperty();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public void setSelectedBudget(Budget budget) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        model.setSelectedBudget(budget);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public ReadOnlyProperty\u003cRecurring\u003e selectedRecurringProperty() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return model.selectedRecurringProperty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public void setSelectedRecurring(Recurring recurring) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        model.setSelectedRecurring(recurring);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 8,
      "zht96830": 45,
      "jamessspanggg": 9,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": " * Lists all expenses in the Finance Tracker to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 2,
      "jamessspanggg": 2,
      "lim-jiahui": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Selects a expense identified using it\u0027s displayed index from the Finance Tracker."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + \": Selects the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Expense: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        List\u003cExpense\u003e filteredExpenseList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredExpenseList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.setSelectedExpense(filteredExpenseList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 6,
      "zht96830": 1,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/budgetcommands/AddBudgetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.budgetcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": " * Adds a budget to the finance tracker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "public class AddBudgetCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addbudget\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a budget to the Finance Tracker. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"[\" + PREFIX_STARTDATE + \"START_DATE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + PREFIX_ENDDATE + \"END_DATE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"[\" + PREFIX_REMARKS + \"REMARKS]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + PREFIX_CATEGORY + \"food \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + PREFIX_AMOUNT + \"300 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + PREFIX_STARTDATE + \"01-05-2019 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + PREFIX_ENDDATE + \"31-05-2019 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + PREFIX_REMARKS + \"i eat too much\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New budget added:\\n%1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private final Budget toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Creates an AddBudgetCommand to add the specified {@code budget}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public AddBudgetCommand(Budget budget) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        toAdd \u003d budget;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        boolean exists \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        for (Budget budget:model.getFilteredBudgetList()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            if (budget.getCategory() \u003d\u003d toAdd.getCategory()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                exists \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (!exists) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            model.addBudget(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            model.commitFinanceTracker();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_BUDGET_EXISTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                || (other instanceof AddBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddBudgetCommand) other).toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 4,
      "jamessspanggg": 9,
      "lim-jiahui": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/budgetcommands/DeleteBudgetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.budgetcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": " * Deletes a budget, identified using its category and its start date, from the finance tracker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "public class DeleteBudgetCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletebudget\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \": Deletes the budget identified by its category.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"Parameters: CATEGORY\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" food\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_DELETE_BUDGET_SUCCESS \u003d \"Deleted Budget.\\n%1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public DeleteBudgetCommand(Category targetCategory) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        switch (targetCategory) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case FOOD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case TRANSPORT:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case SHOPPING:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case WORK:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 3;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case UTILITIES:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 4;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case HEALTHCARE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 5;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case ENTERTAINMENT:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 6;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case TRAVEL:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 7;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case OTHERS:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 8;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d -1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        List\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CATEGORY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Budget budgetToDelete \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        model.deleteBudget(budgetToDelete);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BUDGET_SUCCESS, budgetToDelete));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 4,
      "jamessspanggg": 6,
      "lim-jiahui": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/budgetcommands/EditBudgetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.budgetcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUDGETS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": " * Edits the details of an existing budget in the finance tracker"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "public class EditBudgetCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editbudget\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the budget identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"by its index in the budget list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"Parameters: \" + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"[\" + PREFIX_STARTDATE + \"START_DATE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"[\" + PREFIX_ENDDATE + \"END_DATE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"[\" + PREFIX_REMARKS + \"REMARKS]\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + PREFIX_CATEGORY + \"food \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            + PREFIX_AMOUNT + \"200 \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_EDIT_BUDGET_SUCCESS \u003d \"Edited budget:\\n%1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private final EditBudgetDescriptor editBudgetDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * @param category of budget to be edited"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * @param editBudgetDescriptor details to edit the budget with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public EditBudgetCommand(Category category, EditBudgetCommand.EditBudgetDescriptor editBudgetDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(editBudgetDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case FOOD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case TRANSPORT:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case SHOPPING:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 2;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case WORK:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 3;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case UTILITIES:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 4;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case HEALTHCARE:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 5;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case ENTERTAINMENT:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 6;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case TRAVEL:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 7;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case OTHERS:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d 8;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            index \u003d -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        this.editBudgetDescriptor \u003d new EditBudgetDescriptor(editBudgetDescriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        List\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Budget budgetToEdit \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CATEGORY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Budget editedbudget \u003d createEditedBudget(budgetToEdit, editBudgetDescriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        model.setBudget(budgetToEdit, editedbudget);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        model.updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BUDGET_SUCCESS, editedbudget));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Creates and returns a {@code Budget} with the details of {@code budgetToEdit}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * edited with {@code editBudgetDescriptor}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private static Budget createEditedBudget(Budget budgetToEdit, EditBudgetDescriptor editBudgetDescriptor) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assert budgetToEdit !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Amount updatedAmount \u003d editBudgetDescriptor.getAmount().orElse(budgetToEdit.getAmount());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Date updatedStartDate \u003d editBudgetDescriptor.getStartDate().orElse(budgetToEdit.getStartDate());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Date updatedEndDate \u003d editBudgetDescriptor.getEndDate().orElse(budgetToEdit.getEndDate());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        String updatedRemarks \u003d editBudgetDescriptor.getRemarks().orElse(budgetToEdit.getRemarks());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return new Budget(budgetToEdit.getCategory(), updatedAmount, updatedStartDate, updatedEndDate, updatedRemarks);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Stores the details to edit the budget with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * corresponding field value of the budget."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static class EditBudgetDescriptor {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        private Date startDate;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        private Date endDate;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        private String remarks;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        public EditBudgetDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        public EditBudgetDescriptor(EditBudgetDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            setRemarks(toCopy.remarks);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return CollectionUtil.isAnyNonNull(amount, startDate, endDate, remarks);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        public void setStartDate(Date startDate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        public Optional\u003cDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        public void setEndDate(Date endDate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        public Optional\u003cDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public Optional\u003cString\u003e getRemarks() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return Optional.ofNullable(remarks);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            if (!(other instanceof EditBudgetDescriptor)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            EditBudgetDescriptor e \u003d (EditBudgetDescriptor) other;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                    \u0026\u0026 getRemarks().equals(e.getRemarks());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 4,
      "jamessspanggg": 15,
      "lim-jiahui": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/debtcommands/AddDebtCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.debtcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Adds a debt to the Finance Tracker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class AddDebtCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"adddebt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a debt to the Finance Tracker. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + PREFIX_NAME + \"PERSON_OWED \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + PREFIX_DUE + \"DEADLINE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + \"[\" + PREFIX_REMARKS + \"REMARKS]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + PREFIX_AMOUNT + \"500 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + PREFIX_CATEGORY + \"travel \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + PREFIX_DUE + \"15-06-2019 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + PREFIX_REMARKS + \"japan air ticket\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New debt added:\\n%1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final Debt toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Creates an AddDebtCommand to add the specified {@code Debt}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public AddDebtCommand(Debt debt) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(debt);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        toAdd \u003d debt;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        System.out.println(\"got here (A)\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.addDebt(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        System.out.println(\"got here (B)\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                || (other instanceof AddDebtCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddDebtCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 56,
      "zht96830": 4,
      "jamessspanggg": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/debtcommands/DeleteDebtCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.debtcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zht96830"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zht96830"
        },
        "content": " * Deletes a debt identified using it\u0027s displayed index from the Finance Tracker."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "public class DeleteDebtCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletedebt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + \": Deletes the debt identified by the index number used in the displayed debt list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_DELETE_DEBT_SUCCESS \u003d \"Deleted Debt:\\n%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public DeleteDebtCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        List\u003cDebt\u003e lastShownList \u003d model.getFilteredDebtList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DEBT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Debt debtToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        model.deleteDebt(debtToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DEBT_SUCCESS, debtToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                || (other instanceof DeleteDebtCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteDebtCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zht96830"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 4,
      "zht96830": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/debtcommands/EditDebtCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.debtcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DEBTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zht96830"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Edits the details of an existing debt in the Finance Tracker."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zht96830"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zht96830"
        },
        "content": "public class EditDebtCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editdebt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the debt identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            + \"by the index number used in the displayed debt list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"PERSON_OWED] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + \"[\" + PREFIX_DUE + \"DEADLINE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            + \"[\" + PREFIX_REMARKS + \"REMARKS]\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            + PREFIX_NAME + \"Hatyai \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            + PREFIX_AMOUNT + \"400 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + PREFIX_CATEGORY + \"travel\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + PREFIX_DUE + \"21-02-2019\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_EDIT_DEBT_SUCCESS \u003d \"Edited debt:\\n%1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private final EditDebtDescriptor editDebtDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @param index of the expense in the filtered debt list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @param editDebtDescriptor details to edit the debt with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public EditDebtCommand(Index index, EditDebtDescriptor editDebtDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        requireNonNull(editDebtDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        this.editDebtDescriptor \u003d new EditDebtDescriptor(editDebtDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        List\u003cDebt\u003e lastShownList \u003d model.getFilteredDebtList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DEBT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Debt debtToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Debt editeddebt \u003d createEditedDebt(debtToEdit, editDebtDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.setDebt(debtToEdit, editeddebt);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.updateFilteredDebtList(PREDICATE_SHOW_ALL_DEBTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DEBT_SUCCESS, editeddebt));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Creates and returns a {@code Debt} with the details of {@code debtToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * edited with {@code editDebtDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static Debt createEditedDebt(Debt debtToEdit, EditDebtDescriptor editDebtDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assert debtToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Name updatedName \u003d editDebtDescriptor.getPersonOwed().orElse(debtToEdit.getPersonOwed());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Amount updatedAmount \u003d editDebtDescriptor.getAmount().orElse(debtToEdit.getAmount());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Category updatedCategory \u003d editDebtDescriptor.getCategory().orElse(debtToEdit.getCategory());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Date updatedDate \u003d editDebtDescriptor.getDeadline().orElse(debtToEdit.getDeadline());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String updatedRemarks \u003d editDebtDescriptor.getRemarks().orElse(debtToEdit.getRemarks());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return new Debt(updatedName, updatedAmount, updatedDate, updatedCategory, updatedRemarks);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!(other instanceof EditDebtCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        EditDebtCommand e \u003d (EditDebtCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                \u0026\u0026 editDebtDescriptor.equals(e.editDebtDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Stores the details to edit the debt with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static class EditDebtDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        private Name personOwed;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        private Date deadline;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        private String remarks;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        public EditDebtDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zht96830"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zht96830"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zht96830"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        public EditDebtDescriptor(EditDebtDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            setPersonOwed(toCopy.personOwed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            setRemarks(toCopy.remarks);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zht96830"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zht96830"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            return CollectionUtil.isAnyNonNull(personOwed, amount, deadline, category, remarks);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void setPersonOwed(Name personOwed) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            this.personOwed \u003d personOwed;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public Optional\u003cName\u003e getPersonOwed() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            return Optional.ofNullable(personOwed);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void setDeadline(Date deadline) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public Optional\u003cDate\u003e getDeadline() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public Optional\u003cString\u003e getRemarks() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return Optional.ofNullable(remarks);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            if (!(other instanceof EditDebtDescriptor)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            EditDebtDescriptor e \u003d (EditDebtDescriptor) other;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            return getPersonOwed().equals(e.getPersonOwed())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                    \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    \u0026\u0026 getRemarks().equals(e.getRemarks());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zht96830"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 36,
      "zht96830": 166,
      "jamessspanggg": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expensecommands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.expensecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": " * Adds an expense to the Finance Tracker."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to the Finance Tracker. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_REMARKS + \"REMARKS]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"Char Kuey Teow \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_AMOUNT + \"300 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_CATEGORY + \"food \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DATE + \"13-01-1996 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_REMARKS + \"My lunch for tuesday\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added:\\n%1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public AddCommand(Expense expense) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 6,
      "zht96830": 5,
      "lim-jiahui": 9,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expensecommands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.expensecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes an expense identified using it\u0027s displayed index from the Finance Tracker."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + \": Deletes the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted Expense:\\n%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense expenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 4,
      "zht96830": 6,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expensecommands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.expensecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Edits the details of an existing expense in the Finance Tracker."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expense identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_REMARKS + \"REMARKS]\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"Hatyai \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_AMOUNT + \"400 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_CATEGORY + \"travel\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"Edited Expense:\\n%1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private final EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @param index of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @param editExpenseDescriptor details to edit the expense with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public EditCommand(Index index, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * edited with {@code editRecurringDescriptor}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Name updatedName \u003d editExpenseDescriptor.getName().orElse(expenseToEdit.getName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Amount updatedAmount \u003d editExpenseDescriptor.getAmount().orElse(expenseToEdit.getAmount());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Category updatedCategory \u003d editExpenseDescriptor.getCategory().orElse(expenseToEdit.getCategory());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Date updatedDate \u003d editExpenseDescriptor.getDate().orElse(expenseToEdit.getDate());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        String updatedRemarks \u003d editExpenseDescriptor.getRemarks().orElse(expenseToEdit.getRemarks());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Expense(updatedName, updatedAmount, updatedDate, updatedCategory, updatedRemarks);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                \u0026\u0026 editExpenseDescriptor.equals(e.editExpenseDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Stores the details to edit the expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private String remarks;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        public EditExpenseDescriptor() {}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        public EditExpenseDescriptor(EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setRemarks(toCopy.remarks);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, amount, date, category, remarks);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public Optional\u003cString\u003e getRemarks() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return Optional.ofNullable(remarks);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            if (!(other instanceof EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            EditExpenseDescriptor e \u003d (EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getRemarks().equals(e.getRemarks());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 8,
      "gohyinhao": 12,
      "zht96830": 24,
      "jamessspanggg": 14,
      "lim-jiahui": 13,
      "-": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/generalcommands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.generalcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": " * Clears the Finance Tracker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Finance Tracker has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        model.setFinanceTracker(new FinanceTracker());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 9,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/generalcommands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.generalcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Finance Tracker as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/generalcommands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.generalcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": " * Finds and lists all persons in Finance Tracker whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                String.format(Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW, model.getFilteredExpenseList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 2,
      "zht96830": 4,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/generalcommands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.generalcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/generalcommands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.generalcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 3,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/generalcommands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.generalcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": " * Reverts the {@code model}\u0027s Finance Tracker to its previously undone state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (!model.canRedoFinanceTracker()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        model.redoFinanceTracker();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 2,
      "zht96830": 6,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/generalcommands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.generalcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (!model.canUndoFinanceTracker()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        model.undoFinanceTracker();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 2,
      "zht96830": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recurringcommands/AddRecurringCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.recurringcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREQUENCY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OCCURRENCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jhocx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jhocx"
        },
        "content": " * Adds a recurring to the Finance Tracker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jhocx"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jhocx"
        },
        "content": "public class AddRecurringCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addrecurring\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a recurring to the Finance Tracker. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"[\" + PREFIX_REMARKS + \"REMARKS] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_FREQUENCY + \"FREQUENCY \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_OCCURRENCE + \"OCCURENCE\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_NAME + \"Phone Bill \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_AMOUNT + \"50 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_CATEGORY + \"utilities \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_DATE + \"23-2-2019 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_REMARKS + \"Signed a new 2 year contract \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_FREQUENCY + \"M \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_OCCURRENCE + \"24\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New recurring added:\\n%1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    private final Recurring toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Creates an AddRecurringCommand to add the specified {@code Recurring}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public AddRecurringCommand(Recurring recurring) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(recurring);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        toAdd \u003d recurring;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        model.addRecurring(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                || (other instanceof AddRecurringCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddRecurringCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jhocx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 57,
      "zht96830": 4,
      "jamessspanggg": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recurringcommands/DeleteRecurringCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.recurringcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRINGOPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Deletes a recurring expense identified using it\u0027s displayed index from the Finance Tracker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jhocx"
        },
        "content": "public class DeleteRecurringCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleterecurring\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \": Deletes the recurring identified by the index number used in the displayed recurring list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_RECURRINGOPTION + \"DELETEPASTOPTION\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_RECURRINGOPTION + \"Y\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String MESSAGE_DELETE_RECURRING_SUCCESS \u003d \"Deleted Recurring:\\n%1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public DeleteRecurringCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        List\u003cRecurring\u003e lastShownList \u003d model.getFilteredRecurringList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECURRING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        Recurring recurringToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        model.deleteRecurring(recurringToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RECURRING_SUCCESS, recurringToDelete));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                || (other instanceof DeleteRecurringCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteRecurringCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jhocx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 54,
      "zht96830": 3,
      "jamessspanggg": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recurringcommands/EditRecurringCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.commands.recurringcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREQUENCY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OCCURRENCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRINGOPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECURRING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Frequency;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jhocx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jhocx"
        },
        "content": " * Edits the details of an existing recurring in the Finance Tracker."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jhocx"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jhocx"
        },
        "content": "public class EditRecurringCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editrecurring\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the recurring identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"by the index number used in the displayed recurring list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"[\" + PREFIX_RECURRINGOPTION + \"EDITPASTOPTION] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"[\" + PREFIX_REMARKS + \"REMARKS] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"[\" + PREFIX_FREQUENCY + \"FREQUENCY] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_OCCURRENCE + \"OCCURRENCE]\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_RECURRINGOPTION + \"N \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_NAME + \"Phone Bill Latest \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            + PREFIX_AMOUNT + \"51 \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Recurring:\\n%1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    private final EditRecurringDescriptor editRecurringDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * @param index of the recurring in the filtered recurring list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * @param editRecurringDescriptor details to edit the recurring with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public EditRecurringCommand(Index index, EditRecurringDescriptor editRecurringDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(editRecurringDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        this.editRecurringDescriptor \u003d new EditRecurringDescriptor(editRecurringDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        List\u003cRecurring\u003e lastShownList \u003d model.getFilteredRecurringList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECURRING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        Recurring recurringToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        Recurring editedRecurring \u003d createEditedRecurring(recurringToEdit, editRecurringDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        model.setRecurring(recurringToEdit, editedRecurring);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        model.updateFilteredRecurringList(PREDICATE_SHOW_ALL_RECURRING);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedRecurring));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Creates and returns a {@code Recurring} with the details of {@code recurringToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * edited with {@code editRecurringDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static Recurring createEditedRecurring(Recurring recurringToEdit,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                                                   EditRecurringDescriptor editRecurringDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        assert recurringToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        Name updatedName \u003d editRecurringDescriptor.getName().orElse(recurringToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        Amount updatedAmount \u003d editRecurringDescriptor.getAmount().orElse(recurringToEdit.getAmount());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        Category updatedCategory \u003d editRecurringDescriptor.getCategory().orElse(recurringToEdit.getCategory());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        Date updatedDate \u003d editRecurringDescriptor.getDate().orElse(recurringToEdit.getDate());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        String updatedRemarks \u003d editRecurringDescriptor.getRemarks().orElse(recurringToEdit.getRemarks());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        Frequency updatedFrequency \u003d editRecurringDescriptor.getFrequency().orElse(recurringToEdit.getFrequency());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        int updatedOccurrence \u003d editRecurringDescriptor.getOccurrence().orElse(recurringToEdit.getOccurrence());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return new Recurring(updatedName, updatedAmount, updatedDate, updatedCategory, updatedRemarks,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                updatedFrequency, updatedOccurrence);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        if (!(other instanceof EditRecurringCommand)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        EditRecurringCommand e \u003d (EditRecurringCommand) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 editRecurringDescriptor.equals(e.editRecurringDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Stores the details to edit the recurring with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * corresponding field value of the recurring."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static class EditRecurringDescriptor {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        private String remarks;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        private Frequency frequency;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private int occurrence;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public EditRecurringDescriptor() {}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jhocx"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jhocx"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jhocx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public EditRecurringDescriptor(EditRecurringDescriptor toCopy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            setRemarks(toCopy.remarks);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            setFrequency(toCopy.frequency);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setOccurrence(toCopy.occurrence);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jhocx"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jhocx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, amount, date, category, remarks, frequency, occurrence);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public Optional\u003cString\u003e getRemarks() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return Optional.ofNullable(remarks);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public void setFrequency(Frequency frequency) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public Optional\u003cFrequency\u003e getFrequency() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return Optional.ofNullable(frequency);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public void setOccurrence(int occurrence) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            this.occurrence \u003d occurrence;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        public Optional\u003cInteger\u003e getOccurrence() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return Optional.ofNullable(occurrence);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            if (!(other instanceof EditRecurringDescriptor)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            EditRecurringDescriptor e \u003d (EditRecurringDescriptor) other;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                    \u0026\u0026 getRemarks().equals(e.getRemarks())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                    \u0026\u0026 getFrequency().equals(e.getFrequency())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 (getOccurrence() \u003d\u003d e.getOccurrence());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jhocx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 196,
      "zht96830": 4,
      "jamessspanggg": 42,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"$/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_REMARKS \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_STARTDATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ENDDATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_VIEW \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DUE \u003d new Prefix(\"due/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_FREQUENCY \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_OCCURRENCE \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final Prefix PREFIX_RECURRINGOPTION \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MODE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FinanceTrackerParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.budgetcommands.AddBudgetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.budgetcommands.DeleteBudgetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.budgetcommands.EditBudgetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.debtcommands.AddDebtCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.debtcommands.DeleteDebtCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.debtcommands.EditDebtCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.recurringcommands.AddRecurringCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.recurringcommands.DeleteRecurringCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.recurringcommands.EditRecurringCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.budgetparsers.AddBudgetCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.budgetparsers.DeleteBudgetCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.budgetparsers.EditBudgetCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.debtparsers.AddDebtCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.debtparsers.DeleteDebtCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.debtparsers.EditDebtCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.expenseparsers.AddCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.expenseparsers.DeleteCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.expenseparsers.EditCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.recurringparsers.AddRecurringCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.recurringparsers.DeleteRecurringCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.recurringparsers.EditRecurringCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zht96830"
        },
        "content": "public class FinanceTrackerParser {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        case AddDebtCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return new AddDebtCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        case AddRecurringCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return new AddRecurringCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        case AddBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return new AddBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        case EditDebtCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return new EditDebtCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        case EditRecurringCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return new EditRecurringCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        case EditBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return new EditBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        case DeleteDebtCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return new DeleteDebtCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        case DeleteBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return new DeleteBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        case DeleteRecurringCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return new DeleteRecurringCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 62,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Frequency;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Parses a {@code String amount} into a {@code Amount}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Parses a {@code String frequency} into an {@code Frequency}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @throws ParseException if the given {@code frequency} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static Frequency parseFrequency(String frequency) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        requireNonNull(frequency);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        String trimmedFrequency \u003d frequency.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (!Frequency.isValidFrequency(trimmedFrequency)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new ParseException(Frequency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return new Frequency(trimmedFrequency);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Parses a {@code String occurence} into an {@code Occurence}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @throws ParseException if the given {@code occurence} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static int parseOccurence(String occurence) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        requireNonNull(occurence);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        String trimmedOccurence \u003d occurence.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return Integer.parseInt(trimmedOccurence);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Parses a {@code String category} into an {@code Category}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        String trimmedCategory \u003d category.trim().toUpperCase();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            Category.valueOf(trimmedCategory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return Category.valueOf(trimmedCategory);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 1,
      "gohyinhao": 2,
      "zht96830": 43,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/budgetparsers/AddBudgetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.parser.budgetparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.budgetcommands.AddBudgetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zht96830"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zht96830"
        },
        "content": " * Parses input arguments and creates a new AddDebtCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zht96830"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zht96830"
        },
        "content": "public class AddBudgetCommandParser implements Parser\u003cAddBudgetCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDebtCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * and returns an AddDebtCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public AddBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                        PREFIX_STARTDATE, PREFIX_ENDDATE, PREFIX_REMARKS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AMOUNT, PREFIX_CATEGORY, PREFIX_ENDDATE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Date startDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STARTDATE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_STARTDATE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            // If date is not present, initialise to the current date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            startDate \u003d new Date(dtf.format(currentDate));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Date endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_ENDDATE).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        String remarks \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            remarks \u003d argMultimap.getValue(PREFIX_REMARKS).get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Budget budget \u003d new Budget(category, amount, startDate, endDate, remarks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return new AddBudgetCommand(budget);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zht96830"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zht96830": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/budgetparsers/DeleteBudgetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "package seedu.address.logic.parser.budgetparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.logic.commands.budgetcommands.DeleteBudgetCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": " * Parses input arguments and creates a new DeleteBudgetCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "public class DeleteBudgetCommandParser implements Parser\u003cDeleteBudgetCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteBudgetCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * and returns a DeleteBudgetCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public DeleteBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            Category category \u003d ParserUtil.parseCategory(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return new DeleteBudgetCommand(category);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBudgetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 5,
      "lim-jiahui": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/budgetparsers/EditBudgetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.parser.budgetparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.budgetcommands.EditBudgetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zht96830"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zht96830"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": "public class EditBudgetCommandParser implements Parser\u003cEditBudgetCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditBudgetCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * and returns an EditBudgetCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public EditBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                        PREFIX_STARTDATE, PREFIX_ENDDATE, PREFIX_REMARKS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Category category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    EditBudgetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        EditBudgetCommand.EditBudgetDescriptor editBudgetDescriptor \u003d new EditBudgetCommand.EditBudgetDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editBudgetDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STARTDATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            editBudgetDescriptor.setStartDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_STARTDATE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ENDDATE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            editBudgetDescriptor.setEndDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_ENDDATE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editBudgetDescriptor.setRemarks(argMultimap.getValue(PREFIX_REMARKS).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (!editBudgetDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new ParseException(EditBudgetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return new EditBudgetCommand(category, editBudgetDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zht96830"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 61,
      "lim-jiahui": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/debtparsers/AddDebtCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.parser.debtparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.debtcommands.AddDebtCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Parses input arguments and creates a new AddDebtCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class AddDebtCommandParser implements Parser\u003cAddDebtCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDebtCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * and returns an AddDebtCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public AddDebtCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                        PREFIX_DUE, PREFIX_REMARKS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DUE, PREFIX_AMOUNT, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDebtCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Name personOwed \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Date deadline \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DUE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        String remarks \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            remarks \u003d argMultimap.getValue(PREFIX_REMARKS).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Debt debt \u003d new Debt(personOwed, amount, deadline, category, remarks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return new AddDebtCommand(debt);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 60,
      "zht96830": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/debtparsers/DeleteDebtCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.parser.debtparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.debtcommands.DeleteDebtCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Parses input arguments and creates a new DeleteDebtCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "public class DeleteDebtCommandParser implements Parser\u003cDeleteDebtCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteDebtCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * and returns an DeleteDebtCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public DeleteDebtCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return new DeleteDebtCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteDebtCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zht96830"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 8,
      "zht96830": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/debtparsers/EditDebtCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.parser.debtparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.commands.debtcommands.EditDebtCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Parses input arguments and creates a new EditDebtCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zht96830"
        },
        "content": "public class EditDebtCommandParser implements Parser\u003cEditDebtCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public EditDebtCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                        PREFIX_DUE, PREFIX_REMARKS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditDebtCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        EditDebtCommand.EditDebtDescriptor editDebtDescriptor \u003d new EditDebtCommand.EditDebtDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            editDebtDescriptor.setPersonOwed(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editDebtDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editDebtDescriptor.setCategory(ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DUE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            editDebtDescriptor.setDeadline(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DUE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editDebtDescriptor.setRemarks(argMultimap.getValue(PREFIX_REMARKS).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (!editDebtDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new ParseException(EditDebtCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return new EditDebtCommand(index, editDebtDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zht96830"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 21,
      "zht96830": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expenseparsers/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.parser.expenseparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                        PREFIX_DATE, PREFIX_REMARKS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            // If date is not present, initialise to the current date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            date \u003d new Date(dtf.format(currentDate));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        String remarks \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            remarks \u003d argMultimap.getValue(PREFIX_REMARKS).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Expense expense \u003d new Expense(name, amount, date, category, remarks);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return new AddCommand(expense);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 9,
      "jhocx": 1,
      "zht96830": 19,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expenseparsers/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.parser.expenseparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expenseparsers/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.parser.expenseparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                        PREFIX_DATE, PREFIX_REMARKS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor editRecurringDescriptor \u003d new EditCommand.EditExpenseDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editRecurringDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editRecurringDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editRecurringDescriptor.setCategory(ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editRecurringDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editRecurringDescriptor.setRemarks(argMultimap.getValue(PREFIX_REMARKS).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (!editRecurringDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return new EditCommand(index, editRecurringDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 5,
      "zht96830": 23,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/recurringparsers/AddRecurringCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.parser.recurringparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREQUENCY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OCCURRENCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.commands.recurringcommands.AddRecurringCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Frequency;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zht96830"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zht96830"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zht96830"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zht96830"
        },
        "content": "public class AddRecurringCommandParser implements Parser\u003cAddRecurringCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public AddRecurringCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                        PREFIX_DATE, PREFIX_REMARKS, PREFIX_FREQUENCY, PREFIX_OCCURRENCE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                PREFIX_OCCURRENCE, PREFIX_FREQUENCY) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    AddRecurringCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Frequency frequency \u003d ParserUtil.parseFrequency(argMultimap.getValue(PREFIX_FREQUENCY).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        int occurence \u003d ParserUtil.parseOccurence(argMultimap.getValue(PREFIX_OCCURRENCE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            // If date is not present, initialise to the current date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            date \u003d new Date(dtf.format(currentDate));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        String remarks \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            remarks \u003d argMultimap.getValue(PREFIX_REMARKS).get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Recurring recurring \u003d new Recurring(name, amount, date, category, remarks, frequency, occurence);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return new AddRecurringCommand(recurring);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zht96830"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 21,
      "jhocx": 3,
      "zht96830": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/recurringparsers/DeleteRecurringCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.parser.recurringparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.debtcommands.DeleteDebtCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.recurringcommands.DeleteRecurringCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Parses input arguments and creates a new DeleteRecurringCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": "public class DeleteRecurringCommandParser implements Parser\u003cDeleteRecurringCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteRecurringCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * and returns an DeleteRecurringCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public DeleteRecurringCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            return new DeleteRecurringCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteDebtCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zht96830"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 4,
      "zht96830": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/recurringparsers/EditRecurringCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zht96830"
        },
        "content": "package seedu.address.logic.parser.recurringparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREQUENCY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OCCURRENCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.recurringcommands.EditRecurringCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zht96830"
        },
        "content": " * Parses input arguments and creates a new EditRecurringCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": "public class EditRecurringCommandParser implements Parser\u003cEditRecurringCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public EditRecurringCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                        PREFIX_DATE, PREFIX_REMARKS, PREFIX_FREQUENCY, PREFIX_OCCURRENCE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    EditRecurringCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        EditRecurringCommand.EditRecurringDescriptor editRecurringDescriptor \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                new EditRecurringCommand.EditRecurringDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editRecurringDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editRecurringDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editRecurringDescriptor.setCategory(ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editRecurringDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            editRecurringDescriptor.setRemarks(argMultimap.getValue(PREFIX_REMARKS).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (!editRecurringDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new ParseException(EditRecurringCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return new EditRecurringCommand(index, editRecurringDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zht96830"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 10,
      "jhocx": 1,
      "zht96830": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/FinanceTracker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.budget.BudgetList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.DebtList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.ExpenseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.recurring.RecurringList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Wraps all data at the finance-tracker level"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class FinanceTracker implements ReadOnlyFinanceTracker {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ExpenseList expenses;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final DebtList debts;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private final BudgetList budgets;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    private final RecurringList recurrings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public FinanceTracker() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expenses \u003d new ExpenseList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        debts \u003d new DebtList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        budgets \u003d new BudgetList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        recurrings \u003d new RecurringList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Creates a FinanceTracker using the Expenses in the {@code toBeCopied}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public FinanceTracker(ReadOnlyFinanceTracker toBeCopied) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    //// list overwrite operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Resets the existing data of this {@code FinanceTracker} with {@code newData}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void resetData(ReadOnlyFinanceTracker newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.expenses.setExpenses(expenses);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces the contents of the debt list with {@code debts}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setDebts(List\u003cDebt\u003e debts) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.debts.setDebts(debts);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Replaces the contents of the budget list with {@code budgets}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        this.budgets.setBudgets(budgets);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    //// expense-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if a expense with the same identity as {@code expense} exists in the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * expense list in the finance tracker."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return expenses.contains(expense);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Adds a expense to the expense list in the finance tracker."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void addExpense(Expense p) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenses.add(p);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces the given expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code target} must exist in the expense list in the finance tracker."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenses.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Removes {@code key} from this {@code FinanceTracker}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code key} must exist in the expense list in the finance tracker."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void removeExpense(Expense key) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    //// debt-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if a debt with the same identity as {@code debt} exists in the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * debt list in the finance tracker."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean hasDebt(Debt debt) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(debt);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return debts.contains(debt);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Adds a debt to the debt list in the finance tracker."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void addDebt(Debt debt) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        debts.add(debt);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces the given debt {@code target} in the list with {@code editedDebt}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code target} must exist in the debt list in the finance tracker."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setDebt(Debt target, Debt editedDebt) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(editedDebt);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        debts.setDebt(target, editedDebt);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Removes {@code key} from this {@code FinanceTracker}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code key} must exist in the debt list in the finance tracker."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void removeDebt(Debt key) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        debts.remove(key);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    //// budget-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if a budget with the same identity as {@code budget} exists in the"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * budget list in the finance tracker."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return budgets.contains(budget);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Adds a budget to the budget list in the finance tracker."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        budgets.addBudget(budget);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Replaces the given budget {@code target} in the list with {@code editedBudget}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * {@code target} must exist in the budget list in the finance tracker."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(editedBudget);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        budgets.setBudget(target, editedBudget);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Removes {@code key} from this {@code FinanceTracker}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * {@code key} must exist in the budget list in the finance tracker."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void removeBudget(Budget key) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        budgets.removeBudget(key);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    //// recurring-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Returns true if a recurring with the same identity as {@code recurring} exists in the"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * recurring list in the finance tracker."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public boolean hasRecurring(Recurring recurring) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(recurring);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return recurrings.contains(recurring);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Adds a recurring to the recurring list in the finance tracker."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void addRecurring(Recurring recurring) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        recurrings.add(recurring);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces the given recurring {@code target} in the list with {@code editedRecurring}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * {@code target} must exist in the recurring list in the finance tracker."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void setRecurring(Recurring target, Recurring editedRecurring) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(editedRecurring);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        recurrings.setRecurring(target, editedRecurring);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Removes {@code key} from this {@code FinanceTracker}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * {@code key} must exist in the recurring list in the finance tracker."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void removeRecurring(Recurring key) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        recurrings.remove(key);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    //// listener methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Notifies listeners that the finance tracker has been modified."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return expenses.asUnmodifiableObservableList().size() + \" expenses\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ObservableList\u003cDebt\u003e getDebtList() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return debts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return budgets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ObservableList\u003cRecurring\u003e getRecurringList() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return recurrings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                || (other instanceof FinanceTracker // instanceof handles nulls"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 expenses.equals(((FinanceTracker) other).expenses));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return expenses.hashCode();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 106,
      "jhocx": 40,
      "zht96830": 1,
      "lim-jiahui": 60,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    Predicate\u003cDebt\u003e PREDICATE_SHOW_ALL_DEBTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    Predicate\u003cRecurring\u003e PREDICATE_SHOW_ALL_RECURRING \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    Predicate\u003cBudget\u003e PREDICATE_SHOW_ALL_BUDGETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns the user prefs\u0027 finance tracker file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the user prefs\u0027 finance tracker file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void setFinanceTrackerFilePath(Path financeTrackerFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces finance tracker data with the data in {@code financeTracker}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void setFinanceTracker(ReadOnlyFinanceTracker financeTracker);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /** Returns the FinanceTracker */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    ReadOnlyFinanceTracker getFinanceTracker();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if a expense with the same identity as {@code expense} exists in the finance tracker."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    boolean hasExpense(Expense expense);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Deletes the given expense."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * The expense must exist in the finance tracker."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void deleteExpense(Expense target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code expense} must not already exist in the finance tracker."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code target} must exist in the finance tracker."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * expense in the finance tracker."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void setExpense(Expense target, Expense editedExpense);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if a debt with the same identity as {@code debt} exists in the finance tracker."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    boolean hasDebt(Debt debt);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Deletes the given debt."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * The debt must exist in the finance tracker."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void deleteDebt(Debt target);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Adds the given debt."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void addDebt(Debt debt);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces the given debt {@code target} with {@code editedDebt}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code target} must exist in the finance tracker."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * The expense identity of {@code editedDebt} must not be the same as another existing debt in the finance tracker."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void setDebt(Debt target, Debt editedDebt);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /** Returns an unmodifiable view of the filtered debt list */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    ObservableList\u003cDebt\u003e getFilteredDebtList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Updates the filter of the filtered debt list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void updateFilteredDebtList(Predicate\u003cDebt\u003e predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Returns true if a budget with the same identity as {@code budget} exists in the finance tracker."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    boolean hasBudget(Budget budget);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Deletes the given budget."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * The budget must exist in the finance tracker."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    void deleteBudget(Budget target);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Adds the given budget."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * {@code budget} must not overlap with an existing budget in the finance tracker."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    void addBudget(Budget budget);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Replaces the given budget {@code target} with {@code editedBudget}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * {@code target} must exist in the finance tracker."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * The budget identity of {@code editedBudget} must not be the same as another existing"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * budget in the finance tracker."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    void setBudget(Budget target, Budget editedBudget);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /** Returns an unmodifiable view of the filtered budget list */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    ObservableList\u003cBudget\u003e getFilteredBudgetList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Updates the filter of the filtered budget list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Returns true if a recurring with the same identity as {@code recurring} exists in the finance tracker."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    boolean hasRecurring(Recurring recurring);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Deletes the given recurring."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * The recurring must exist in the finance tracker."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    void deleteRecurring(Recurring target);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Adds the given recurring."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    void addRecurring(Recurring recurring);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Replaces the given recurring {@code target} with {@code editedRecurring}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * {@code target} must exist in the finance tracker."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * The recurring identity of {@code editedRecurring} must not be the same as another existing"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * recurring in the finance tracker."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    void setRecurring(Recurring target, Recurring editedRecurring);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /** Returns an unmodifiable view of the filtered recurring list */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    ObservableList\u003cRecurring\u003e getFilteredRecurringList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Updates the filter of the filtered recurring list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    void updateFilteredRecurringList(Predicate\u003cRecurring\u003e predicate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if the model has previous finance tracker states to restore."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    boolean canUndoFinanceTracker();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if the model has undone finance tracker states to restore."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    boolean canRedoFinanceTracker();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Restores the model\u0027s finance tracker to its previous state."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void undoFinanceTracker();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Restores the model\u0027s finance tracker to its previously undone state."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void redoFinanceTracker();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Saves the current finance tracker state for undo/redo."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void commitFinanceTracker();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Selected expense in the filtered expense list."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * null if no expense is selected."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns the selected expense in the filtered expense list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * null if no expense is selected."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    Expense getSelectedExpense();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the selected expense in the filtered expense list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    void setSelectedExpense(Expense expense);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Selected debt in the filtered debt list."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * null if no debt is selected."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    ReadOnlyProperty\u003cDebt\u003e selectedDebtProperty();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Returns the selected debt in the filtered debt list."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * null if no debt is selected."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    Debt getSelectedDebt();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Sets the selected debt in the filtered debt list."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    void setSelectedDebt(Debt debt);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Selected budget in the filtered budget list."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * null if no budget is selected."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    ReadOnlyProperty\u003cBudget\u003e selectedBudgetProperty();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Returns the selected budget in the filtered budget list."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * null if no budget is selected."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    Budget getSelectedBudget();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Sets the selected budget in the filtered budget list."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    void setSelectedBudget(Budget budget);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Selected recurring in the filtered recurring list."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * null if no recurring is selected."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    ReadOnlyProperty\u003cRecurring\u003e selectedRecurringProperty();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Returns the selected recurring in the filtered recurring list."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * null if no recurring is selected."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    Recurring getSelectedRecurring();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Sets the selected recurring in the filtered recurring list."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    void setSelectedRecurring(Recurring recurring);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 81,
      "jhocx": 25,
      "zht96830": 27,
      "jamessspanggg": 3,
      "lim-jiahui": 22,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.budget.BudgetNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.debt.exceptions.DebtNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.person.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.recurring.RecurringNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Represents the in-memory model of the finance tracker data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final VersionedFinanceTracker versionedFinanceTracker;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final FilteredList\u003cDebt\u003e filteredDebts;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private final FilteredList\u003cRecurring\u003e filteredRecurrings;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private final FilteredList\u003cBudget\u003e filteredBudgets;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final SimpleObjectProperty\u003cExpense\u003e selectedExpense \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private final SimpleObjectProperty\u003cBudget\u003e selectedBudget \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private final SimpleObjectProperty\u003cDebt\u003e selectedDebt \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private final SimpleObjectProperty\u003cRecurring\u003e selectedRecurring \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Initializes a ModelManager with the given financeTracker and userPrefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ModelManager(ReadOnlyFinanceTracker financeTracker, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireAllNonNull(financeTracker, userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        logger.fine(\"Initializing with finance tracker: \" + financeTracker + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker \u003d new VersionedFinanceTracker(financeTracker);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(versionedFinanceTracker.getExpenseList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        filteredExpenses.addListener(this::ensureSelectedExpenseIsValid);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        filteredDebts \u003d new FilteredList\u003c\u003e(versionedFinanceTracker.getDebtList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        filteredDebts.addListener(this::ensureSelectedDebtIsValid);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        filteredBudgets \u003d new FilteredList\u003c\u003e(versionedFinanceTracker.getBudgetList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        filteredBudgets.addListener(this::ensureSelectedBudgetIsValid);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        filteredRecurrings \u003d new FilteredList\u003c\u003e(versionedFinanceTracker.getRecurringList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        filteredRecurrings.addListener(this::ensureSelectedRecurringIsValid);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this(new FinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return userPrefs.getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setFinanceTrackerFilePath(Path financeTrackerFilePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(financeTrackerFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(financeTrackerFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FinanceTracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setFinanceTracker(ReadOnlyFinanceTracker financeTracker) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.resetData(financeTracker);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return versionedFinanceTracker;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expenses \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return versionedFinanceTracker.hasExpense(expense);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.removeExpense(target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.addExpense(expense);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Debts \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean hasDebt(Debt debt) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(debt);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return versionedFinanceTracker.hasDebt(debt);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void deleteDebt(Debt target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.removeDebt(target);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void addDebt(Debt debt) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.addDebt(debt);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        updateFilteredDebtList(PREDICATE_SHOW_ALL_DEBTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setDebt(Debt target, Debt editedDebt) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireAllNonNull(target, editedDebt);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.setDebt(target, editedDebt);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Budgets \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return versionedFinanceTracker.hasBudget(budget);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void deleteBudget(Budget target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        versionedFinanceTracker.removeBudget(target);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        versionedFinanceTracker.addBudget(budget);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireAllNonNull(target, editedBudget);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        versionedFinanceTracker.setBudget(target, editedBudget);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Recurrings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public boolean hasRecurring(Recurring recurring) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(recurring);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return versionedFinanceTracker.hasRecurring(recurring);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void deleteRecurring(Recurring target) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        versionedFinanceTracker.removeRecurring(target);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void addRecurring(Recurring recurring) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        versionedFinanceTracker.addRecurring(recurring);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        updateFilteredRecurringList(PREDICATE_SHOW_ALL_RECURRING);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void setRecurring(Recurring target, Recurring editedRecurring) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireAllNonNull(target, editedRecurring);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        versionedFinanceTracker.setRecurring(target, editedRecurring);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Expense List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code versionedFinanceTracker}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return filteredExpenses;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Debt List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Debt} backed by the internal list of"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code versionedFinanceTracker}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ObservableList\u003cDebt\u003e getFilteredDebtList() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return filteredDebts;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void updateFilteredDebtList(Predicate\u003cDebt\u003e predicate) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        filteredDebts.setPredicate(predicate);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Budget List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Budget} backed by the internal list of"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * {@code versionedFinanceTracker}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return filteredBudgets;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        filteredBudgets.setPredicate(predicate);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Recurring List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Recurring} backed by the internal list of"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * {@code versionedFinanceTracker}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public ObservableList\u003cRecurring\u003e getFilteredRecurringList() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return filteredRecurrings;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public void updateFilteredRecurringList(Predicate\u003cRecurring\u003e predicate) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        filteredRecurrings.setPredicate(predicate);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean canUndoFinanceTracker() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return versionedFinanceTracker.canUndo();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean canRedoFinanceTracker() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return versionedFinanceTracker.canRedo();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void undoFinanceTracker() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.undo();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void redoFinanceTracker() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.redo();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void commitFinanceTracker() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.commit();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected expense \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return selectedExpense;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Expense getSelectedExpense() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return selectedExpense.getValue();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setSelectedExpense(Expense expense) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (expense !\u003d null \u0026\u0026 !filteredExpenses.contains(expense)) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        selectedExpense.setValue(expense);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public ReadOnlyProperty\u003cBudget\u003e selectedBudgetProperty() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return selectedBudget;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public Budget getSelectedBudget() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return selectedBudget.getValue();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public void setSelectedBudget(Budget budget) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (budget !\u003d null \u0026\u0026 !filteredBudgets.contains(budget)) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new BudgetNotFoundException();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        selectedBudget.setValue(budget);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public ReadOnlyProperty\u003cDebt\u003e selectedDebtProperty() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return selectedDebt;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public Debt getSelectedDebt() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return selectedDebt.getValue();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public void setSelectedDebt(Debt debt) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (debt !\u003d null \u0026\u0026 !filteredDebts.contains(debt)) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new DebtNotFoundException();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        selectedDebt.setValue(debt);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public ReadOnlyProperty\u003cRecurring\u003e selectedRecurringProperty() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return selectedRecurring;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public Recurring getSelectedRecurring() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return selectedRecurring.getValue();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public void setSelectedRecurring(Recurring recurring) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        if (recurring !\u003d null \u0026\u0026 !filteredRecurrings.contains(recurring)) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            throw new RecurringNotFoundException();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        selectedRecurring.setValue(recurring);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Ensures {@code selectedRecurring} is a valid expense in {@code filteredRecurring}."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private void ensureSelectedRecurringIsValid(ListChangeListener.Change\u003c? extends Recurring\u003e change) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            if (selectedRecurring.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                // null is always a valid selected recurring, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            boolean wasSelectedRecurringReplaced \u003d change.wasReplaced()"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                    \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedRecurring.getValue());"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            if (wasSelectedRecurringReplaced) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                // Update selectedRecurring to its new value."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedRecurring.getValue());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                selectedRecurring.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            boolean wasSelectedRecurringRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    .anyMatch(removedRecurring -\u003e selectedRecurring.getValue().isSameRecurring(removedRecurring));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            if (wasSelectedRecurringRemoved) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                // Select the recurring that came before it in the list,"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                // or clear the selection if there is no such recurring."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                selectedRecurring.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Ensures {@code selectedBudget} is a valid expense in {@code filteredBudget}."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private void ensureSelectedBudgetIsValid(ListChangeListener.Change\u003c? extends Budget\u003e change) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            if (selectedBudget.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                // null is always a valid selected budget, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            boolean wasSelectedBudgetReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedBudget.getValue());"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            if (wasSelectedBudgetReplaced) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                // Update selectedBudget to its new value."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedBudget.getValue());"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                selectedBudget.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            boolean wasSelectedBudgetRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    .anyMatch(removedBudget -\u003e selectedBudget.getValue().isSameBudget(removedBudget));"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            if (wasSelectedBudgetRemoved) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                // Select the budget that came before it in the list,"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                // or clear the selection if there is no such budget."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                selectedBudget.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Ensures {@code selectedDebt} is a valid debt in {@code filteredDebts}."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private void ensureSelectedDebtIsValid(ListChangeListener.Change\u003c? extends Debt\u003e change) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            if (selectedDebt.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                // null is always a valid selected debt, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            boolean wasSelectedDebtReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedDebt.getValue());"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            if (wasSelectedDebtReplaced) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                // Update selectedDebt to its new value."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedDebt.getValue());"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                selectedDebt.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            boolean wasSelectedDebtRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                    .anyMatch(removedDebt -\u003e selectedDebt.getValue().isSameDebt(removedDebt));"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            if (wasSelectedDebtRemoved) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                // Select the debt that came before it in the list,"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                // or clear the selection if there is no such debt."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                selectedDebt.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Ensures {@code selectedExpense} is a valid expense in {@code filteredExpenses}."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private void ensureSelectedExpenseIsValid(ListChangeListener.Change\u003c? extends Expense\u003e change) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            if (selectedExpense.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                // null is always a valid selected expense, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            boolean wasSelectedExpenseReplaced \u003d change.wasReplaced()"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                    \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedExpense.getValue());"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            if (wasSelectedExpenseReplaced) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                // Update selectedExpense to its new value."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedExpense.getValue());"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                selectedExpense.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            boolean wasSelectedExpenseRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                    .anyMatch(removedExpense -\u003e selectedExpense.getValue().isSameExpense(removedExpense));"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            if (wasSelectedExpenseRemoved) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                // Select the expense that came before it in the list,"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                // or clear the selection if there is no such expense."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                selectedExpense.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return versionedFinanceTracker.equals(other.versionedFinanceTracker)"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 filteredExpenses.equals(other.filteredExpenses)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 filteredDebts.equals(other.filteredDebts)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 filteredRecurrings.equals(other.filteredRecurrings)"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 filteredBudgets.equals(other.filteredBudgets)"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedExpense.get(), other.selectedExpense.get())"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedDebt.get(), other.selectedDebt.get())"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedRecurring.get(), other.selectedRecurring.get())"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedBudget.get(), other.selectedBudget.get());"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 122,
      "jhocx": 19,
      "zht96830": 137,
      "jamessspanggg": 1,
      "lim-jiahui": 43,
      "-": 211
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyFinanceTracker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public interface ReadOnlyFinanceTracker extends Observable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns an unmodifiable view of the expense list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns an unmodifiable view of the debt list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    ObservableList\u003cDebt\u003e getDebtList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Returns as unmodifiable view of the budget list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    ObservableList\u003cBudget\u003e getBudgetList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     * Returns an unmodifiable view of the recurring list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zht96830"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    ObservableList\u003cRecurring\u003e getRecurringList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 9,
      "zht96830": 6,
      "lim-jiahui": 6,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Path financeTrackerFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        setFinanceTrackerFilePath(newUserPrefs.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return financeTrackerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setFinanceTrackerFilePath(Path financeTrackerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(financeTrackerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.financeTrackerFilePath \u003d financeTrackerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 financeTrackerFilePath.equals(o.financeTrackerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return Objects.hash(guiSettings, financeTrackerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + financeTrackerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedFinanceTracker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * {@code FinanceTracker} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class VersionedFinanceTracker extends FinanceTracker {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final List\u003cReadOnlyFinanceTracker\u003e financeTrackerStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public VersionedFinanceTracker(ReadOnlyFinanceTracker initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTrackerStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTrackerStateList.add(new FinanceTracker(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Saves a copy of the current {@code FinanceTracker} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTrackerStateList.add(new FinanceTracker(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTrackerStateList.subList(currentStatePointer + 1, financeTrackerStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Restores the finance tracker to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        resetData(financeTrackerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Restores the finance tracker to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        resetData(financeTrackerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if {@code undo()} has finance tracker states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if {@code redo()} has finance tracker states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return currentStatePointer \u003c financeTrackerStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!(other instanceof VersionedFinanceTracker)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker otherVersionedFinanceTracker \u003d (VersionedFinanceTracker) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return super.equals(otherVersionedFinanceTracker)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 financeTrackerStateList.equals(otherVersionedFinanceTracker.financeTrackerStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedFinanceTracker.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            super(\"Current state pointer at start of financeTrackerState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            super(\"Current state pointer at end of financeTrackerState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 23,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attributes/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jhocx"
        },
        "content": "package seedu.address.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Represents a Expense\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 1,
      "gohyinhao": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attributes/Amount.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jhocx"
        },
        "content": "package seedu.address.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jhocx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jhocx"
        },
        "content": " * Represents an amount in cents in the finance tracker."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jhocx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jhocx"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            \"Amount should only contain numbers, reflect the value in dollars and it should be at least 1 digit long.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}(\\\\.\\\\d{1,2})?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Constructs a {@code Amount}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @param amount A valid amount number in dollars."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        BigDecimal valueInDollars \u003d new BigDecimal(amount);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        value \u003d valueInDollars.multiply(new BigDecimal(\"100\")).intValue();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Returns true if a given string is a valid amount."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @return value of amount in dollars."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        BigDecimal valueInCents \u003d new BigDecimal(value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        BigDecimal valueInDollars \u003d valueInCents.divide(new BigDecimal(\"100\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return valueInDollars.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Amount) other).value); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jhocx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 42,
      "gohyinhao": 16,
      "lim-jiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attributes/Category.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jhocx"
        },
        "content": "package seedu.address.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Represents a category in the finance tracker."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jhocx"
        },
        "content": "public enum Category {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    FOOD, TRANSPORT, SHOPPING, WORK, UTILITIES, HEALTHCARE, ENTERTAINMENT, TRAVEL, OTHERS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            \"Category should only be one of the following: FOOD, TRANSPORT, SHOPPING, WORK, UTILITIES, \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                    + \"HEALTHCARE, ENTERTAINMENT, TRAVEL, OTHERS.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Method to check if string belongs to one of the possible enum values."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @param categoryName is a string containing possible enum value."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @return true if string is a valid enum; false if string is not a valid enum."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static boolean isValid(String categoryName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Category[] categories \u003d Category.values();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        for (Category category : categories) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            if (category.toString().equals(categoryName.toUpperCase())) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jhocx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 5,
      "gohyinhao": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attributes/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jhocx"
        },
        "content": "package seedu.address.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jhocx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jhocx"
        },
        "content": " * Represents a date in the finance tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jhocx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jhocx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "public class Date implements Comparable\u003cDate\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            \"Date should only be dd-mm-yyyy format.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}-\\\\d{2}-\\\\d{4}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public final int day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public final int month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public final int year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * @param date A valid date number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        int[] datesInt \u003d parseDate(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        day \u003d datesInt[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        month \u003d datesInt[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        year \u003d datesInt[2];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    private static int[] parseDate(String date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        int[] datesInt \u003d new int[3];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        String[] datesString \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            datesInt[i] \u003d Integer.parseInt(datesString[i]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return datesInt;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return String.format(\"%02d-%02d-%4d\", day, month, year);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 day \u003d\u003d (((Date) other).day) // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 month \u003d\u003d (((Date) other).month)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 year \u003d\u003d ((Date) other).year);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Returns -1, 0 and 1 respectively if Date is earlier than, same as, or later than {@param other}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public int compareTo(Date other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (this.year \u003c other.year) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (this.year \u003e other.year) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        // years are the same"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (this.month \u003c other.month) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (this.month \u003e other.month) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        // years and months are the same"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (this.day \u003c other.day) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (this.day \u003e other.day) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return this.hashCode();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jhocx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 66,
      "gohyinhao": 4,
      "lim-jiahui": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attributes/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jhocx"
        },
        "content": "package seedu.address.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Represents a Expense\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 1,
      "gohyinhao": 1,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attributes/Frequency.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jhocx"
        },
        "content": "package seedu.address.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jhocx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jhocx"
        },
        "content": " * Represents an frequency in the finance tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jhocx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFrequency(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jhocx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jhocx"
        },
        "content": "public class Frequency {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            \"Frequency should only contain an alphabet \u0027D\u0027, \u0027W\u0027, \u0027M\u0027 or \u0027Y\u0027 for daily, weekly, monthly or yearly \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                    + \"respectively. Any numbers following the alphabet means a multiple of that frequency e.g. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                    + \"W2 means fortnightly (every 2 weeks).\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[DWMYdwmy]\\\\d*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Constructs a {@code Frequency}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * @param frequency A valid frequency."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public Frequency(String frequency) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(frequency);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        checkArgument(isValidFrequency(frequency), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        value \u003d frequency;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Returns true if a given string is a valid frequency."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public static boolean isValidFrequency(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                || (other instanceof Frequency // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 value.equals(((Frequency) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jhocx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 51,
      "gohyinhao": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attributes/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jhocx"
        },
        "content": "package seedu.address.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jhocx"
        },
        "content": " * Represents a Expense\u0027s name in the finance tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 7,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/Budget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Represents a Budget in the finance tracker."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private String remarks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private int totalSpent; // in cents"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private double percentage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private boolean hasBudget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private boolean isAboutToExceed; // when percentage reaches 90"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    // constructor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public Budget(Category category, Amount amount, Date startDate, Date endDate, String remarks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireAllNonNull(category, amount, endDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (remarks \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            this.remarks \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        totalSpent \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        percentage \u003d (((double) totalSpent) / amount.value) * 100;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        hasBudget \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        isAboutToExceed \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public double getTotalSpent() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return totalSpent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public double getPercentage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return percentage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public boolean getHasBudget() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return hasBudget;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public boolean getIsAboutToExceed() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        return isAboutToExceed;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void setCategory(Category category) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void setStartDate(Date startDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void setEndDate(Date endDate) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void setTotalSpent(int totalSpent) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        this.totalSpent \u003d totalSpent;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Checks if budget overlaps in terms of date with another budget."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @return true if budget overlaps with {@code other}, false if otherwise"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public boolean overlaps(Budget other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (this.category !\u003d other.category) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (((this.startDate.compareTo(other.startDate) \u003c 0) \u0026\u0026 (this.endDate.compareTo(other.startDate) \u003c 0))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                || ((other.startDate.compareTo(this.startDate) \u003c 0)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 (other.startDate.compareTo(this.startDate) \u003c 0))) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Check on whether the two budgets are the same based on their variables."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * They need not be the same instance variable."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @return true if the two budgets have the same attributes."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public boolean isSameBudget(Budget otherBudget) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (otherBudget \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return otherBudget !\u003d null"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                \u0026\u0026 otherBudget.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                \u0026\u0026 otherBudget.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                \u0026\u0026 otherBudget.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                \u0026\u0026 otherBudget.getEndDate().equals(getEndDate());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        builder.append(\"Category: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                .append(category)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                .append(amount);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (startDate !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            builder.append(\" Start date: \").append(startDate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        builder.append(\" End date: \").append(endDate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (remarks !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            builder.append(\" Remarks: \").append(remarks);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 38,
      "zht96830": 7,
      "jamessspanggg": 4,
      "lim-jiahui": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/BudgetList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A list of budgets that does not allow nulls. One for each of the eight category and one for total."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * @see Budget"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "public class BudgetList implements Iterable\u003cBudget\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Returns true if list contains a budget that overlaps with given argument"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public boolean hasOverlap(Budget toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        for (Budget budget : internalList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            if (toCheck.overlaps(budget)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Returns true if the list contains an equivalent budget as the given argument"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public boolean contains(Budget toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBudget);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Adds a budget to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Budget cannot be overlapping with another existing budget."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void addBudget(Budget toAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (hasOverlap(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            throw new OverlappingBudgetException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        switch (toAdd.getCategory()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case FOOD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            internalList.add(0, toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case TRANSPORT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            internalList.add(1, toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case SHOPPING:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            internalList.add(2, toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case WORK:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            internalList.add(3, toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case UTILITIES:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            internalList.add(4, toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case HEALTHCARE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            internalList.add(5, toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case ENTERTAINMENT:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            internalList.add(6, toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case TRAVEL:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            internalList.add(7, toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        case OTHERS:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            internalList.add(8, toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            //intentional fallthrough"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Replaces the budget {@code target} in the list with {@code editedBudget}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireAllNonNull(target, editedBudget);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            throw new BudgetNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        internalList.set(index, editedBudget);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Replaces entire budget list {@code internalList} with new budget list {@code replacement}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void setBudgets(BudgetList replacement) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Replaces the contents of this list with {@code budgets}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireAllNonNull(budgets);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        internalList.setAll(budgets);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Removes the equivalent budget from the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * The budget must exist in the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void removeBudget(Budget toRemove) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            throw new BudgetNotFoundException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Returns backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public ObservableList\u003cBudget\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public Iterator\u003cBudget\u003e iterator() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 15,
      "lim-jiahui": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/BudgetNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Signals that the operation is unable to find the specified budget."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "public class BudgetNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 1,
      "lim-jiahui": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/OverlappingBudgetException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Signals that operation will cause two budgets whose dates are overlapping."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "public class OverlappingBudgetException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public OverlappingBudgetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        super(\"Operation would result in overlapping budgets\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 3,
      "lim-jiahui": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/debt/Debt.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.model.debt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Represents a Debt in the finance tracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Guarantees: field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class Debt {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    // Compulsory fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Name personOwed;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Date deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    // Optional fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private String remarks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Initializes a newly created Debt object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Debt(Name personOwed, Amount amount, Date deadline, Category category, String remarks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireAllNonNull(personOwed, amount, deadline, category);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.personOwed \u003d personOwed;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (remarks \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            this.remarks \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Name getPersonOwed() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return personOwed;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Date getDeadline() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if both debts have the same personOwed and amount."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * This defines a weaker notion of equality between two debts."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean isSameDebt(Debt otherDebt) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (otherDebt \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return otherDebt !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 otherDebt.getPersonOwed().equals(this.personOwed)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 otherDebt.getAmount().equals(this.amount);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return Objects.hash(personOwed, amount, category, deadline, remarks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        builder.append(\"Person owed: \")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .append(personOwed.toString())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .append(\" Amount owed: \")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .append(amount.toString())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .append(category.toString())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .append(deadline.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!remarks.equals(\"\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            builder.append(\" Remarks: \").append(remarks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/debt/DebtList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.model.debt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.exceptions.DebtNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A list of debts that does not allow nulls. Duplicates are allowed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * @see Debt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class DebtList implements Iterable\u003cDebt\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final ObservableList\u003cDebt\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final ObservableList\u003cDebt\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if the list contains an equivalent debt as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean contains(Debt toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDebt);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Adds a debt to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void add(Debt toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces the debt {@code target} in the list with {@code editedDebt}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setDebt(Debt target, Debt editedDebt) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireAllNonNull(target, editedDebt);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new DebtNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        internalList.set(index, editedDebt);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces entire debt list {@code internalList} with new debt list {@code replacement}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setDebts(DebtList replacement) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setDebts(List\u003cDebt\u003e debts) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireAllNonNull(debts);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        internalList.setAll(debts);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Removes the equivalent debt from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * The debt must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void remove(Debt toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new DebtNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ObservableList\u003cDebt\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Iterator\u003cDebt\u003e iterator() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                || (other instanceof DebtList // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 internalList.equals(((DebtList) other).internalList));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/debt/exceptions/DebtNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.model.debt.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Signals that the operation is unable to find the specified debt."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class DebtNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Expense.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Represents a Expense in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Amount amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Category category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String remarks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Expense(Name name, Amount amount, Date date, Category category, String remarks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, amount, category);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (remarks \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            this.remarks \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both expenses of the same name have the same cost amount and date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two expenses."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean isSameExpense(Expense otherExpense) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (otherExpense \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return otherExpense !\u003d null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 otherExpense.getName().equals(getName())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherExpense.getDate().equals(getDate());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two expenses."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return otherExpense.getName().equals(getName())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 otherExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherExpense.getDate().equals(getDate())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherExpense.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherExpense.getRemarks().equals(getRemarks());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, amount, date, category, remarks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(name)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(amount)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(category);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\" Date: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                    .append(date);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!remarks.equals(\"\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\" Remarks: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    .append(remarks);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 6,
      "gohyinhao": 22,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/ExpenseList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A list of expenses that does not allow nulls. Duplicates are allowed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * @see Expense"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent expense as the given argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Expense toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExpense);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a expense to the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * The expense must not already exist in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpenses(ExpenseList replacement) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code expenses} may contain duplicate expenses."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        internalList.setAll(expenses);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent expense from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The expense must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((ExpenseList) other).internalList));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 21,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(expense.getName().name, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 3,
      "jhocx": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueExpenseList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.person.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A list of expenses that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A expense is considered unique by comparing using {@code Expense#isSameExpense(Expense)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * As such, adding and updating of expenses uses Expense#isSameExpense(Expense) for equality so as to ensure"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * that the expense being added or updated is unique in terms of identity in the UniqueExpenseList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * However, the removal of a expense uses Expense#equals(Object) so as to ensure that the expense with"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * @see Expense#isSameExpense(Expense)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class UniqueExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if the list contains an equivalent expense as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean contains(Expense toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExpense);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Adds a expense to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * The expense must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces the expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing expense in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!target.isSameExpense(editedExpense) \u0026\u0026 contains(editedExpense)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Removes the equivalent expense from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * The expense must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpenses(UniqueExpenseList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!expensesAreUnique(expenses)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        internalList.setAll(expenses);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                || (other instanceof UniqueExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueExpenseList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns true if {@code expenses} contains only unique expenses."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private boolean expensesAreUnique(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            for (int j \u003d i + 1; j \u003c expenses.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                if (expenses.get(i).isSameExpense(expenses.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 138,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateExpenseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class DuplicateExpenseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public DuplicateExpenseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/ExpenseNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Signals that the operation is unable to find the specified expense."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class ExpenseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recurring/DuplicateRecurringException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jhocx"
        },
        "content": "package seedu.address.model.recurring;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Signals that the operation is unable to be performed because it will result in a duplicate recurring."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jhocx"
        },
        "content": "public class DuplicateRecurringException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public DuplicateRecurringException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        super(\"Operation would result in duplicate recurring\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jhocx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 7,
      "gohyinhao": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recurring/Recurring.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jhocx"
        },
        "content": "package seedu.address.model.recurring;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Frequency;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jhocx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jhocx"
        },
        "content": " * Represents a Recurring in the finance tracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jhocx"
        },
        "content": " * Guarantees: field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jhocx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jhocx"
        },
        "content": "public class Recurring extends Expense {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    // Additional fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    private Frequency frequency;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private int occurrence;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Initializes a newly created Recurring object that contains only the compulsory fields."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public Recurring(Name name, Amount amount, Date date, Category category, String remarks, Frequency frequency,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     int occurrence) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        super(name, amount, date, category, remarks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.occurrence \u003d occurrence;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public Frequency getFrequency() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return frequency;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOccurrence() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return occurrence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both recurrings of the same name have the same amount, date, frequency, and occurrence."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * This defines a weaker notion of equality between two recurrings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public boolean isSameRecurring(Recurring otherRecurring) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        if (otherRecurring \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return otherRecurring !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 otherRecurring.getName().equals(getName())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 otherRecurring.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 otherRecurring.getDate().equals(getDate())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 otherRecurring.getFrequency().equals(getFrequency())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherRecurring.getOccurrence() \u003d\u003d (getOccurrence());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Returns true if both recurrings have the same identity and data fields."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * This defines a stronger notion of equality between two recurrings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        if (!(other instanceof Recurring)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        Recurring otherRecurring \u003d (Recurring) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return otherRecurring.getName().equals(getName())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 otherRecurring.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 otherRecurring.getDate().equals(getDate())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 otherRecurring.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 otherRecurring.getRemarks().equals(getRemarks())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 otherRecurring.getFrequency().equals(getFrequency())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherRecurring.getOccurrence() \u003d\u003d (getOccurrence());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, amount, date, category, remarks, frequency, occurrence);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                .append(name)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                .append(amount)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                .append(category);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            builder.append(\" Date: \")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                    .append(date);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!remarks.equals(\"\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            builder.append(\" Remarks: \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                    .append(remarks);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        builder.append(\" Frequency: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                .append(frequency)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Occurrence: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(occurrence);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jhocx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 94,
      "gohyinhao": 7,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recurring/RecurringList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jhocx"
        },
        "content": "package seedu.address.model.recurring;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A list of recurring expenses that does not allow nulls. Duplicates are not allowed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * @see Recurring"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jhocx"
        },
        "content": "public class RecurringList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    private final ObservableList\u003cRecurring\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    private final ObservableList\u003cRecurring\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Returns true if the list contains an equivalent recurring as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public boolean contains(Recurring toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecurring);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Adds a recurring to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * The recurring must not already exist in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void add(Recurring toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            throw new DuplicateRecurringException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Replaces the recurring {@code target} in the list with {@code editedRecurring}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * The recurring identity of {@code editedRecurring} must not be the same as another existing recurring in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void setRecurring(Recurring target, Recurring editedRecurring) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireAllNonNull(target, editedRecurring);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            throw new RecurringNotFoundException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        internalList.set(index, editedRecurring);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void setRecurring(RecurringList replacement) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Replaces the contents of this list with {@code recurrings}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * {@code recurrings} may contain duplicate recurrings."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void setRecurring(List\u003cRecurring\u003e recurrings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireAllNonNull(recurrings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        internalList.setAll(recurrings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Removes the equivalent recurring from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * The recurring must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void remove(Recurring toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new RecurringNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public ObservableList\u003cRecurring\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public Iterator\u003cRecurring\u003e iterator() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                || (other instanceof RecurringList // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                \u0026\u0026 internalList.equals(((RecurringList) other).internalList));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jhocx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 89,
      "gohyinhao": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recurring/RecurringNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jhocx"
        },
        "content": "package seedu.address.model.recurring;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jhocx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jhocx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jhocx"
        },
        "content": " * Signals that the operation is unable to find the specified buget."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jhocx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jhocx"
        },
        "content": "public class RecurringNotFoundException extends RuntimeException{}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Contains utility methods for populating {@code FinanceTracker} with sample data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static Expense[] getSampleExpenses() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return new Expense[] {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            new Expense(new Name(\"Chicken Rice\"), new Amount(\"1021\"), new Date(\"11-12-2018\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Category.FOOD, \"Bishan Chicken Rice\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            new Expense(new Name(\"Laksa\"), new Amount(\"520\"), new Date(\"03-02-2019\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Category.FOOD, null),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            new Expense(new Name(\"Japan Ticket\"), new Amount(\"62040\"), new Date(\"21-01-2019\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Category.TRAVEL, null),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            new Expense(new Name(\"Top up EZ link card\"), new Amount(\"2000\"), new Date(\"03-03-2019\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Category.TRANSPORT, \"Topped up at KR MRT\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            new Expense(new Name(\"See doctor\"), new Amount(\"6520\"), new Date(\"26-02-2019\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Category.HEALTHCARE, \"For fever at UHC\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            new Expense(new Name(\"Telephone bills\"), new Amount(\"2510\"), new Date(\"28-02-2019\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Category.UTILITIES, \"Exceeded limit by 1 GB\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static ReadOnlyFinanceTracker getSampleFinanceTracker() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        FinanceTracker sampleAb \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            sampleAb.addExpense(sampleExpense);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 23,
      "jhocx": 2,
      "zht96830": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/FinanceTrackerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Represents a storage for {@link FinanceTracker}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface FinanceTrackerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns FinanceTracker data as a {@link ReadOnlyFinanceTracker}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getFinanceTrackerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyFinanceTracker} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param financeTracker cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveFinanceTracker(ReadOnlyFinanceTracker)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExpense.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Jackson-friendly version of {@link Expense}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jhocx"
        },
        "content": "class JsonAdaptedExpense {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final String remarks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given expense details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"name\") String name, @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                              @JsonProperty(\"date\") String date, @JsonProperty(\"category\") String category,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                              @JsonProperty(\"remarks\") String remarks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public JsonAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        category \u003d source.getCategory().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        remarks \u003d source.getRemarks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code Expense} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                    Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!Category.isValid(category)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        final Category modelCategory \u003d Category.valueOf(category.toUpperCase());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        final String modelRemarks \u003d remarks;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return new Expense(modelName, modelAmount, modelDate, modelCategory, modelRemarks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 7,
      "gohyinhao": 38,
      "zht96830": 1,
      "jamessspanggg": 2,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonFinanceTrackerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A class to access FinanceTracker data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jhocx"
        },
        "content": "public class JsonFinanceTrackerStorage implements FinanceTrackerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFinanceTrackerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public JsonFinanceTrackerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return readFinanceTracker(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Similar to {@link #readFinanceTracker()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        Optional\u003cJsonSerializableFinanceTracker\u003e jsonFinanceTracker \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                filePath, JsonSerializableFinanceTracker.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        if (!jsonFinanceTracker.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            return Optional.of(jsonFinanceTracker.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        saveFinanceTracker(financeTracker, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Similar to {@link #saveFinanceTracker(ReadOnlyFinanceTracker)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        requireNonNull(financeTracker);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFinanceTracker(financeTracker), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 2,
      "jhocx": 18,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableFinanceTracker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * An Immutable FinanceTracker that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jhocx"
        },
        "content": "@JsonRootName(value \u003d \"financetracker\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jhocx"
        },
        "content": "class JsonSerializableFinanceTracker {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Constructs a {@code JsonSerializableFinanceTracker} with the given expenses."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public JsonSerializableFinanceTracker(@JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Converts a given {@code ReadOnlyFinanceTracker} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFinanceTracker}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public JsonSerializableFinanceTracker(ReadOnlyFinanceTracker source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenses.addAll(source.getExpenseList().stream().map(JsonAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jhocx"
        },
        "content": "     * Converts this finance tracker into the model\u0027s {@code FinanceTracker} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public FinanceTracker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        FinanceTracker financeTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        for (JsonAdaptedExpense jsonAdaptedExpense : expenses) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            Expense expense \u003d jsonAdaptedExpense.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            financeTracker.addExpense(expense);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return financeTracker;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 15,
      "jhocx": 5,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jhocx"
        },
        "content": "public interface Storage extends FinanceTrackerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 1,
      "jhocx": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Manages storage of FinanceTracker data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    private FinanceTrackerStorage financeTrackerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public StorageManager(FinanceTrackerStorage financeTrackerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        this.financeTrackerStorage \u003d financeTrackerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FinanceTracker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return financeTrackerStorage.getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return readFinanceTracker(financeTrackerStorage.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return financeTrackerStorage.readFinanceTracker(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        saveFinanceTracker(financeTracker, financeTrackerStorage.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        financeTrackerStorage.saveFinanceTracker(financeTracker, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 3,
      "jhocx": 12,
      "jamessspanggg": 2,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cExpense\u003e selectedPerson) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // Load expense page when selected expense changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            loadPersonPage(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private void loadPersonPage(Expense expense) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + expense.getName().name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 3,
      "jhocx": 1,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class BudgetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String FXML \u003d \"BudgetListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on FinanceTracker level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public final Budget budget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private HBox budgetCardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label budgetCategory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label budgetAmount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label budgetStartDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label budgetEndDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public BudgetCard(Budget budget) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        budgetCategory.setText(budget.getCategory().name());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        budgetAmount.setText(\"$\" + budget.getAmount().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        budgetStartDate.setText(budget.getStartDate().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        budgetEndDate.setText(budget.getEndDate().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (!(other instanceof BudgetCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        BudgetCard card \u003d (BudgetCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return budgetCategory.getText().equals(card.budgetCategory.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 budget.equals(card.budget);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class BudgetListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String FXML \u003d \"BudgetListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BudgetListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private ListView\u003cBudget\u003e budgetListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public BudgetListPanel(ObservableList\u003cBudget\u003e budgetList, ObservableValue\u003cBudget\u003e selectedBudget,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                           Consumer\u003cBudget\u003e onSelectedBudgetChange) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        budgetListView.setItems(budgetList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        budgetListView.setCellFactory(listView -\u003e new BudgetListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        budgetListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            logger.fine(\"Selection in budget list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            onSelectedBudgetChange.accept(newValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        selectedBudget.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            logger.fine(\"Selected budget changed to: \" + newValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected Budget,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            // otherwise we wouldgi have an infinite loop."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (Objects.equals(budgetListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                budgetListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                int index \u003d budgetListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                budgetListView.scrollTo(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                budgetListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Budget} using a {@code BudgetCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    class BudgetListViewCell extends ListCell\u003cBudget\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        protected void updateItem(Budget budget, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            super.updateItem(budget, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (empty || budget \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                setGraphic(new BudgetCard(budget).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DebtCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class DebtCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String FXML \u003d \"DebtListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on FinanceTracker level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public final Debt debt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private HBox debtCardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label borrowerName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label debtId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label debtAmount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label debtCategory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label debtDue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public DebtCard(Debt debt, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.debt \u003d debt;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        debtId.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        debtAmount.setText(\"$\" + debt.getAmount().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        borrowerName.setText(debt.getPersonOwed().name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        debtCategory.setText(debt.getCategory().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        debtDue.setText(debt.getDeadline().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (!(other instanceof DebtCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        DebtCard card \u003d (DebtCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return debtId.getText().equals(card.debtId.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 debt.equals(card.debt);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DebtListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class DebtListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String FXML \u003d \"DebtListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DebtListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private ListView\u003cDebt\u003e debtListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public DebtListPanel(ObservableList\u003cDebt\u003e debtList, ObservableValue\u003cDebt\u003e selectedDebt,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                         Consumer\u003cDebt\u003e onSelectedDebtChange) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        debtListView.setItems(debtList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        debtListView.setCellFactory(listView -\u003e new DebtListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        debtListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            logger.fine(\"Selection in debt list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            onSelectedDebtChange.accept(newValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        selectedDebt.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            logger.fine(\"Selected debt changed to: \" + newValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected expense,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            // otherwise we wouldgi have an infinite loop."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (Objects.equals(debtListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                debtListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                int index \u003d debtListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                debtListView.scrollTo(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                debtListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Debt} using a {@code DebtCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    class DebtListViewCell extends ListCell\u003cDebt\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        protected void updateItem(Debt debt, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            super.updateItem(debt, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (empty || debt \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                setGraphic(new DebtCard(debt, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on FinanceTracker level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private HBox expenseCardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label expenseName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label expenseId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label expenseAmount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label expenseCategory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label expenseDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expenseId.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expenseAmount.setText(\"$\" + expense.getAmount().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expenseName.setText(expense.getName().name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expenseCategory.setText(expense.getCategory().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expenseDate.setText(expense.getDate().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (!(other instanceof ExpenseCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        ExpenseCard card \u003d (ExpenseCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return expenseId.getText().equals(card.expenseId.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                \u0026\u0026 expense.equals(card.expense);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 4,
      "jamessspanggg": 18,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class ExpenseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenseListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public ExpenseListPanel(ObservableList\u003cExpense\u003e expenseList, ObservableValue\u003cExpense\u003e selectedExpense,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                            Consumer\u003cExpense\u003e onSelectedExpenseChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expenseListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            logger.fine(\"Selection in expense list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            onSelectedExpenseChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        selectedExpense.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            logger.fine(\"Selected expense changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected expense,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (Objects.equals(expenseListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                expenseListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                int index \u003d expenseListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                expenseListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                expenseListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expense} using a {@code ExpenseCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 6,
      "jamessspanggg": 20,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private ExpenseListPanel expenseListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private DebtListPanel debtListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private BudgetListPanel budgetListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private RecurringExpenseListPanel recurringListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private StackPane expenseListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private StackPane debtListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private StackPane budgetListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private StackPane recurringListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedExpenseProperty());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanel(logic.getFilteredExpenseList(), logic.selectedExpenseProperty(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                logic::setSelectedExpense);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expenseListPanelPlaceholder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        debtListPanel \u003d new DebtListPanel(logic.getFilteredDebtList(), logic.selectedDebtProperty(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                logic::setSelectedDebt);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        debtListPanelPlaceholder.getChildren().add(debtListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        budgetListPanel \u003d new BudgetListPanel(logic.getFilteredBudgetList(), logic.selectedBudgetProperty(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                logic::setSelectedBudget);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        budgetListPanelPlaceholder.getChildren().add(budgetListPanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        recurringListPanel \u003d new RecurringExpenseListPanel(logic.getFilteredRecurringList(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                logic.selectedRecurringProperty(), logic::setSelectedRecurring);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        recurringListPanelPlaceholder.getChildren().add(recurringListPanel.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                new StatusBarFooter(logic.getFinanceTrackerFilePath(), logic.getFinanceTracker());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public ExpenseListPanel getExpenseListPanel() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return expenseListPanel;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 25,
      "-": 204
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecurringExpenseCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * An UI component that displays information of a {@code Recurring}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class RecurringExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String FXML \u003d \"RecurringExpenseListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on FinanceTracker level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public final Recurring recurringExpense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private HBox recurringExpenseCardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label recurringExpenseName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label recurringExpenseId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label recurringExpenseAmount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label recurringExpenseCategory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Label recurringExpenseDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public RecurringExpenseCard(Recurring recurringExpense, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        this.recurringExpense \u003d recurringExpense;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        recurringExpenseId.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        recurringExpenseAmount.setText(\"$\" + recurringExpense.getAmount().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        recurringExpenseName.setText(recurringExpense.getName().name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        recurringExpenseCategory.setText(recurringExpense.getCategory().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        recurringExpenseDate.setText(recurringExpense.getDate().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (!(other instanceof RecurringExpenseCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        RecurringExpenseCard card \u003d (RecurringExpenseCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return recurringExpenseId.getText().equals(card.recurringExpenseId.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 recurringExpense.equals(card.recurringExpense);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecurringExpenseListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class RecurringExpenseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String FXML \u003d \"RecurringExpenseListPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecurringExpenseListPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private ListView\u003cRecurring\u003e recurringExpenseListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public RecurringExpenseListPanel(ObservableList\u003cRecurring\u003e recurringExpenseList,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                                     ObservableValue\u003cRecurring\u003e selectedRecurringExpense,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                                     Consumer\u003cRecurring\u003e onSelectedRecurringExpenseChange) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        recurringExpenseListView.setItems(recurringExpenseList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        recurringExpenseListView.setCellFactory(listView -\u003e new RecurringExpenseListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        recurringExpenseListView.getSelectionModel().selectedItemProperty().addListener((observable,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                                                                                         oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            logger.fine(\"Selection in recurring expense list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            onSelectedRecurringExpenseChange.accept(newValue);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        selectedRecurringExpense.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            logger.fine(\"Selected recurring expense changed to: \" + newValue);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected expense,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (Objects.equals(recurringExpenseListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                recurringExpenseListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                int index \u003d recurringExpenseListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                recurringExpenseListView.scrollTo(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                recurringExpenseListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Recurring} using a"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * {@code RecurringExpenseListCard}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    class RecurringExpenseListViewCell extends ListCell\u003cRecurring\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        protected void updateItem(Recurring recurring, boolean empty) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            super.updateItem(recurring, empty);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            if (empty || recurring \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                setGraphic(new RecurringExpenseCard(recurring, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyFinanceTracker financeTracker) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        financeTracker.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 1,
      "jamessspanggg": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/resources/view/BudgetListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cHBox id\u003d\"budgetCardPane\" fx:id\u003d\"budgetCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"50\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003cLabel id\u003d\"budgetCategory\" fx:id\u003d\"budgetCategory\" text\u003d\"\\$category\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cLabel id\u003d\"budgetAmount\" fx:id\u003d\"budgetAmount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cLabel id\u003d\"budgetStartDate\" fx:id\u003d\"budgetStartDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startdate\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cLabel id\u003d\"budgetEndDate\" fx:id\u003d\"budgetEndDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$enddate\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 6,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/BudgetListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   \u003cLabel id\u003d\"listTitle\" text\u003d\"Budgets\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cListView fx:id\u003d\"budgetListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 10
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ".split-pane:vertical .split-pane-divider {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "#listTitle {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    -fx-effect: dropshadow( three-pass-box , rgba(0,0,0,0.6) , 5, 0.0 , 0 , 1 );"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "#filterField, #expenseListPanel, #personWebpage {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 11,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/DebtListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cHBox id\u003d\"debtCardPane\" fx:id\u003d\"debtCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"50\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003cLabel id\u003d\"debtId\" fx:id\u003d\"debtId\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003cLabel id\u003d\"borrowerName\" fx:id\u003d\"borrowerName\" text\u003d\"\\$borrowername\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cLabel id\u003d\"debtAmount\" fx:id\u003d\"debtAmount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cLabel id\u003d\"debtDue\" fx:id\u003d\"debtDue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$due\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cLabel id\u003d\"debtCategory\" fx:id\u003d\"debtCategory\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 34
    }
  },
  {
    "path": "src/main/resources/view/DebtListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   \u003cLabel id\u003d\"listTitle\" text\u003d\"Debts\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cListView fx:id\u003d\"debtListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 10
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cHBox id\u003d\"expenseCardPane\" fx:id\u003d\"expenseCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"50\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003cLabel id \u003d \"expenseId\" fx:id\u003d\"expenseId\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003cLabel id \u003d \"expenseName\" fx:id\u003d\"expenseName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cLabel id \u003d \"expenseAmount\" fx:id\u003d\"expenseAmount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cLabel id \u003d \"expenseDate\" fx:id\u003d\"expenseDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cLabel id \u003d \"expenseCategory\" fx:id\u003d\"expenseCategory\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 7,
      "-": 27
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   \u003cLabel id\u003d\"listTitle\" text\u003d\"Expenses\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cListView fx:id\u003d\"expenseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 4,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"1280\" minHeight\u003d\"720\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.2, 0.8\"  VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          \u003cSplitPane id\u003d\"splitPaneExpenses\" orientation\u003d\"VERTICAL\" dividerPositions\u003d\"0.7\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            \u003cVBox fx:id\u003d\"expenseList\" minWidth\u003d\"100\" prefWidth\u003d\"100\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              \u003cStackPane fx:id\u003d\"expenseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            \u003cVBox fx:id\u003d\"recurringExpenseList\" minWidth\u003d\"50\" prefWidth\u003d\"50\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              \u003cStackPane fx:id\u003d\"recurringListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"400\" \u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            \u003cSplitPane id\u003d\"splitPaneExpenses\" orientation\u003d\"VERTICAL\" dividerPositions\u003d\"0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              \u003cVBox fx:id\u003d\"debtList\" minWidth\u003d\"150\" prefWidth\u003d\"150\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                  \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u003cStackPane fx:id\u003d\"debtListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              \u003cVBox fx:id\u003d\"budgetList\" minWidth\u003d\"150\" prefWidth\u003d\"150\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                  \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u003cStackPane fx:id\u003d\"budgetListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 36,
      "-": 65
    }
  },
  {
    "path": "src/main/resources/view/RecurringExpenseListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cHBox id\u003d\"recurringExpenseCardPane\" fx:id\u003d\"recurringExpenseCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"50\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003cLabel id\u003d\"recurringExpenseId\" fx:id\u003d\"recurringExpenseId\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        \u003cLabel id\u003d\"recurringExpenseName\" fx:id\u003d\"recurringExpenseName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cLabel id\u003d\"recurringExpenseAmount\" fx:id\u003d\"recurringExpenseAmount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cLabel id\u003d\"recurringExpenseDate\" fx:id\u003d\"recurringExpenseDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "      \u003cLabel id\u003d\"recurringExpenseCategory\" fx:id\u003d\"recurringExpenseCategory\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 35
    }
  },
  {
    "path": "src/main/resources/view/RecurringExpenseListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "   \u003cLabel id\u003d\"listTitle\" text\u003d\"Recurring Expenses\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "  \u003cListView fx:id\u003d\"recurringExpenseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 10
    }
  },
  {
    "path": "src/test/data/JsonFinanceTrackerStorageTest/invalidAndValidExpenseFinanceTracker.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  \"expenses\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"name\": \"Valid Expense\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"amount\": \"5.00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"date\": \"01-01-2018\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"category\": \"FOOD\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"remarks\": \"\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"name\": \"Person With Invalid Amount Field\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"amount\": \"948asdf2424\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"date\": \"05-05-2018\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"category\": \"FOOD\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"remarks\": \"\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 15
    }
  },
  {
    "path": "src/test/data/JsonFinanceTrackerStorageTest/invalidExpenseFinanceTracker.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  \"expenses\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"amount\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"date\": \"invalid-date\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"category\": \"invalid-category\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"remarks\": \"\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 9
    }
  },
  {
    "path": "src/test/data/JsonSerializableFinanceTrackerTest/invalidExpenseFinanceTracker.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  \"expenses\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"name\": \"Chicken Rice\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"amount\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"date\": \"invalid-date\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"category\": \"invalid-category\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableFinanceTrackerTest/typicalExpensesFinanceTracker.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  \"_comment\": \"FinanceTracker save file which contains the same Expense values as in TypicalExpenses#getTypicalFinanceTrackerWithExpenses()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  \"expenses\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"name\" : \"Duck Rice\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"amount\" : \"3.50\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"date\" : \"01-01-2019\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"category\" : \"food\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"remarks\" : \"\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"name\" : \"Taxi\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"amount\" : \"17.20\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"date\" : \"05-01-2019\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"category\" : \"transport\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"remarks\" : \"from NUS to Home\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"name\" : \"Groceries from NTUC\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"amount\" : \"57.30\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"date\" : \"08-01-2019\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"category\" : \"shopping\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"remarks\" : \"fish, eggs, chicken, beef, oyster sauce\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"name\" : \"new ASUS laptop\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"amount\" : \"1300\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"date\" : \"15-12-2018\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"category\" : \"work\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    \"remarks\" : \"may get reimbursed\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"name\" : \"Phone bills\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"amount\" : \"20\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"date\" : \"31-01-2019\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"category\" : \"utilities\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"remarks\" : \"\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"name\" : \"doctor consultation\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"amount\" : \"30.50\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"date\" : \"15-01-2019\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"category\" : \"healthcare\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"remarks\" : \"down with flu\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"name\" : \"new Panasonic TV\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"amount\" : \"750.00\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"date\" : \"21-07-2017\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"category\" : \"ENTERTAINMENT\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    \"remarks\" : \"\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 45,
      "jamessspanggg": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  \"financeTrackerFilePath\" : \"financetracker.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "  \"financeTrackerFilePath\" : \"financetracker.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BudgetCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Provides a handle to a budget card in the budget list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class BudgetCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#budgetId\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String AMOUNT_FIELD_ID \u003d \"#budgetAmount\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String CATEGORY_FIELD_ID \u003d \"#budgetCategory\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String START_DATE_FIELD_ID \u003d \"#budgetStartDate\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String END_DATE_FIELD_ID \u003d \"#budgetEndDate\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label amountLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label categoryLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label startDateLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label endDateLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public BudgetCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        amountLabel \u003d getChildNode(AMOUNT_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        categoryLabel \u003d getChildNode(CATEGORY_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        startDateLabel \u003d getChildNode(START_DATE_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        endDateLabel \u003d getChildNode(END_DATE_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getAmount() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return amountLabel.getText();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return categoryLabel.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return startDateLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return endDateLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns true if this handle contains {@code budget}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public boolean equals(Budget budget) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return getAmount().equals(budget.getAmount().value)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 getCategory().equals(budget.getCategory().toString())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 getStartDate().equals(budget.getStartDate().toString())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 getEndDate().equals(budget.getEndDate().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 62
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BudgetListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Provides a handle for {@code BudgetListPanel} containing the list of {@code BudgetCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class BudgetListPanelHandle extends NodeHandle\u003cListView\u003cBudget\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public static final String BUDGET_LIST_VIEW_ID \u003d \"#budgetListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#budgetCardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Optional\u003cBudget\u003e lastRememberedSelectedBudgetCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public BudgetListPanelHandle(ListView\u003cBudget\u003e budgetListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(budgetListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns a handle to the selected {@code BudgetCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public BudgetCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cBudget\u003e selectedBudgetList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (selectedBudgetList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            throw new AssertionError(\"Budget list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .map(BudgetCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedBudgetList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cBudget\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Navigates the listview to display {@code budget}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void navigateToCard(Budget budget) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (!getRootNode().getItems().contains(budget)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            throw new IllegalArgumentException(\"Budget does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            getRootNode().scrollTo(budget);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Selects the {@code BudgetCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns the budget card handle of a budget associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public BudgetCardHandle getBudgetCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .map(BudgetCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .filter(handle -\u003e handle.equals(getBudget(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Budget getBudget(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Remembers the selected {@code BudgetCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void rememberSelectedBudgetCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cBudget\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            lastRememberedSelectedBudgetCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            lastRememberedSelectedBudgetCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns true if the selected {@code BudgetCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * {@code rememberSelectedBudgetCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public boolean isSelectedBudgetCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cBudget\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return lastRememberedSelectedBudgetCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return !lastRememberedSelectedBudgetCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                    || !lastRememberedSelectedBudgetCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 39,
      "-": 120
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DebtCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Provides a handle to a debt card in the debt list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class DebtCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#debtId\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#borrowerName\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String AMOUNT_FIELD_ID \u003d \"#debtAmount\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String CATEGORY_FIELD_ID \u003d \"#debtCategory\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String DUE_DATE_FIELD_ID \u003d \"#debtDue\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label amountLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label categoryLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label dueDateLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public DebtCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        amountLabel \u003d getChildNode(AMOUNT_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        categoryLabel \u003d getChildNode(CATEGORY_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        dueDateLabel \u003d getChildNode(DUE_DATE_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getAmount() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return amountLabel.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return categoryLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getDueDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return dueDateLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns true if this handle contains {@code debt}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public boolean equals(Debt debt) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return getName().equals(debt.getPersonOwed())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 getAmount().equals(debt.getAmount().value)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 getCategory().equals(debt.getCategory().toString())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 getDueDate().equals(debt.getDeadline().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 62
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DebtListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Provides a handle for {@code DebtListPanel} containing the list of {@code DebtCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class DebtListPanelHandle extends NodeHandle\u003cListView\u003cDebt\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public static final String DEBT_LIST_VIEW_ID \u003d \"#debtListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#debtCardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Optional\u003cDebt\u003e lastRememberedSelectedDebtCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public DebtListPanelHandle(ListView\u003cDebt\u003e debtListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(debtListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns a handle to the selected {@code DebtCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public DebtCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cDebt\u003e selectedDebtList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (selectedDebtList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            throw new AssertionError(\"Debt list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .map(DebtCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedDebtList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cDebt\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Navigates the listview to display {@code debt}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void navigateToCard(Debt debt) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (!getRootNode().getItems().contains(debt)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            throw new IllegalArgumentException(\"Debt does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            getRootNode().scrollTo(debt);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Selects the {@code DebtCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns the debt card handle of a debt associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public DebtCardHandle getDebtCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .map(DebtCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .filter(handle -\u003e handle.equals(getDebt(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Debt getDebt(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Remembers the selected {@code DebtCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void rememberSelectedDebtCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cDebt\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            lastRememberedSelectedDebtCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            lastRememberedSelectedDebtCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns true if the selected {@code DebtCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * {@code rememberSelectedDebtCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public boolean isSelectedDebtCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cDebt\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return lastRememberedSelectedDebtCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return !lastRememberedSelectedDebtCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                    || !lastRememberedSelectedDebtCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 42,
      "-": 117
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ExpenseCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Provides a handle to a expense card in the expense list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class ExpenseCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#expenseId\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#expenseName\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String AMOUNT_FIELD_ID \u003d \"#expenseAmount\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String CATEGORY_FIELD_ID \u003d \"#expenseCategory\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String DATE_FIELD_ID \u003d \"#expenseDate\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label amountLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label categoryLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label dateLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public ExpenseCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        amountLabel \u003d getChildNode(AMOUNT_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        categoryLabel \u003d getChildNode(CATEGORY_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        dateLabel \u003d getChildNode(DATE_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getAmount() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return amountLabel.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return categoryLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return dateLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns true if this handle contains {@code expense}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public boolean equals(Expense expense) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return getName().equals(expense.getName().name)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 getAmount().equals(\"$\" + expense.getAmount().toString())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 getCategory().equals(expense.getCategory().toString())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 getDate().equals(expense.getDate().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 62
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ExpenseListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Provides a handle for {@code ExpenseListPanel} containing the list of {@code ExpenseCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class ExpenseListPanelHandle extends NodeHandle\u003cListView\u003cExpense\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public static final String EXPENSE_LIST_VIEW_ID \u003d \"#expenseListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#expenseCardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Optional\u003cExpense\u003e lastRememberedSelectedExpenseCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public ExpenseListPanelHandle(ListView\u003cExpense\u003e expenseListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(expenseListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns a handle to the selected {@code ExpenseCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public ExpenseCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        List\u003cExpense\u003e selectedExpenseList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (selectedExpenseList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"Expense list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .map(ExpenseCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedExpenseList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        List\u003cExpense\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Navigates the listview to display {@code expense}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void navigateToCard(Expense expense) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        if (!getRootNode().getItems().contains(expense)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new IllegalArgumentException(\"Expense does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            getRootNode().scrollTo(expense);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Selects the {@code ExpenseCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns the expense card handle of a expense associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public ExpenseCardHandle getExpenseCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .map(ExpenseCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .filter(handle -\u003e handle.equals(getExpense(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Expense getExpense(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Remembers the selected {@code ExpenseCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void rememberSelectedExpenseCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        List\u003cExpense\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            lastRememberedSelectedExpenseCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            lastRememberedSelectedExpenseCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns true if the selected {@code ExpenseCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * {@code rememberSelectedExpenseCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public boolean isSelectedExpenseCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        List\u003cExpense\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return lastRememberedSelectedExpenseCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return !lastRememberedSelectedExpenseCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                    || !lastRememberedSelectedExpenseCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 13,
      "jamessspanggg": 25,
      "-": 121
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final ExpenseListPanelHandle expenseListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanelHandle(getChildNode(ExpenseListPanelHandle.EXPENSE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public ExpenseListPanelHandle getExpenseListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return expenseListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RecurringCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Provides a handle to a recurring card in the recurring list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class RecurringCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#recurringExpenseId\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#recurringExpenseName\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String AMOUNT_FIELD_ID \u003d \"#recurringExpenseAmount\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String CATEGORY_FIELD_ID \u003d \"#recurringExpenseCategory\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String DATE_FIELD_ID \u003d \"#recurringExpenseDate\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label amountLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label categoryLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final Label dateLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public RecurringCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        amountLabel \u003d getChildNode(AMOUNT_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        categoryLabel \u003d getChildNode(CATEGORY_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        dateLabel \u003d getChildNode(DATE_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getAmount() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return amountLabel.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return categoryLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return dateLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns true if this handle contains {@code recurring}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public boolean equals(Recurring recurring) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return getName().equals(recurring.getName().name)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 getAmount().equals(recurring.getAmount().value)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 getCategory().equals(recurring.getCategory().toString())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                \u0026\u0026 getDate().equals(recurring.getDate().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 62
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RecurringListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " * Provides a handle for {@code RecurringListPanel} containing the list of {@code RecurringCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "public class RecurringListPanelHandle extends NodeHandle\u003cListView\u003cRecurring\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public static final String RECURRING_LIST_VIEW_ID \u003d \"#recurringExpenseListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#recurringExpenseCardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Optional\u003cRecurring\u003e lastRememberedSelectedRecurringCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public RecurringListPanelHandle(ListView\u003cRecurring\u003e recurringListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        super(recurringListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns a handle to the selected {@code RecurringCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public RecurringCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cRecurring\u003e selectedRecurringList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (selectedRecurringList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            throw new AssertionError(\"Recurring list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .map(RecurringCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedRecurringList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cRecurring\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Navigates the listview to display {@code recurring}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void navigateToCard(Recurring recurring) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (!getRootNode().getItems().contains(recurring)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            throw new IllegalArgumentException(\"Recurring does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            getRootNode().scrollTo(recurring);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Selects the {@code RecurringCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns the recurring card handle of a recurring associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public RecurringCardHandle getRecurringCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .map(RecurringCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .filter(handle -\u003e handle.equals(getRecurring(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Recurring getRecurring(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Remembers the selected {@code RecurringCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void rememberSelectedRecurringCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cRecurring\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            lastRememberedSelectedRecurringCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            lastRememberedSelectedRecurringCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns true if the selected {@code RecurringCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * {@code rememberSelectedRecurringCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public boolean isSelectedRecurringCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        List\u003cRecurring\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return lastRememberedSelectedRecurringCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            return !lastRememberedSelectedRecurringCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                    || !lastRememberedSelectedRecurringCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.storage.JsonFinanceTrackerStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    protected Supplier\u003cReadOnlyFinanceTracker\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyFinanceTracker\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            JsonFinanceTrackerStorage jsonAddressBookStorage \u003d new JsonFinanceTrackerStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                jsonAddressBookStorage.saveFinanceTracker(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public FinanceTracker readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            return new FinanceTracker(storage.readFinanceTracker().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"Data is not in the FinanceTracker format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        return storage.getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model copy \u003d new ModelManager((model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 9,
      "jhocx": 5,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.storage.JsonFinanceTrackerStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        JsonFinanceTrackerStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                new JsonFinanceTrackerStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        // Setup LogicManager with JsonFinanceTrackerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        JsonFinanceTrackerStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                new JsonFinanceTrackerIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                + DATE_DESC_EXPENSE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(EXPENSE).withRemarks(\"\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.addExpense(expectedExpense);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        logic.getFilteredExpenseList().remove(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jhocx"
        },
        "content": "    private static class JsonFinanceTrackerIoExceptionThrowingStub extends JsonFinanceTrackerStorage {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        private JsonFinanceTrackerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        public void saveFinanceTracker(ReadOnlyFinanceTracker addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 12,
      "jhocx": 7,
      "zht96830": 8,
      "-": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalFinanceTrackerWithExpenses;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.addExpense(validExpense);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandSuccess(new AddCommand(validExpense), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validExpense), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 9,
      "zht96830": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validExpense).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validExpense), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(Arrays.asList(validExpense), modelStub.personsAdded);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense alice \u003d new ExpenseBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense bob \u003d new ExpenseBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void setFinanceTrackerFilePath(Path financeTrackerFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void setFinanceTracker(ReadOnlyFinanceTracker financeTracker) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dExpense-related\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dDebt-related\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void addDebt(Debt debt) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public boolean hasDebt(Debt debt) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void deleteDebt(Debt target) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void setDebt(Debt target, Debt editedDebt) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ObservableList\u003cDebt\u003e getFilteredDebtList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void updateFilteredDebtList(Predicate\u003cDebt\u003e predicate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dBudget-related\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void deleteBudget(Budget target) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dRecurring-related\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void addRecurring(Recurring recurring) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public boolean hasRecurring(Recurring recurring) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void deleteRecurring(Recurring target) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void setRecurring(Recurring target, Recurring editedRecurring) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ObservableList\u003cRecurring\u003e getFilteredRecurringList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void updateFilteredRecurringList(Predicate\u003cRecurring\u003e predicate) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dHistory-Control-related\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public boolean canUndoFinanceTracker() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public boolean canRedoFinanceTracker() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void undoFinanceTracker() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void redoFinanceTracker() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void commitFinanceTracker() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ReadOnlyProperty\u003cExpense\u003e selectedExpenseProperty() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public Expense getSelectedExpense() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void setSelectedExpense(Expense expense) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ReadOnlyProperty\u003cDebt\u003e selectedDebtProperty() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public Debt getSelectedDebt() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void setSelectedDebt(Debt debt) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ReadOnlyProperty\u003cBudget\u003e selectedBudgetProperty() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public Budget getSelectedBudget() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void setSelectedBudget(Budget budget) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ReadOnlyProperty\u003cRecurring\u003e selectedRecurringProperty() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public Recurring getSelectedRecurring() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void setSelectedRecurring(Recurring recurring) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * A Model stub that contains a single expense."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        private final Expense expense;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ModelStubWithPerson(Expense expense) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            this.expense \u003d expense;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            return this.expense.isSameExpense(expense);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * A Model stub that always accept the expense being added."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        final ArrayList\u003cExpense\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            return personsAdded.stream().anyMatch(expense::isSameExpense);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            personsAdded.add(expense);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public void commitFinanceTracker() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            return new FinanceTracker();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 155,
      "zht96830": 1,
      "-": 234
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalFinanceTrackerWithExpenses;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.setFinanceTracker(new FinanceTracker());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 7,
      "zht96830": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.commands.debtcommands.EditDebtCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.EditDebtDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String VALID_NAME_EXPENSE \u003d \"Chicken Rice\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String VALID_NAME_DEBT \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String VALID_AMOUNT_EXPENSE \u003d \"11111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String VALID_AMOUNT_DEBT \u003d \"12345\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String VALID_CATEGORY_EXPENSE \u003d \"food\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final String VALID_CATEGORY_EXPENSE_2 \u003d \"transport\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String VALID_CATEGORY_DEBT \u003d \"shopping\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String VALID_DATE_EXPENSE \u003d \"03-03-2019\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String VALID_DATE_EXPENSE_2 \u003d \"12-03-2019\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String VALID_DEADLINE_DEBT \u003d \"05-05-2019\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String VALID_REMARKS_EXPENSE \u003d \"Bishan chicken rice\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String VALID_REMARKS_DEBT \u003d \"fan\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String NAME_DESC_EXPENSE \u003d \" \" + PREFIX_NAME + VALID_NAME_EXPENSE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String NAME_DESC_DEBT \u003d \" \" + PREFIX_NAME + VALID_NAME_DEBT;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String AMOUNT_DESC_EXPENSE \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_EXPENSE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String AMOUNT_DESC_DEBT \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_DEBT;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String CATEGORY_DESC_EXPENSE \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_EXPENSE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String CATEGORY_DESC_DEBT \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_DEBT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String DATE_DESC_EXPENSE \u003d \" \" + PREFIX_DATE + VALID_DATE_EXPENSE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String DATE_DESC_EXPENSE_2 \u003d \" \" + PREFIX_DATE + VALID_DATE_EXPENSE_2;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String DEADLINE_DESC_DEBT \u003d \" \" + PREFIX_DUE + VALID_DEADLINE_DEBT;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String REMARKS_DESC_EXPENSE \u003d \" \" + PREFIX_REMARKS + VALID_REMARKS_EXPENSE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String REMARKS_DESC_DEBT \u003d \" \" + PREFIX_REMARKS + VALID_REMARKS_DEBT;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY + \"fod\"; // not one of enum values"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"142-121-012\"; // must be dd-MM-yyyy"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DUE + \"12-1213-01\"; // must be dd-MM-yyyy"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final EditCommand.EditExpenseDescriptor DESC_EXPENSE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final EditDebtCommand.EditDebtDescriptor DESC_DEBT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        DESC_EXPENSE \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_EXPENSE)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withAmount(VALID_AMOUNT_EXPENSE).withCategory(VALID_CATEGORY_EXPENSE).withDate(VALID_DATE_EXPENSE)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withRemarks(VALID_REMARKS_DEBT).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        DESC_DEBT \u003d new EditDebtDescriptorBuilder().withPersonOwed(VALID_NAME_DEBT)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withAmount(VALID_AMOUNT_DEBT).withCategory(VALID_CATEGORY_DEBT).withDeadline(VALID_DEADLINE_DEBT)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withRemarks(VALID_REMARKS_DEBT).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * - the address book, filtered expense list and selected expense in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        FinanceTracker expectedFinanceTracker \u003d new FinanceTracker(actualModel.getFinanceTracker());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        List\u003cExpense\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense expectedSelectedExpense \u003d actualModel.getSelectedExpense();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            assertEquals(expectedFinanceTracker, actualModel.getFinanceTracker());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            assertEquals(expectedSelectedExpense, actualModel.getSelectedExpense());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expense at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense expense \u003d model.getFilteredExpenseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        final String[] splitName \u003d expense.getName().name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.updateFilteredExpenseList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(1, model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Deletes the first expense in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenseList().get(0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.deleteExpense(firstExpense);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 48,
      "jhocx": 1,
      "zht96830": 3,
      "lim-jiahui": 10,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalFinanceTrackerWithExpenses;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getExpenseList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // delete -\u003e first expense deleted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered expense list to show all persons"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // redo -\u003e same first expense deleted again"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * 1. Deletes a {@code Expense} from a filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted expense in the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the expense object regardless of indexing."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // delete -\u003e deletes second expense in unfiltered expense list / first expense in filtered expense list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered expense list to show all persons"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertNotEquals(expenseToDelete, model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // redo -\u003e deletes same second expense in unfiltered expense list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.updateFilteredExpenseList(p -\u003e false);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(model.getFilteredExpenseList().isEmpty());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 32,
      "zht96830": 7,
      "jamessspanggg": 18,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_DEBT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DEBT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARKS_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalFinanceTrackerWithExpenses;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense lastExpense \u003d model.getFilteredExpenseList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ExpenseBuilder personInList \u003d new ExpenseBuilder(lastExpense);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense editedExpense \u003d personInList.withName(VALID_NAME_DEBT).withAmount(VALID_AMOUNT_DEBT)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withRemarks(VALID_REMARKS_EXPENSE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_DEBT)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withAmount(VALID_AMOUNT_DEBT).withRemarks(VALID_REMARKS_EXPENSE).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.setExpense(lastExpense, editedExpense);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, new EditCommand.EditExpenseDescriptor());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Expense editedExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Expense expenseInFilteredList \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(expenseInFilteredList).withName(VALID_NAME_DEBT).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                new EditExpenseDescriptorBuilder().withName(VALID_NAME_DEBT).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withName(VALID_NAME_DEBT).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getExpenseList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                new EditExpenseDescriptorBuilder().withName(VALID_NAME_DEBT).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Expense expenseToEdit \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // edit -\u003e first expense edited"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered expense list to show all persons"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // redo -\u003e same first expense edited again"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withName(VALID_NAME_DEBT).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * 1. Edits a {@code Expense} from a filtered list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited expense in the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the expense object regardless of indexing."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Expense expenseToEdit \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // edit -\u003e edits second expense in unfiltered expense list / first expense in filtered expense list"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered expense list to show all persons"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertNotEquals(model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased()), expenseToEdit);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // redo -\u003e edits same second expense in unfiltered expense list"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, DESC_EXPENSE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor copyDescriptor \u003d new EditCommand.EditExpenseDescriptor(DESC_EXPENSE);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_EXPENSE, copyDescriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_EXPENSE, DESC_EXPENSE)));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        EditCommand.EditExpenseDescriptor differentDescriptor \u003d new EditCommand.EditExpenseDescriptor();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_EXPENSE, differentDescriptor)));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 58,
      "jhocx": 2,
      "zht96830": 7,
      "jamessspanggg": 17,
      "lim-jiahui": 11,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditExpenseDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_DEBT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_DEBT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_DEBT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_DEBT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DEBT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARKS_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.commands.expensecommands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.commands.expensecommands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class EditExpenseDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptorWithSameValues \u003d new EditExpenseDescriptor(DESC_EXPENSE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(DESC_EXPENSE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(DESC_EXPENSE.equals(DESC_EXPENSE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DESC_EXPENSE.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DESC_EXPENSE.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DESC_EXPENSE.equals(DESC_DEBT));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_EXPENSE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withName(VALID_NAME_DEBT).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DESC_EXPENSE.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_EXPENSE).withAmount(VALID_AMOUNT_DEBT).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DESC_EXPENSE.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_EXPENSE).withCategory(VALID_CATEGORY_DEBT).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DESC_EXPENSE.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_EXPENSE).withDate(VALID_DEADLINE_DEBT).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DESC_EXPENSE.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_EXPENSE).withRemarks(VALID_REMARKS_EXPENSE).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DESC_EXPENSE.equals(editedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 25,
      "zht96830": 3,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.generalcommands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.DOCTOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.GROCERIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TAXI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalFinanceTrackerWithExpenses;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"TAXI GROCERIES DOCTOR \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        assertEquals(Arrays.asList(TAXI, GROCERIES, DOCTOR), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 11,
      "jhocx": 3,
      "zht96830": 2,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.generalcommands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.HistoryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalFinanceTrackerWithExpenses;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 3,
      "jamessspanggg": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalFinanceTrackerWithExpenses;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.RedoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.undoFinanceTracker();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.undoFinanceTracker();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 9,
      "zht96830": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalFinanceTrackerWithExpenses;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_EXPENSE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getFinanceTracker().getExpenseList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * and checks that the model\u0027s selected expense is set to the expense at {@code index} in the filtered expense list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.setSelectedExpense(model.getFilteredExpenseList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 8,
      "zht96830": 3,
      "jamessspanggg": 14,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalFinanceTrackerWithExpenses;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalFinanceTrackerWithExpenses(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 5,
      "zht96830": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_EXPENSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_EXPENSE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_EXPENSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EXPENSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EXPENSE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARKS_EXPENSE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CHICKEN_RICE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.EXPENSE_WITHOUT_REMARKS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.expenseparsers.AddCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(CHICKEN_RICE).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                + DATE_DESC_EXPENSE + REMARKS_DESC_EXPENSE, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                + DATE_DESC_EXPENSE + REMARKS_DESC_EXPENSE, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                + CATEGORY_DESC_EXPENSE + DATE_DESC_EXPENSE + REMARKS_DESC_EXPENSE, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE + DATE_DESC_EXPENSE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                + DATE_DESC_EXPENSE + REMARKS_DESC_EXPENSE, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Expense expectedExpenseMultipleTags \u003d new ExpenseBuilder(CHICKEN_RICE).withRemarks(VALID_REMARKS_EXPENSE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE + DATE_DESC_EXPENSE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                + REMARKS_DESC_EXPENSE + REMARKS_DESC_EXPENSE, new AddCommand(expectedExpenseMultipleTags));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(EXPENSE_WITHOUT_REMARKS).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE + DATE_DESC_EXPENSE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_EXPENSE + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                        + DATE_DESC_EXPENSE, expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        // missing category prefix"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_EXPENSE + VALID_CATEGORY_EXPENSE + DATE_DESC_EXPENSE"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                + AMOUNT_DESC_EXPENSE, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_EXPENSE + VALID_AMOUNT_EXPENSE + DATE_DESC_EXPENSE"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                + CATEGORY_DESC_EXPENSE, expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_EXPENSE + VALID_AMOUNT_EXPENSE + VALID_CATEGORY_EXPENSE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                        + VALID_DATE_EXPENSE, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE + DATE_DESC_EXPENSE"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                + REMARKS_DESC_EXPENSE + REMARKS_DESC_EXPENSE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                + REMARKS_DESC_EXPENSE + REMARKS_DESC_EXPENSE, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                + DATE_DESC_EXPENSE + REMARKS_DESC_EXPENSE + REMARKS_DESC_EXPENSE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 5,
      "jhocx": 1,
      "zht96830": 46,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.expenseparsers.DeleteCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 2,
      "jamessspanggg": 2,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_EXPENSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_EXPENSE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_EXPENSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EXPENSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EXPENSE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARKS_EXPENSE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.parser.expenseparsers.EditCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_EXPENSE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_EXPENSE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_EXPENSE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        //Deadline not required for editexpense command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        //assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_CATEGORY_DESC + VALID_DATE_EXPENSE"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                        + VALID_AMOUNT_EXPENSE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public void parse_necessaryFieldsSpecified_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_EXPENSE"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                + CATEGORY_DESC_EXPENSE + DATE_DESC_EXPENSE + NAME_DESC_EXPENSE + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_EXPENSE)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                .withAmount(VALID_AMOUNT_EXPENSE).withCategory(VALID_CATEGORY_EXPENSE).withDate(VALID_DATE_EXPENSE)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withRemarks(VALID_REMARKS_EXPENSE).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                .withAmount(VALID_AMOUNT_EXPENSE).withCategory(VALID_CATEGORY_EXPENSE).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_EXPENSE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withName(VALID_NAME_EXPENSE).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_EXPENSE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_EXPENSE).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_EXPENSE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withCategory(VALID_CATEGORY_EXPENSE).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_EXPENSE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withDate(VALID_DATE_EXPENSE).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withRemarks(VALID_REMARKS_EXPENSE).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_EXPENSE + DATE_DESC_EXPENSE + CATEGORY_DESC_EXPENSE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                + REMARKS_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + DATE_DESC_EXPENSE + CATEGORY_DESC_EXPENSE"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withAmount(VALID_AMOUNT_EXPENSE).withCategory(VALID_CATEGORY_EXPENSE)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withDate(VALID_DATE_EXPENSE).withRemarks(VALID_REMARKS_EXPENSE).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_AMOUNT_DESC + AMOUNT_DESC_EXPENSE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                .withAmount(VALID_AMOUNT_EXPENSE).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_EXPENSE + INVALID_AMOUNT_DESC + DATE_DESC_EXPENSE"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                + AMOUNT_DESC_EXPENSE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_EXPENSE)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                .withCategory(VALID_CATEGORY_EXPENSE).withDate(VALID_DATE_EXPENSE).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 29,
      "jhocx": 2,
      "zht96830": 33,
      "jamessspanggg": 8,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FinanceTrackerParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class FinanceTrackerParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    private final FinanceTrackerParser parser \u003d new FinanceTrackerParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ExpenseUtil.getAddCommand(expense));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(new AddCommand(expense), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_EXPENSE), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                + INDEX_FIRST_EXPENSE.getOneBased() + \" \" + ExpenseUtil.getEditExpenseDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_EXPENSE, descriptor), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_EXPENSE), command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 9,
      "zht96830": 11,
      "jamessspanggg": 7,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zht96830": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAmount((String) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(INVALID_PHONE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_PHONE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(VALID_PHONE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_PHONE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(phoneWithWhitespace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory((String) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_EMAIL));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 4,
      "zht96830": 8,
      "jamessspanggg": 3,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/FinanceTrackerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARKS_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.DUCK_RICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalFinanceTrackerWithExpenses;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.recurring.Recurring;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class FinanceTrackerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final FinanceTracker financeTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(Collections.emptyList(), financeTracker.getExpenseList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void resetData_withValidReadOnlyFinanceTracker_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        FinanceTracker newData \u003d getTypicalFinanceTrackerWithExpenses();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(newData, financeTracker);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker.hasExpense(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void hasExpense_expenseNotInFinanceTracker_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(financeTracker.hasExpense(DUCK_RICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void hasExpense_expenseInFinanceTracker_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(financeTracker.hasExpense(DUCK_RICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void hasExpense_expenseWithSameIdentityFieldsInFinanceTracker_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(DUCK_RICE).withCategory(VALID_CATEGORY_EXPENSE)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withRemarks(VALID_REMARKS_EXPENSE).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(financeTracker.hasExpense(editedExpense));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void getExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker.getExpenseList().remove(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker.addListener(listener);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker.addListener(listener);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker.removeListener(listener);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * A stub ReadOnlyFinanceTracker whose expenses list can violate interface constraints."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static class FinanceTrackerStub implements ReadOnlyFinanceTracker {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        private final ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        private final ObservableList\u003cDebt\u003e debts \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        private final ObservableList\u003cBudget\u003e budgets \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        private final ObservableList\u003cRecurring\u003e recurrings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        FinanceTrackerStub(Collection\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            this.expenses.setAll(expenses);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            return expenses;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ObservableList\u003cDebt\u003e getDebtList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            return debts;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            return budgets;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        public ObservableList\u003cRecurring\u003e getRecurringList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            return recurrings;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 60,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.DOCTOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.DUCK_RICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TAXI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.person.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.testutil.FinanceTrackerBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(new FinanceTracker(), new FinanceTracker(modelManager.getFinanceTracker()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(null, modelManager.getSelectedExpense());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setFinanceTrackerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.setFinanceTrackerFilePath(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setFinanceTrackerFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.setFinanceTrackerFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(path, modelManager.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.hasExpense(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void hasExpense_expenseNotInFinanceTracker_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(modelManager.hasExpense(DUCK_RICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void hasExpense_expenseInFinanceTracker_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(modelManager.hasExpense(DUCK_RICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void deleteExpense_expenseIsSelectedAndFirstExpenseInFilteredExpenseList_selectionCleared() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.setSelectedExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.deleteExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(null, modelManager.getSelectedExpense());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void deleteExpense_expenseIsSelectedAndSecondExpenseInFilteredExpenseList_firstExpenseSelected() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.addExpense(DOCTOR);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(Arrays.asList(DUCK_RICE, DOCTOR), modelManager.getFilteredExpenseList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.setSelectedExpense(DOCTOR);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.deleteExpense(DOCTOR);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(DUCK_RICE, modelManager.getSelectedExpense());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpense_expenseIsSelected_selectedExpenseUpdated() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.setSelectedExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense updatedExpense \u003d new ExpenseBuilder(DUCK_RICE).withDate(VALID_DATE_EXPENSE).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.setExpense(DUCK_RICE, updatedExpense);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(updatedExpense, modelManager.getSelectedExpense());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.getFilteredExpenseList().remove(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setSelectedExpense_expenseNotInFilteredExpenseList_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        thrown.expect(ExpenseNotFoundException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.setSelectedExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setSelectedExpense_expenseInFilteredExpenseList_setsSelectedExpense() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(Collections.singletonList(DUCK_RICE), modelManager.getFilteredExpenseList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.setSelectedExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(DUCK_RICE, modelManager.getSelectedExpense());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        FinanceTracker financeTracker \u003d new FinanceTrackerBuilder().withExpense(DUCK_RICE).withExpense(TAXI).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        FinanceTracker differentFinanceTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager \u003d new ModelManager(financeTracker, userPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(financeTracker, userPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different financeTracker -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFinanceTracker, userPrefs)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String[] keywords \u003d DUCK_RICE.getName().name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.updateFilteredExpenseList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(financeTracker, userPrefs)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        modelManager.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        differentUserPrefs.setFinanceTrackerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(financeTracker, differentUserPrefs)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 63,
      "jamessspanggg": 1,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setFinanceTrackerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setFinanceTrackerFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedFinanceTrackerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.GROCERIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.JAPAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.FinanceTrackerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class VersionedFinanceTrackerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final ReadOnlyFinanceTracker financeTrackerWithExpense \u003d new FinanceTrackerBuilder().withExpense("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            EXPENSE).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final ReadOnlyFinanceTracker financeTrackerWithJapan \u003d new FinanceTrackerBuilder().withExpense("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            JAPAN).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private final ReadOnlyFinanceTracker financeTrackerWithGroceries \u003d new FinanceTrackerBuilder().withExpense("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            GROCERIES).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final ReadOnlyFinanceTracker emptyFinanceTracker \u003d new FinanceTrackerBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void commit_singleFinanceTracker_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList(emptyFinanceTracker);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.commit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Collections.singletonList(emptyFinanceTracker),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void commit_multipleFinanceTrackerPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.commit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Arrays.asList(emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                financeTrackerWithJapan,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void commit_multipleFinanceTrackerPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.commit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Collections.singletonList(emptyFinanceTracker),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void canUndo_multipleFinanceTrackerPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(versionedFinanceTracker.canUndo());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void canUndo_multipleFinanceTrackerPointerNotAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(versionedFinanceTracker.canUndo());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void canUndo_singleFinanceTracker_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList(emptyFinanceTracker);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(versionedFinanceTracker.canUndo());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void canUndo_multipleFinanceTrackerPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(versionedFinanceTracker.canUndo());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void canRedo_multipleFinanceTrackerPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(versionedFinanceTracker.canRedo());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void canRedo_multipleFinanceTrackerPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(versionedFinanceTracker.canRedo());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void canRedo_singleFinanceTracker_returnsFalse() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList(emptyFinanceTracker);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(versionedFinanceTracker.canRedo());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void canRedo_multipleFinanceTrackerPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(versionedFinanceTracker.canRedo());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void undo_multipleFinanceTrackerPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.undo();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Collections.singletonList(emptyFinanceTracker),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                financeTrackerWithExpense,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Collections.singletonList(financeTrackerWithJapan));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void undo_multipleFinanceTrackerPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.undo();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Arrays.asList(financeTrackerWithExpense, financeTrackerWithJapan));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void undo_singleFinanceTracker_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList(emptyFinanceTracker);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertThrows(VersionedFinanceTracker.NoUndoableStateException.class, versionedFinanceTracker::undo);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void undo_multipleFinanceTrackerPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertThrows(VersionedFinanceTracker.NoUndoableStateException.class, versionedFinanceTracker::undo);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void redo_multipleFinanceTrackerPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.redo();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Arrays.asList(emptyFinanceTracker, financeTrackerWithExpense),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                financeTrackerWithJapan,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void redo_multipleFinanceTrackerPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 2);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        versionedFinanceTracker.redo();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Collections.singletonList(emptyFinanceTracker),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                financeTrackerWithExpense,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Collections.singletonList(financeTrackerWithJapan));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void redo_singleFinanceTracker_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList(emptyFinanceTracker);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertThrows(VersionedFinanceTracker.NoRedoableStateException.class, versionedFinanceTracker::redo);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void redo_multipleFinanceTrackerPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertThrows(VersionedFinanceTracker.NoRedoableStateException.class, versionedFinanceTracker::redo);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList(financeTrackerWithExpense,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                financeTrackerWithJapan);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker copy \u003d prepareFinanceTrackerList(financeTrackerWithExpense,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                financeTrackerWithJapan);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(versionedFinanceTracker.equals(copy));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(versionedFinanceTracker.equals(versionedFinanceTracker));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(versionedFinanceTracker.equals(null));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(versionedFinanceTracker.equals(1));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker differentFinanceTrackerList \u003d prepareFinanceTrackerList(financeTrackerWithJapan,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                financeTrackerWithGroceries);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(versionedFinanceTracker.equals(differentFinanceTrackerList));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker differentCurrentStatePointer \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                financeTrackerWithExpense, financeTrackerWithJapan);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(versionedFinanceTracker.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Asserts that {@code versionedFinanceTracker} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * states before {@code versionedFinanceTracker#currentStatePointer} is equal to"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * and states after {@code versionedFinanceTracker#currentStatePointer} is equal to"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private void assertFinanceTrackerListStatus(VersionedFinanceTracker versionedFinanceTracker,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                                                List\u003cReadOnlyFinanceTracker\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                                                ReadOnlyFinanceTracker expectedCurrentState,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                                                List\u003cReadOnlyFinanceTracker\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(new FinanceTracker(versionedFinanceTracker), expectedCurrentState);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        while (versionedFinanceTracker.canUndo()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            versionedFinanceTracker.undo();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        for (ReadOnlyFinanceTracker expectedFinanceTracker : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            assertEquals(expectedFinanceTracker, new FinanceTracker(versionedFinanceTracker));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            versionedFinanceTracker.redo();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        for (ReadOnlyFinanceTracker expectedFinanceTracker : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            versionedFinanceTracker.redo();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            assertEquals(expectedFinanceTracker, new FinanceTracker(versionedFinanceTracker));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(versionedFinanceTracker.canRedo());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedFinanceTracker.undo());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Creates and returns a {@code VersionedFinanceTracker} with the {@code financeTrackerStates} added into it,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * and the {@code VersionedFinanceTracker#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private VersionedFinanceTracker prepareFinanceTrackerList(ReadOnlyFinanceTracker... financeTrackerStates) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(financeTrackerStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d new VersionedFinanceTracker(financeTrackerStates[0]);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        for (int i \u003d 1; i \u003c financeTrackerStates.length; i++) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            versionedFinanceTracker.resetData(financeTrackerStates[i]);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            versionedFinanceTracker.commit();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return versionedFinanceTracker;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Shifts the {@code versionedFinanceTracker#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedFinanceTracker versionedFinanceTracker, int count) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            versionedFinanceTracker.undo();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 293,
      "jamessspanggg": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attributes/AmountTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public void constructorInvalidAmount_emptyString_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // invalid amount numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"amount\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"91p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"1.\")); // . without decimal places"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"1.234\")); // 3 decimal places, max 2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // valid amount numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1\")); // exactly 1 number"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"12345\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"124293842033123\")); // long amount numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.2\")); // 1 decimal place"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.23\")); // 2 decimal places"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 38,
      "jamessspanggg": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attributes/CategoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void isValidCategory() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Category.isValid(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // invalid Categories"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Category.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Category.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Category.isValid(\"transpot\")); // spelling error"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Category.isValid(\"91p041\")); // invalid category"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // valid Categories"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(Category.isValid(\"food\")); // in lower case"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(Category.isValid(\"SHOPPING\")); // in upper case"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(Category.isValid(\"HeAlThCaRe\")); // mixed case"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(Category.isValid(\"TRAvel\")); // mixed case"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attributes/DateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Date.isValidDate(\"01-01\")); // must be dd-mm-yyyy"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Date.isValidDate(\"01-01-18\")); // need 4 numbers for year, e.g. 2018"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Date.isValidDate(\"01-01-2018a\")); // alphabets not allowed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(Date.isValidDate(\"date\")); // non-numeric"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // valid dates"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(Date.isValidDate(\"01-01-2019\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(Date.isValidDate(\"31-12-1999\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // initialize dates in chronological order"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Date date1 \u003d new Date(\"01-01-2000\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Date date2 \u003d new Date(\"31-01-2000\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Date date3 \u003d new Date(\"10-12-2000\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Date date4 \u003d new Date(\"01-01-2015\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date1.compareTo(date1), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date1.compareTo(date2), -1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date1.compareTo(date3), -1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date1.compareTo(date4), -1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date2.compareTo(date1), 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date2.compareTo(date2), 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date2.compareTo(date3), -1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date2.compareTo(date4), -1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date3.compareTo(date1), 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date3.compareTo(date2), 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date3.compareTo(date3), 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date3.compareTo(date4), -1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date4.compareTo(date1), 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date4.compareTo(date2), 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date4.compareTo(date3), 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(date4.compareTo(date4), 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attributes/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/ExpenseListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARKS_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.DOCTOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.DUCK_RICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.person.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class ExpenseListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final ExpenseList expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void contains_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.contains(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void contains_expenseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(expenseList.contains(DUCK_RICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void contains_expenseInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(expenseList.contains(DUCK_RICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void contains_expenseWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // expenses just need to have same name, amount and date to be classified as the same"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(DUCK_RICE).withCategory(VALID_CATEGORY_EXPENSE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withRemarks(VALID_REMARKS_EXPENSE).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(expenseList.contains(editedExpense));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void add_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.add(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpense_nullTargetExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.setExpense(null, DUCK_RICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpense_nullEditedExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.setExpense(DUCK_RICE, null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpense_targetExpenseNotInList_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        thrown.expect(ExpenseNotFoundException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.setExpense(DUCK_RICE, DUCK_RICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpense_editedExpenseIsSameExpense_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.setExpense(DUCK_RICE, DUCK_RICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedExpenseList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(expectedExpenseList, expenseList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpense_editedExpenseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(DUCK_RICE).withCategory(VALID_CATEGORY_EXPENSE)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withRemarks(VALID_REMARKS_EXPENSE).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.setExpense(DUCK_RICE, editedExpense);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedExpenseList.add(editedExpense);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(expectedExpenseList, expenseList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpense_editedExpenseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.setExpense(DUCK_RICE, DOCTOR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedExpenseList.add(DOCTOR);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(expectedExpenseList, expenseList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpenses_nullExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.setExpenses((ExpenseList) null);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpenses_expenseList_replacesOwnListWithProvidedExpenseList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedExpenseList.add(DOCTOR);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.setExpenses(expectedExpenseList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(expectedExpenseList, expenseList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpenses_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.setExpenses((List\u003cExpense\u003e) null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void setExpenses_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        List\u003cExpense\u003e expenseList \u003d Collections.singletonList(DOCTOR);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.expenseList.setExpenses(expenseList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedExpenseList.add(DOCTOR);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(expectedExpenseList, this.expenseList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void remove_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.remove(null);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void remove_expenseDoesNotExist_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        thrown.expect(ExpenseNotFoundException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.remove(DUCK_RICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void remove_existingExpense_removesExpense() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.remove(DUCK_RICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(expectedExpenseList, expenseList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/ExpenseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_EXPENSE_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARKS_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.DOCTOR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.DUCK_RICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                new Expense(null, new Amount(\"1\"), new Date(\"01-01-2018\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                        Category.valueOf(\"FOOD\"), null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                new Expense(new Name(\"rice\"), null, new Date(\"01-01-2018\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                        Category.valueOf(\"FOOD\"), null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                new Expense(new Name(\"rice\"), new Amount(\"1\"), new Date(\"01-01-2018\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                        null, null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void isSameExpense() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(DUCK_RICE.isSameExpense(DUCK_RICE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DUCK_RICE.isSameExpense(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(DUCK_RICE).withName(VALID_NAME_EXPENSE).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DUCK_RICE.isSameExpense(editedExpense));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(DUCK_RICE).withAmount(VALID_AMOUNT_EXPENSE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DUCK_RICE.isSameExpense(editedExpense));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(DUCK_RICE).withDate(VALID_DATE_EXPENSE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DUCK_RICE.isSameExpense(editedExpense));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // same name, same amount, same date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(DUCK_RICE).withCategory(VALID_CATEGORY_EXPENSE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withRemarks(VALID_REMARKS_EXPENSE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(DUCK_RICE.isSameExpense(editedExpense));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense expenseCopy \u003d new ExpenseBuilder(DUCK_RICE).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(DUCK_RICE.equals(expenseCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(DUCK_RICE.equals(DUCK_RICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DUCK_RICE.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DUCK_RICE.equals(5));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DUCK_RICE.equals(DOCTOR));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(DUCK_RICE).withName(VALID_NAME_EXPENSE).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DUCK_RICE.equals(editedExpense));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(DUCK_RICE).withAmount(VALID_AMOUNT_EXPENSE).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DUCK_RICE.equals(editedExpense));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(DUCK_RICE).withDate(VALID_DATE_EXPENSE).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DUCK_RICE.equals(editedExpense));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different category -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(DUCK_RICE).withCategory(VALID_CATEGORY_EXPENSE_2).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DUCK_RICE.equals(editedExpense));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different remarks -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(DUCK_RICE).withRemarks(VALID_REMARKS_EXPENSE).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(DUCK_RICE.equals(editedExpense));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 60,
      "zht96830": 2,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                Collections.singletonList(\"Chicken\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Chicken Rice\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Chicken\", \"Rice\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Chicken Rice\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Duck\", \"Rice\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Chicken Rice\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"cHicken\", \"rICE\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Chicken Rice\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Chicken Rice\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Duck\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Chicken Rice\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // Keywords match amount, date and category, but does not match name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"1.10\", \"10-03-2019\", \"food\", \"FOOD\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Chicken Rice\").withAmount(\"1.10\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                .withDate(\"10-03-2019\").withCategory(\"food\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 20,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExpenseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import static seedu.address.storage.JsonAdaptedExpense.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TAXI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jhocx"
        },
        "content": "public class JsonAdaptedExpenseTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"+651a234\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static final String INVALID_DATE \u003d \"example-date\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static final String VALID_NAME \u003d TAXI.getName().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static final String VALID_AMOUNT \u003d TAXI.getAmount().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static final String VALID_DATE \u003d TAXI.getDate().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static final String VALID_CATEGORY \u003d TAXI.getCategory().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static final String VALID_REMARKS \u003d TAXI.getRemarks();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void toModelType_validExpenseDetails_returnsExpense() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(TAXI);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(TAXI, expense.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                new JsonAdaptedExpense(INVALID_NAME, VALID_AMOUNT, VALID_DATE, VALID_CATEGORY, VALID_REMARKS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(null, VALID_AMOUNT, VALID_DATE, VALID_CATEGORY,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                VALID_REMARKS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                new JsonAdaptedExpense(VALID_NAME, INVALID_AMOUNT, VALID_DATE, VALID_CATEGORY, VALID_REMARKS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(VALID_NAME, null, VALID_DATE, VALID_CATEGORY,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                VALID_REMARKS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                new JsonAdaptedExpense(VALID_NAME, VALID_AMOUNT, INVALID_DATE, VALID_CATEGORY, VALID_REMARKS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void toModelType_invalidCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                new JsonAdaptedExpense(VALID_NAME, VALID_AMOUNT, VALID_DATE, INVALID_CATEGORY, VALID_REMARKS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String expectedMessage \u003d Category.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void toModelType_nullCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(VALID_NAME, VALID_AMOUNT, VALID_DATE, null,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                VALID_REMARKS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 5,
      "gohyinhao": 37,
      "jamessspanggg": 7,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonFinanceTrackerStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.DUCK_RICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.JAPAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.STOCKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalFinanceTrackerWithExpenses;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class JsonFinanceTrackerStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            \"src\", \"test\", \"data\", \"JsonFinanceTrackerStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void readFinanceTracker_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        readFinanceTracker(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker(String filePath) throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return new JsonFinanceTrackerStorage(Paths.get(filePath)).readFinanceTracker("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(readFinanceTracker(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        readFinanceTracker(\"notJsonFormatFinanceTracker.json\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void readFinanceTracker_invalidExpenseFinanceTracker_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        readFinanceTracker(\"invalidExpenseFinanceTracker.json\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void readFinanceTracker_invalidAndValidExpenseFinanceTracker_throwDataConversionException()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        readFinanceTracker(\"invalidAndValidExpenseFinanceTracker.json\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void readAndSaveFinanceTracker_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempFinanceTracker.json\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        FinanceTracker original \u003d getTypicalFinanceTrackerWithExpenses();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        JsonFinanceTrackerStorage jsonFinanceTrackerStorage \u003d new JsonFinanceTrackerStorage(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        jsonFinanceTrackerStorage.saveFinanceTracker(original, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ReadOnlyFinanceTracker readBack \u003d jsonFinanceTrackerStorage.readFinanceTracker(filePath).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(original, new FinanceTracker(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        original.addExpense(JAPAN);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        original.removeExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        jsonFinanceTrackerStorage.saveFinanceTracker(original, filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        readBack \u003d jsonFinanceTrackerStorage.readFinanceTracker(filePath).get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(original, new FinanceTracker(readBack));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        original.addExpense(STOCKS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        jsonFinanceTrackerStorage.saveFinanceTracker(original); // file path not specified"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        readBack \u003d jsonFinanceTrackerStorage.readFinanceTracker().get(); // file path not specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(original, new FinanceTracker(readBack));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void saveFinanceTracker_nullFinanceTracker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        saveFinanceTracker(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Saves {@code financeTracker} at the specified {@code filePath}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, String filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            new JsonFinanceTrackerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                    .saveFinanceTracker(financeTracker, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void saveFinanceTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        saveFinanceTracker(new FinanceTracker(), null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 41,
      "jhocx": 1,
      "jamessspanggg": 3,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableFinanceTrackerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class JsonSerializableFinanceTrackerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            \"JsonSerializableFinanceTrackerTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static final Path TYPICAL_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalExpensesFinanceTracker.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static final Path INVALID_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidExpenseFinanceTracker.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        JsonSerializableFinanceTracker dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EXPENSE_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                JsonSerializableFinanceTracker.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        FinanceTracker financeTrackerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        FinanceTracker typicalPersonsFinanceTracker \u003d TypicalExpenses.getTypicalFinanceTrackerWithExpenses();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(financeTrackerFromFile, typicalPersonsFinanceTracker);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        JsonSerializableFinanceTracker dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EXPENSE_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jhocx"
        },
        "content": "                JsonSerializableFinanceTracker.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 12,
      "jhocx": 2,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(Paths.get(\"financetracker.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Path prefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(prefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 4,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalFinanceTrackerWithExpenses;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        JsonFinanceTrackerStorage financeTrackerStorage \u003d new JsonFinanceTrackerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        storageManager \u003d new StorageManager(financeTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void financeTrackerReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jhocx"
        },
        "content": "         * {@link JsonFinanceTrackerStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonFinanceTrackerStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        FinanceTracker original \u003d getTypicalFinanceTrackerWithExpenses();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        storageManager.saveFinanceTracker(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        ReadOnlyFinanceTracker retrieved \u003d storageManager.readFinanceTracker().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(original, new FinanceTracker(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        assertNotNull(storageManager.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 10,
      "jhocx": 4,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DebtBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A utility class to help with building Debt objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class DebtBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String DEFAULT_PERSON_OWED \u003d \"John Doe\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"50.00\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"work\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"12-12-2019\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String DEFAULT_REMARKS \u003d \"borrowed money for bagels\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Name personOwed;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Date deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private String remarks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public DebtBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        personOwed \u003d new Name(DEFAULT_PERSON_OWED);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        category \u003d Category.valueOf(DEFAULT_CATEGORY.toUpperCase());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        deadline \u003d new Date(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        remarks \u003d DEFAULT_REMARKS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Initializes the DebtBuilder with the data of {@code debtToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public DebtBuilder(Debt debtToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        personOwed \u003d debtToCopy.getPersonOwed();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        amount \u003d debtToCopy.getAmount();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        category \u003d debtToCopy.getCategory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        deadline \u003d debtToCopy.getDeadline();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        remarks \u003d debtToCopy.getRemarks();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Name} of the {@code Debt} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public DebtBuilder withPersonOwed(String personOwed) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.personOwed \u003d new Name(personOwed);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Amount} of the {@code Debt} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public DebtBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Category} of the {@code Debt} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public DebtBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.category \u003d Category.valueOf(category.toUpperCase());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Date} of the {@code Debt} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public DebtBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.deadline \u003d new Date(deadline);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Remarks} of the {@code Debt} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public DebtBuilder withRemarks(String remarks) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Debt build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return new Debt(personOwed, amount, deadline, category, remarks);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DebtUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.logic.commands.debtcommands.AddDebtCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.logic.commands.debtcommands.EditDebtCommand.EditDebtDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A utility class for Expense."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class DebtUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns an add debt command string for adding the {@code debt}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static String getAddDebtCommand(Debt debt) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return AddDebtCommand.COMMAND_WORD + \" \" + getDebtDetails(debt);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns the part of command string for the given {@code debt}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static String getDebtDetails(Debt debt) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        sb.append(PREFIX_NAME + debt.getPersonOwed().name + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        sb.append(PREFIX_AMOUNT + debt.getAmount().toString() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        sb.append(PREFIX_CATEGORY + debt.getCategory().toString() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        sb.append(PREFIX_DUE + debt.getDeadline().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        sb.append(PREFIX_REMARKS + debt.getRemarks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns the part of command string for the given {@code EditDebtDescriptor}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static String getEditDebtDescriptorDetails(EditDebtDescriptor descriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.getPersonOwed().ifPresent(personOwed -\u003e sb.append(PREFIX_NAME).append(personOwed.name).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.getAmount().ifPresent(amount -\u003e sb.append(PREFIX_AMOUNT).append(amount.toString()).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        descriptor.getCategory().ifPresent(category -\u003e sb.append(PREFIX_CATEGORY).append("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                category.toString()).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.getDeadline().ifPresent(deadline -\u003e sb.append(PREFIX_DUE).append(deadline.toString()).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.getRemarks().ifPresent(remarks -\u003e sb.append(PREFIX_REMARKS).append(remarks));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 47,
      "jamessspanggg": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditDebtDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.commands.debtcommands.EditDebtCommand.EditDebtDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A utility class to help with building EditDebtDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class EditDebtDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private EditDebtDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditDebtDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor \u003d new EditDebtDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditDebtDescriptorBuilder(EditDebtDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.descriptor \u003d new EditDebtDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns an {@code EditDebtDescriptor} with fields containing {@code debt}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditDebtDescriptorBuilder(Debt debt) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor \u003d new EditDebtDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setPersonOwed(debt.getPersonOwed());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setAmount(debt.getAmount());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setCategory(debt.getCategory());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setDeadline(debt.getDeadline());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setRemarks(debt.getRemarks());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Name} of the {@code EditDebtDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditDebtDescriptorBuilder withPersonOwed(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setPersonOwed(new Name(name));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditDebtDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditDebtDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Category} of the {@code EditDebtDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditDebtDescriptorBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setCategory(Category.valueOf(category.toUpperCase()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Date} of the {@code EditDebtDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditDebtDescriptorBuilder withDeadline(String date) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setDeadline(new Date(date));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the remarks of the {@code EditDebtDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditDebtDescriptorBuilder withRemarks(String remarks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setRemarks(remarks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditDebtDescriptor build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExpenseDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.commands.expensecommands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A utility class to help with building EditExpenseDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class EditExpenseDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private EditExpenseDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditExpenseDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditExpenseDescriptorBuilder(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.descriptor \u003d new EditExpenseDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns an {@code EditExpenseDescriptor} with fields containing {@code expense}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditExpenseDescriptorBuilder(Expense expense) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setName(expense.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setAmount(expense.getAmount());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setCategory(expense.getCategory());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setDate(expense.getDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setRemarks(expense.getRemarks());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Name} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditExpenseDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditExpenseDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Category} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditExpenseDescriptorBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setCategory(Category.valueOf(category.toUpperCase()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Date} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditExpenseDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the remarks of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditExpenseDescriptorBuilder withRemarks(String remarks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.setRemarks(remarks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public EditExpenseDescriptor build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 78,
      "jamessspanggg": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A utility class to help with building Expense objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class ExpenseBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"MRT\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"2.50\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"transport\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"03-03-2019\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String DEFAULT_REMARKS \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private String remarks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ExpenseBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        category \u003d Category.valueOf(DEFAULT_CATEGORY.toUpperCase());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        remarks \u003d DEFAULT_REMARKS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code expenseToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ExpenseBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        name \u003d expenseToCopy.getName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        amount \u003d expenseToCopy.getAmount();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        category \u003d expenseToCopy.getCategory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        date \u003d expenseToCopy.getDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        remarks \u003d expenseToCopy.getRemarks();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Name} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ExpenseBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Amount} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ExpenseBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Category} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ExpenseBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.category \u003d Category.valueOf(category.toUpperCase());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Date} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ExpenseBuilder withDate(String date) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Sets the {@code Remarks} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public ExpenseBuilder withRemarks(String remarks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return new Expense(name, amount, date, category, remarks);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 88,
      "jamessspanggg": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.commands.expensecommands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.logic.commands.expensecommands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A utility class for Expense."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class ExpenseUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns an add command string for adding the {@code expense}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static String getAddCommand(Expense expense) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getExpenseDetails(expense);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns the part of command string for the given {@code expense}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static String getExpenseDetails(Expense expense) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        sb.append(PREFIX_NAME + expense.getName().name + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        sb.append(PREFIX_AMOUNT + expense.getAmount().toString() + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        sb.append(PREFIX_CATEGORY + expense.getCategory().toString() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        sb.append(PREFIX_DATE + expense.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        sb.append(PREFIX_REMARKS + expense.getRemarks());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns the part of command string for the given {@code EditExpenseDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static String getEditExpenseDescriptorDetails(EditCommand.EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.name).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.getAmount().ifPresent(amount -\u003e sb.append(PREFIX_AMOUNT).append(amount.toString()).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        descriptor.getCategory().ifPresent(category -\u003e sb.append(PREFIX_CATEGORY).append("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                category.toString()).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.toString()).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        descriptor.getRemarks().ifPresent(remarks -\u003e sb.append(PREFIX_REMARKS).append(remarks));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 51,
      "jamessspanggg": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FinanceTrackerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A utility class to help with building finance tracker objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " *     {@code FinanceTracker ft \u003d new FinanceTrackerBuilder().withExpense(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class FinanceTrackerBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private FinanceTracker financeTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public FinanceTrackerBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public FinanceTrackerBuilder(FinanceTracker financeTracker) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        this.financeTracker \u003d financeTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Adds a new {@code Expense} to the {@code FinanceTracker} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public FinanceTrackerBuilder withExpense(Expense expense) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker.addExpense(expense);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Adds a new {@code Expense} to the {@code FinanceTracker} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public FinanceTrackerBuilder withDebt(Debt debt) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        financeTracker.addDebt(debt);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public FinanceTracker build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return financeTracker;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns the middle index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns the last index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns the expense in the {@code model}\u0027s expense list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static Expense getExpense(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return model.getFilteredExpenseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns the debt in the {@code model}\u0027s debt list at {@code index}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static Debt getDebt(Model model, Index index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return model.getFilteredDebtList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 14,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDebts.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_DEBT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_DEBT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_DEBT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DEBT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARKS_DEBT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.debt.Debt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A utility class containing a list of {@code Debt} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class TypicalDebts {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Debt DUCK_RICE \u003d new DebtBuilder().withPersonOwed(\"Amy\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withCategory(\"food\").withDeadline(\"1-12-2019\").withAmount(\"3.50\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withRemarks(\"for duck rice last week\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Debt TAXI \u003d new DebtBuilder().withPersonOwed(\"Bob\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withCategory(\"transport\").withDeadline(\"05-12-2019\").withAmount(\"17.20\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withRemarks(\"taxi from NUS to Home\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Debt GROCERIES \u003d new DebtBuilder().withPersonOwed(\"Charlie\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withAmount(\"57.30\").withDeadline(\"08-08-2019\").withCategory(\"shopping\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withRemarks(\"groceries: fish, eggs, chicken, beef, oyster sauce\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Debt LAPTOP \u003d new DebtBuilder().withPersonOwed(\"Debbie\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withAmount(\"1300.00\").withDeadline(\"15-12-2019\").withCategory(\"work\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withRemarks(\"money for my work laptop\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Debt PHONE_BILLS \u003d new DebtBuilder().withPersonOwed(\"Evan\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withAmount(\"20.00\").withDeadline(\"27-03-2019\").withCategory(\"utilities\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withRemarks(\"for lending me money to pay my phone bills\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Debt DOCTOR \u003d new DebtBuilder().withPersonOwed(\"Frank\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withAmount(\"30.50\").withDeadline(\"16-07-2019\").withCategory(\"healthcare\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withRemarks(\"money borrowed to see the doctor\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Debt TV \u003d new DebtBuilder().withPersonOwed(\"George\").withAmount(\"750.00\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withDeadline(\"21-07-2017\").withCategory(\"ENTERTAINMENT\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withRemarks(\"borrowed money to get a new TV\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Debt JAPAN \u003d new DebtBuilder().withPersonOwed(\"Holly\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withAmount(\"1750.00\").withDeadline(\"08-06-2018\").withCategory(\"travel\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withRemarks(\"money borrowed during Japan trip\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Debt STOCKS \u003d new DebtBuilder().withPersonOwed(\"Ivan\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withAmount(\"1152.25\").withDeadline(\"03-03-2019\").withCategory(\"others\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withRemarks(\"borrowed to purcahse mapletree stocks\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    // Manually added - Debt\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Debt DEBT \u003d new DebtBuilder().withPersonOwed(VALID_NAME_DEBT)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withAmount(VALID_AMOUNT_DEBT).withDeadline(VALID_CATEGORY_DEBT)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withCategory(VALID_DEADLINE_DEBT).withRemarks(VALID_REMARKS_DEBT).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String KEYWORD_MATCHING_CHICKEN \u003d \"Chicken\"; // A keyword that matches CHICKEN"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private TypicalDebts() {} // prevents instantiation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns an {@code FinanceTracker} with all the typical debts."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static FinanceTracker getTypicalFinanceTrackerWithExpenses() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        FinanceTracker ft \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        for (Debt debt : getTypicalDebts()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            ft.addDebt(debt);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return ft;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static List\u003cDebt\u003e getTypicalDebts() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DUCK_RICE, TAXI, GROCERIES, LAPTOP, PHONE_BILLS, DOCTOR, TV));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 67,
      "jamessspanggg": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExpenses.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_EXPENSE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_EXPENSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARKS_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A utility class containing a list of {@code Expense} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class TypicalExpenses {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Expense DUCK_RICE \u003d new ExpenseBuilder().withName(\"Duck Rice\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withCategory(\"food\").withDate(\"01-01-2019\").withAmount(\"3.50\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final Expense CHICKEN_RICE \u003d new ExpenseBuilder().withName(\"Chicken Rice\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            .withCategory(\"food\").withDate(\"03-03-2019\").withAmount(\"11111111\").withRemarks(\"Bishan chicken rice\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Expense TAXI \u003d new ExpenseBuilder().withName(\"Taxi\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withCategory(\"transport\").withDate(\"05-01-2019\").withAmount(\"17.20\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withRemarks(\"from NUS to Home\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Expense GROCERIES \u003d new ExpenseBuilder().withName(\"Groceries from NTUC\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withAmount(\"57.30\").withDate(\"08-01-2019\").withCategory(\"shopping\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withRemarks(\"fish, eggs, chicken, beef, oyster sauce\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Expense LAPTOP \u003d new ExpenseBuilder().withName(\"new ASUS laptop\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "            .withAmount(\"1300\").withDate(\"15-12-2018\").withCategory(\"work\").withRemarks(\"may get reimbursed\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Expense PHONE_BILLS \u003d new ExpenseBuilder().withName(\"Phone bills\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withAmount(\"20\").withDate(\"31-01-2019\").withCategory(\"utilities\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Expense DOCTOR \u003d new ExpenseBuilder().withName(\"doctor consultation\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withAmount(\"30.50\").withDate(\"15-01-2019\").withCategory(\"healthcare\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withRemarks(\"down with flu\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Expense TV \u003d new ExpenseBuilder().withName(\"new Panasonic TV\").withAmount(\"750.00\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withDate(\"21-07-2017\").withCategory(\"ENTERTAINMENT\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Expense JAPAN \u003d new ExpenseBuilder().withName(\"trip to Japan\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withAmount(\"1750.00\").withDate(\"08-06-2018\").withCategory(\"travel\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withRemarks(\"Japan trip from 1st June to 8th June\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Expense STOCKS \u003d new ExpenseBuilder().withName(\"1000x of MapleTree Log Trust\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withAmount(\"1152.25\").withDate(\"03-03-2019\").withCategory(\"others\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    // Manually added - Expense\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final Expense EXPENSE \u003d new ExpenseBuilder().withName(VALID_NAME_EXPENSE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withAmount(VALID_AMOUNT_EXPENSE).withDate(VALID_DATE_EXPENSE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            .withCategory(VALID_CATEGORY_EXPENSE).withRemarks(VALID_REMARKS_EXPENSE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zht96830"
        },
        "content": "    public static final Expense EXPENSE_WITHOUT_REMARKS \u003d new ExpenseBuilder().withName(VALID_NAME_EXPENSE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            .withAmount(VALID_AMOUNT_EXPENSE).withDate(VALID_DATE_EXPENSE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zht96830"
        },
        "content": "            .withCategory(VALID_CATEGORY_EXPENSE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zht96830"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static final String KEYWORD_MATCHING_CHICKEN \u003d \"Chicken\"; // A keyword that matches CHICKEN"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public static final String KEYWORD_MATCHING_PHONE \u003d \"Phone\"; // A keyword that matches PHONE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private TypicalExpenses() {} // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns an {@code FinanceTracker} with all the typical expenses."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static FinanceTracker getTypicalFinanceTrackerWithExpenses() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        FinanceTracker ft \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        for (Expense expense : getTypicalExpenses()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            ft.addExpense(expense);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return ft;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DUCK_RICE, TAXI, GROCERIES, LAPTOP, PHONE_BILLS, DOCTOR, TV));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 61,
      "zht96830": 7,
      "lim-jiahui": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public static final Index INDEX_FIRST_EXPENSE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public static final Index INDEX_SECOND_EXPENSE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public static final Index INDEX_THIRD_EXPENSE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jamessspanggg": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.DUCK_RICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private SimpleObjectProperty\u003cExpense\u003e selectedExpense \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedExpense));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // associated web page of a expense"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        guiRobot.interact(() -\u003e selectedExpense.set(DUCK_RICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        URL expectedExpenseUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                + DUCK_RICE.getName().name.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(expectedExpenseUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 2,
      "jamessspanggg": 6,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ExpenseCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysExpense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import guitests.guihandles.ExpenseCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class ExpenseCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense expenseWithNoTags \u003d new ExpenseBuilder().withRemarks(\"\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ExpenseCard expenseCard \u003d new ExpenseCard(expenseWithNoTags, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        uiPartRule.setUiPart(expenseCard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCardDisplay(expenseCard, expenseWithNoTags, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense expenseWithTags \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expenseCard \u003d new ExpenseCard(expenseWithTags, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        uiPartRule.setUiPart(expenseCard);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCardDisplay(expenseCard, expenseWithTags, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ExpenseCard expenseCard \u003d new ExpenseCard(expense, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // same expense, same index -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ExpenseCard copy \u003d new ExpenseCard(expense, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(expenseCard.equals(copy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(expenseCard.equals(expenseCard));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(expenseCard.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(expenseCard.equals(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // different expense, same index -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense differentExpense \u003d new ExpenseBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(expenseCard.equals(new ExpenseCard(differentExpense, 0)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // same expense, different index -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(expenseCard.equals(new ExpenseCard(expense, 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Asserts that {@code expenseCard} displays the details of {@code expectedExpense} correctly and matches"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private void assertCardDisplay(ExpenseCard expenseCard, Expense expectedExpense, int expectedId) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        ExpenseCardHandle expenseCardHandle \u003d new ExpenseCardHandle(expenseCard.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", expenseCardHandle.getId());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // verify expense details are displayed correctly"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertCardDisplaysExpense(expectedExpense, expenseCardHandle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 66,
      "jamessspanggg": 6,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ExpenseListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenses;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysExpense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import guitests.guihandles.ExpenseCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import guitests.guihandles.ExpenseListPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class ExpenseListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static final ObservableList\u003cExpense\u003e TYPICAL_EXPENSES \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            FXCollections.observableList(getTypicalExpenses());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final SimpleObjectProperty\u003cExpense\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private ExpenseListPanelHandle expenseListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        initUi(TYPICAL_EXPENSES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_EXPENSES.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            expenseListPanelHandle.navigateToCard(TYPICAL_EXPENSES.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            Expense expectedExpense \u003d TYPICAL_EXPENSES.get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            ExpenseCardHandle actualCard \u003d expenseListPanelHandle.getExpenseCardHandle(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            assertCardDisplaysExpense(expectedExpense, actualCard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        initUi(TYPICAL_EXPENSES);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Expense secondExpense \u003d TYPICAL_EXPENSES.get(INDEX_SECOND_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(secondExpense));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        ExpenseCardHandle expectedPerson \u003d expenseListPanelHandle.getExpenseCardHandle("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                INDEX_SECOND_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        ExpenseCardHandle selectedPerson \u003d expenseListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code ExpenseListPanel} requires lesser than"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ObservableList\u003cExpense\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        }, \"Creation and deletion of expense cards exceeded time limit\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * {@code ExpenseListPanel}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    private ObservableList\u003cExpense\u003e createBackingList(int expenseCount) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ObservableList\u003cExpense\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        for (int i \u003d 0; i \u003c expenseCount; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jhocx"
        },
        "content": "            Amount amount \u003d new Amount(\"000\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            Date date \u003d new Date(\"13-01-1996\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            Category category \u003d Category.FOOD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            Expense expense \u003d new Expense(name, amount, date, category, null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "            backingList.add(expense);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Initializes {@code expenseListPanelHandle} with a {@code ExpenseListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code ExpenseListPanel}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private void initUi(ObservableList\u003cExpense\u003e backingList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        ExpenseListPanel expenseListPanel \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                new ExpenseListPanel(backingList, selectedPerson, selectedPerson::set);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        uiPartRule.setUiPart(expenseListPanel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        expenseListPanelHandle \u003d new ExpenseListPanelHandle(getChildNode(expenseListPanel.getRoot(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                ExpenseListPanelHandle.EXPENSE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 15,
      "jhocx": 3,
      "jamessspanggg": 29,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A GUI unit test class for FinanceTracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.storage.JsonFinanceTrackerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        JsonFinanceTrackerStorage jsonAddressBookStorage \u003d new JsonFinanceTrackerStorage("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonAddressBookStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 1,
      "jamessspanggg": 2,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.DUCK_RICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private final FinanceTracker financeTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, financeTracker);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        String date \u003d DUCK_RICE.getDate().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        guiRobot.interact(() -\u003e financeTracker.addExpense(DUCK_RICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 5,
      "jamessspanggg": 1,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import guitests.guihandles.ExpenseCardHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import guitests.guihandles.ExpenseListPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public static void assertCardEquals(ExpenseCardHandle expectedCard, ExpenseCardHandle actualCard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(expectedCard.getAmount(), actualCard.getAmount());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(expectedCard.getDate(), actualCard.getDate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(expectedCard.getCategory(), actualCard.getCategory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedExpense}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public static void assertCardDisplaysExpense(Expense expectedExpense, ExpenseCardHandle actualCard) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        assertEquals(expectedExpense.getName().name, actualCard.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(\"$\" + expectedExpense.getAmount(), actualCard.getAmount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(expectedExpense.getCategory().toString(), actualCard.getCategory());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(expectedExpense.getDate().toString(), actualCard.getDate());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Asserts that the list in {@code expenseListPanelHandle} displays the details of {@code expenses} correctly and"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public static void assertListMatching(ExpenseListPanelHandle expenseListPanelHandle, Expense... expenses) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.length; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            expenseListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "            assertCardDisplaysExpense(expenses[i], expenseListPanelHandle.getExpenseCardHandle(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Asserts that the list in {@code expenseListPanelHandle} displays the details of {@code expenses} correctly and"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public static void assertListMatching(ExpenseListPanelHandle expenseListPanelHandle, List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertListMatching(expenseListPanelHandle, expenses.toArray(new Expense[0]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Asserts the size of the list in {@code expenseListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "    public static void assertListSize(ExpenseListPanelHandle expenseListPanelHandle, int size) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        int numberOfPeople \u003d expenseListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 2,
      "jhocx": 1,
      "jamessspanggg": 20,
      "-": 47
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_EXPENSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.EXPENSE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.GROCERIES;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_CHICKEN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.STOCKS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class AddCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: add an expense to a non-empty finance tracker, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense toAdd \u003d EXPENSE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_EXPENSE + \"  \" + AMOUNT_DESC_EXPENSE + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                + CATEGORY_DESC_EXPENSE + \"   \" + DATE_DESC_EXPENSE + \"   \" + REMARKS_DESC_EXPENSE + \" \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: undo adding Expense to the list -\u003e Expense deleted */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: redo adding Expense to the list -\u003e Expense added again */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: add to empty finance tracker -\u003e added */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        deleteAllExpenses();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_EXPENSE + \"  \" + AMOUNT_DESC_EXPENSE + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + CATEGORY_DESC_EXPENSE + \"   \" + DATE_DESC_EXPENSE + \"   \" + REMARKS_DESC_EXPENSE + \" \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: filters the expense list before adding -\u003e added */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_CHICKEN);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandSuccess(STOCKS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        /* ------------------------ Perform add operation while a expense card is selected -------------------------- */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: selects first card in the expense list, add a expense -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        selectExpense(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandSuccess(GROCERIES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        missing name -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE + DATE_DESC_EXPENSE"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: missing amount -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXPENSE + CATEGORY_DESC_EXPENSE + DATE_DESC_EXPENSE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: missing category -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + DATE_DESC_EXPENSE"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        command \u003d \"adds \" + ExpenseUtil.getExpenseDetails(toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + DATE_DESC_EXPENSE + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: invalid amount -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXPENSE + INVALID_AMOUNT_DESC + CATEGORY_DESC_EXPENSE"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + DATE_DESC_EXPENSE + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jhocx"
        },
        "content": "        assertCommandFailure(command, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: invalid category -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + INVALID_CATEGORY_DESC"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + DATE_DESC_EXPENSE + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertCommandFailure(command, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: invalid date -\u003e rejected */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE + CATEGORY_DESC_EXPENSE"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + INVALID_DATE_DESC + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertCommandFailure(command, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * 4. {@code Storage} and {@code ExpenseListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private void assertCommandSuccess(Expense toAdd) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandSuccess(ExpenseUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Expense)}. Executes {@code command}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Expense)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private void assertCommandSuccess(String command, Expense toAdd) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.addExpense(toAdd);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Expense)} except asserts that"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * 2. {@code Storage} and {@code ExpenseListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Expense)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * 4. {@code Storage} and {@code ExpenseListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 2,
      "gohyinhao": 26,
      "zht96830": 3,
      "jamessspanggg": 6,
      "lim-jiahui": 42,
      "-": 110
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_CHICKEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class ClearCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: clear non-empty finance tracker, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: undo clearing finance tracker -\u003e original finance tracker restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: redo clearing finance tracker -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: selects first card in expense list and clears finance tracker -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        selectExpense(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: filters the expense list before clearing -\u003e entire finance tracker cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_CHICKEN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: clear empty finance tracker -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 5,
      "zht96830": 3,
      "lim-jiahui": 9,
      "-": 84
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.expensecommands.DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TestUtil.getExpense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_CHICKEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class DeleteCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: delete the first expense in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"     \" + INDEX_FIRST_EXPENSE.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Expense deletedExpense \u003d removeExpense(expectedModel, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, deletedExpense);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: delete the last expense in the list -\u003e deleted */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Index lastExpenseIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertCommandSuccess(lastExpenseIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: undo deleting the last expense in the list -\u003e last expense restored */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: redo deleting the last expense in the list -\u003e last expense deleted again */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        removeExpense(modelBeforeDeletingLast, lastExpenseIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: delete the middle expense in the list -\u003e deleted */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Index middleExpenseIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertCommandSuccess(middleExpenseIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: filtered expense list, delete index within bounds of address book and expense list -\u003e deleted */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_PHONE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Index index \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: filtered expense list, delete index within bounds of finance tracker but out of bounds of expense list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_CHICKEN);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        int invalidIndex \u003d getModel().getFinanceTracker().getExpenseList().size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* --------------------- Performing delete operation while an expense card is selected ---------------------- */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: delete the selected expense -\u003e expense list panel selects the expense before the deleted expense */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        showAllExpenses();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        selectExpense(selectedIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        deletedExpense \u003d removeExpense(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, deletedExpense);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                getModel().getFinanceTracker().getExpenseList().size() + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Removes the {@code Expense} at the specified {@code index} in {@code model}\u0027s finance tracker."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @return the removed expense"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private Expense removeExpense(Model model, Index index) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense targetExpense \u003d getExpense(model, index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        model.deleteExpense(targetExpense);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return targetExpense;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Deletes the expense at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Expense deletedExpense \u003d removeExpense(expectedModel, toDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, deletedExpense);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 21,
      "zht96830": 5,
      "jamessspanggg": 1,
      "lim-jiahui": 23,
      "-": 144
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_DEBT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_DEBT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EXPENSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_DEBT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DEBT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.EXPENSE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_CHICKEN;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.EditCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.attributes.Amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.attributes.Category;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.attributes.Date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jhocx"
        },
        "content": "import seedu.address.model.attributes.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class EditCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        Index index \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_EXPENSE + \"  \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                + AMOUNT_DESC_EXPENSE + \"    \" + CATEGORY_DESC_EXPENSE + \"  \" + DATE_DESC_EXPENSE + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + REMARKS_DESC_EXPENSE + \"   \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(EXPENSE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandSuccess(command, index, editedExpense);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: undo editing the last expense in the list -\u003e last expense restored */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: redo editing the last expense in the list -\u003e last expense edited again */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        model.setExpense(getModel().getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased()), editedExpense);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: edit an expense with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                + CATEGORY_DESC_EXPENSE + DATE_DESC_EXPENSE + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandSuccess(command, index, EXPENSE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: edit an expense with new values same as another expense\u0027s values but with different name -\u003e edited"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        * In this case, test edits second expense with values to be the same as first expense except for the name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(getModel().getFinanceTracker().getExpenseList().contains(EXPENSE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        index \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertNotEquals(getModel().getFilteredExpenseList().get(index.getZeroBased()), EXPENSE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_DEBT + AMOUNT_DESC_EXPENSE"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + CATEGORY_DESC_EXPENSE + DATE_DESC_EXPENSE + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(EXPENSE).withName(VALID_NAME_DEBT).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandSuccess(command, index, editedExpense);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: edit an expense with new values same as another expense\u0027s values but with different amount"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertTrue(getModel().getFinanceTracker().getExpenseList().contains(EXPENSE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        index \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertNotEquals(getModel().getFilteredExpenseList().get(index.getZeroBased()), EXPENSE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_EXPENSE + AMOUNT_DESC_DEBT"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + CATEGORY_DESC_EXPENSE + DATE_DESC_EXPENSE + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(EXPENSE).withAmount(VALID_AMOUNT_DEBT).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandSuccess(command, index, editedExpense);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* index \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense expenseToEdit \u003d getModel().getFilteredExpenseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(expenseToEdit).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertCommandSuccess(command, index, editedExpense);*/"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: filtered expense list, edit index within bounds of finance tracker and expense list -\u003e edited */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_CHICKEN);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        index \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_DEBT;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Expense expenseToEdit \u003d getModel().getFilteredExpenseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(expenseToEdit).withName(VALID_NAME_DEBT).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandSuccess(command, index, editedExpense);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: filtered expense list, edit index within bounds of address book but out of bounds of expense list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_CHICKEN);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        int invalidIndex \u003d getModel().getFinanceTracker().getExpenseList().size();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_DEBT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* --------------------- Performing edit operation while an expense card is selected -------------------------*/"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: selects first card in the expense list, edit an expense -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        showAllExpenses();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        index \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        selectExpense(index);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_EXPENSE + AMOUNT_DESC_EXPENSE"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                + CATEGORY_DESC_EXPENSE + DATE_DESC_EXPENSE + REMARKS_DESC_EXPENSE;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        // browser\u0027s url is updated to reflect the new expense\u0027s name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandSuccess(command, index, EXPENSE, index);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_DEBT,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_DEBT,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredExpenseList().size() + 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_DEBT,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_DEBT,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: invalid amount -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: invalid category -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: invalid date -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /*assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                + INVALID_DEADLINE_DESC, Tag.MESSAGE_CONSTRAINTS);*/"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Expense, Index)} except that"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Expense, Index)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Expense editedExpense) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedExpense, null);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the expense at index {@code toEdit} being"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * updated to values specified {@code editedExpense}.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Expense editedExpense,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.setExpense(expectedModel.getFilteredExpenseList().get(toEdit.getZeroBased()), editedExpense);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        expectedModel.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jhocx": 1,
      "gohyinhao": 45,
      "zht96830": 5,
      "jamessspanggg": 18,
      "lim-jiahui": 55,
      "-": 140
    }
  },
  {
    "path": "src/test/java/systemtests/FinanceTrackerSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import guitests.guihandles.ExpenseListPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.logic.commands.generalcommands.ClearCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "import seedu.address.logic.commands.generalcommands.FindCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": " * A system test class for FinanceTracker, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public abstract class FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    protected FinanceTracker getInitialData() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        return TypicalExpenses.getTypicalFinanceTrackerWithExpenses();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public ExpenseListPanelHandle getExpenseListPanel() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        return mainWindowHandle.getExpenseListPanel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Displays all expenses in the finance tracker."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    protected void showAllExpenses() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertEquals(getModel().getFinanceTracker().getExpenseList().size(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "                getModel().getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Displays all expenses with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    protected void showExpensesWithName(String keyword) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertTrue(getModel().getFilteredExpenseList().size()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "                \u003c\u003d getModel().getFinanceTracker().getExpenseList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Selects the expense at {@code index} of the displayed list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    protected void selectExpense(Index index) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertEquals(index.getZeroBased(), getExpenseListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * Deletes all expenses in the finance tracker."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    protected void deleteAllExpenses() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(0, getModel().getFinanceTracker().getExpenseList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same expense objects as {@code expectedModel}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "     * and the expense list panel displays the expenses in the model correctly."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertEquals(new FinanceTracker(expectedModel.getFinanceTracker()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertListMatching(getExpenseListPanel(), expectedModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code ExpenseListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        getExpenseListPanel().rememberSelectedExpenseCard();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertFalse(getExpenseListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the expense in the expense list panel at"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * @see ExpenseListPanelHandle#isSelectedExpenseCardChanged()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        getExpenseListPanel().navigateToCard(getExpenseListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        String selectedCardName \u003d getExpenseListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getExpenseListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the expense list panel remain unchanged."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * @see ExpenseListPanelHandle#isSelectedExpenseCardChanged()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertFalse(getExpenseListPanel().isSelectedExpenseCardChanged());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertListMatching(getExpenseListPanel(), getModel().getFilteredExpenseList());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 12,
      "jamessspanggg": 9,
      "lim-jiahui": 20,
      "-": 248
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.DUCK_RICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.GROCERIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_CHICKEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.LAPTOP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TAXI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class FindCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: find multiple expenses in finance tracker, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "         * -\u003e 1 expense found"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \"  rice   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, EXPENSE, DUCK_RICE); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: repeat previous find command where expense list is displaying the expenses we are finding"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "         * -\u003e 1 expense found"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" rice\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: find expense where expense list is not displaying the expense we are finding -\u003e 1 expense found */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" NTUC\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, GROCERIES);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: find multiple expenses in finance tracker, 2 keywords -\u003e 2 expenses found */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" taxi laptop\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, TAXI, LAPTOP);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: find multiple expenses in finance tracker, 2 keywords in reversed order -\u003e 2 expenses found */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" laptop taxi\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: find multiple expenses in finance tracker, 2 keywords with 1 repeat -\u003e 2 expenses found */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" laptop taxi laptop\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: find multiple expenses in finance tracker, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "         * -\u003e 2 expenses found"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" laptop taxi NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: find same expenses in finance tracker after deleting 1 of them -\u003e 1 expense found */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertFalse(getModel().getFinanceTracker().getExpenseList().contains(TAXI));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" laptop taxi\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, LAPTOP);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: find expense in finance tracker, keyword is same as name but of different case -\u003e 1 expense found */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" rIcE\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DUCK_RICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: find expense in finance tracker, keyword is substring of name -\u003e 0 found */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" apto\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: find expense in finance tracker, name is substring of keyword -\u003e 0 found */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" laptops\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: find expense not in finance tracker -\u003e 0 found */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: find amount number of expense in finance tracker -\u003e 0 found */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + LAPTOP.getAmount().value;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: find date of expense in finance tracker -\u003e 0 found */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + LAPTOP.getDate().toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: find category of expense in finance tracker -\u003e 0 found */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + LAPTOP.getCategory().toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: find remarks of expense in finance tracker -\u003e 0"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "         found */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + LAPTOP.getRemarks();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: find while an expense is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        showAllExpenses();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        selectExpense(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertFalse(getExpenseListPanel().getHandleToSelectedCard().getName().equals(LAPTOP.getName().name));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" laptop\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, LAPTOP);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: find expense in empty finance tracker -\u003e 0 expenses found */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        deleteAllExpenses();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_CHICKEN;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, LAPTOP);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * box displays {@code Messages#MESSAGE_EXPENSES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "                MESSAGE_EXPENSES_LISTED_OVERVIEW, expectedModel.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 29,
      "zht96830": 4,
      "lim-jiahui": 36,
      "-": 125
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.expensecommands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zht96830"
        },
        "content": "import seedu.address.logic.commands.generalcommands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class HelpCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        getExpenseListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertListMatching(getExpenseListPanel(), getModel().getFilteredExpenseList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 1,
      "zht96830": 2,
      "jamessspanggg": 2,
      "lim-jiahui": 3,
      "-": 99
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    private static final Predicate\u003cExpense\u003e PREDICATE_MATCHING_NO_EXPENSES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cExpense\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Optional\u003cPredicate\u003cExpense\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        model.updateFilteredExpenseList(predicate.orElse(PREDICATE_MATCHING_NO_EXPENSES));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public static void setFilteredList(Model model, Expense... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Expense} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    private static Predicate\u003cExpense\u003e getPredicateMatching(Expense other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        return expense -\u003e expense.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 5,
      "lim-jiahui": 4,
      "-": 30
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.FinanceTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class SampleDataTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    protected FinanceTracker getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "    public void financeTracker_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        Expense[] expectedList \u003d SampleDataUtil.getSampleExpenses();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertListMatching(getExpenseListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 3,
      "lim-jiahui": 4,
      "-": 44
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.logic.commands.generalcommands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "import seedu.address.logic.commands.generalcommands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "public class SelectCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: select the first card in the expense list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: select the last card in the expense list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Index expenseCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + expenseCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        assertCommandSuccess(command, expenseCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: select the middle card in the expense list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: filtered expense list, select index within bounds of address book but out of bounds of expense list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_PHONE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        int invalidIndex \u003d getModel().getFinanceTracker().getExpenseList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        /* Case: filtered expense list, select index within bounds of address book and expense list -\u003e selected */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredExpenseList().size() + 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zht96830"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        /* Case: select from empty finance tracker -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        deleteAllExpenses();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zht96830"
        },
        "content": "                MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected expense.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * 4. {@code Storage} and {@code ExpenseListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lim-jiahui"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getExpenseListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jamessspanggg"
        },
        "content": "     * 4. {@code Storage} and {@code ExpenseListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 15,
      "zht96830": 3,
      "jamessspanggg": 5,
      "lim-jiahui": 14,
      "-": 118
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "import seedu.address.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohyinhao"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyFinanceTracker\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohyinhao": 2,
      "-": 72
    }
  }
]
