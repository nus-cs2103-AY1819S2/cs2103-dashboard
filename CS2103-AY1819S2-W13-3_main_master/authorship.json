[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d The Infinity Machine"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "https://travis-ci.com/CS2103-AY1819S2-W13-3/main[image:https://travis-ci.com/CS2103-AY1819S2-W13-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d What is it about?"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "case141"
        },
        "content": "Have you ever faced the problem of not having a place to store all the information you search online or the notes you take? Well,  we have! Therefore, through our application, The Infinity Machine, we have created a platform where the storing and retrieving of textual information such as research materials can be done efficiently. It also allows you to apply custom made tags and descriptions for easy categorization, search and retrieval."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Target Users"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Tech-savvy university students or researchers who love to use the Command line Interface and wish to organize and tag research information or any other data that they may wish to store."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "case141": 1,
      "-": 35,
      "fterh": 1
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"githubId\": \"DarrenDragonLee\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"displayName\": \"LEE...REN\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"authorNames\": [\"DarrenDragonLee\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"githubId\": \"case141\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"displayName\": \"LOW...SEY\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"authorNames\": [\"case141\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"githubId\": \"suriruhani\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"displayName\": \"RUH...URI\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"authorNames\": [\"suriruhani\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"githubId\": \"fterh\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"displayName\": \"TER...WEI\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"authorNames\": [\"fterh\", \"Fabian\", \"Fabian Terh\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"githubId\": \"DoItTomorrow\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"displayName\": \"YAN...ANG\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \"authorNames\": [\"DoItTomorrow\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 30
    }
  },
  {
    "path": "database.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Algorithms Wikipedia y/Website d/Algorithm basics from wikipedia t/Algorithms t/Wikipedia"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Telecomms: A New Insight y/Journal d/Better way to manage telecommunications t/Telecommunications"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "some title y/some type d/details of thing t/some tag"
      }
    ],
    "authorContributionMap": {
      "DarrenDragonLee": 3
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Tutorial W-13 Group 3: The Infinite Machine"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Cassey Low"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "image::case141.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "{empty}[https://github.com/case141[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Deleting a source"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Undo command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Redo command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Listing command usage under help"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Darren Lee"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "image::darrendragonlee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "{empty}[https://github.com/DarrenDragonLee[github]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Adding a source"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Editting a source"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Listing command usage under help"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Fabian Terh"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "image::fterh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "{empty}[https://github.com/fterh[github]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Generating history of searches made"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Allowing custom command names (aliases)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Listing command usage under help"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Ruhani Suri"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "image::suriruhani.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "{empty}[https://github.com/suriruhani[github]]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Searching a source"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Listing all sources"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Listing command usage under help"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Yang Yang"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "image::doittomorrow.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "{empty}[https://github.com/DoItTomorrow[github]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Generating bibliography"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Generating history of commands entered"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "- Listing command usage under help"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "suriruhani": 33,
      "-": 42,
      "DarrenDragonLee": 16
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S2-W13-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* *Contributing* : We welcome pull requests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* *Email us* : You can also reach us at @comp.nus.edu.sg"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "suriruhani": 3,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d The Infinity Machine - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::restore[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Restore Command feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "The restore feature allows users to use the restore command to retrieve their research data they accidentally deleted."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "The restore feature is facilitated by `Infinity Machine`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `Infinity Machine` with an restore feature, allowing user to restore source from a persistent deleted sources list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it uses:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `DeletedSources.java` -- Here, the logic of running through all the deleted sources in the list."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "(trimmed by space, case insensitive) is implemented."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the restore mechanism behaves at each step."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `Infinity Machine` will be initialized with the initial source database state, by default listing all the sources"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "in an indexed fashion, with all details and in order of their addition."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 1` command and only one entry, the first one, is deleted."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `restore 1` and only one entry will be deleted, which is the source recently deleted."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "`restore` alone, without any arguments, will result in error. See `restore` command for enumerating all database entries."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How restore executes"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 :** Using a simple read and write class in the storage."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of time usage."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2 (current choice):** Using Json Managers and DeletedSources in the Model"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "// end::restore[]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "fterh"
        },
        "content": "// tag::alias[]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d Command Alias feature"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "fterh"
        },
        "content": "The command alias feature allows users to use shorthand commands to rapidly \"get things done\", for instance using `a` instead of `add`, or `c` instead of `count`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "fterh"
        },
        "content": "Users may do one of the following:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "fterh"
        },
        "content": "1) Add a new alias"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "fterh"
        },
        "content": "2) Remove an existing alias"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "fterh"
        },
        "content": "3) List all aliases"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Overview:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "fterh"
        },
        "content": "This feature is backed by an in-memory database implemented as a Java `HashMap\u003cString, String\u003e`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "fterh"
        },
        "content": "A HashMap is chosen for several reasons:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "fterh"
        },
        "content": "* Adding and removing an alias is straightforward (using Java HashMap API) and efficient (`O(1)` time)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "fterh"
        },
        "content": "* Checking whether an alias exists is fast (`O(1)` time)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "fterh"
        },
        "content": "* HashMaps naturally facilitate the process of looking up an associated value with a given key"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "fterh"
        },
        "content": "*Alternative*: An alternative implementation could use a Java `ArrayList`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "fterh"
        },
        "content": "However, that adds additional code complexity, as there needs to be a way of associating 2 strings."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "fterh"
        },
        "content": "For instance, we could create an `ArrayList\u003cAliasWrapper\u003e`, where `AliasWrapper` is a wrapper class to associate 2 strings."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "fterh"
        },
        "content": "However, that is inelegant and inefficient, as opposed to a `HashMap` solution."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "fterh"
        },
        "content": "Furthermore, checking for membership in an `ArrayList` is an `O(N)` operation in an unsorted list, or `O(log(N))` in a sorted list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "fterh"
        },
        "content": "Therefore, due to the key-value association inherent in the idea of an alias manager, a `HashMap` is the most approriate data structure."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "fterh"
        },
        "content": "image::AliasManagerClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Operation:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "fterh"
        },
        "content": "SourceManagerParser detects when a meta-command is entered."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "fterh"
        },
        "content": "A meta-command is one that pertains to AliasManager (and by association SourceManagerParser), e.g. `alias`, `alias-rm`, `alias-ls`, etc."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "fterh"
        },
        "content": "AliasManager exposes the meta-commands it \"uses\", which SourceManagerParser relies on for detection."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "fterh"
        },
        "content": "However, it is acknowledged that this is not strictly necessary."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "fterh"
        },
        "content": "It is safe for SourceManagerParser to redefine these meta-commands."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "fterh"
        },
        "content": "The default meta-commands that AliasManager exposes should be thought of as recommended, but not mandatory, meta-commands."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "fterh"
        },
        "content": "AliasManager is fundamentally command-agnostic; it does not care what meta-commands are actually used."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "fterh"
        },
        "content": "When a meta-command is detected to have been entered, SourceManagerParser delegates it to the appropriate AliasMetaCommandParser to handle."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "fterh"
        },
        "content": "For instance, `alias FOO BAR` is delegated to the AliasAddMetaCommandParser (a concrete subclass of AliasMetaCommandParser) with the arguments \"FOO BAR\"."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "fterh"
        },
        "content": "The AliasMetaCommandParser concrete subclasses parses the arguments and returns a DummyCommand response object."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "fterh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "fterh"
        },
        "content": "This delegation design pattern is chosen for 2 reasons:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "fterh"
        },
        "content": "Firstly, it hides complexity in SourceManagerParser by abstracting the logic of interacting with AliasManager away."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "fterh"
        },
        "content": "This makes SourceManagerParser more readable, declarative, and maintainable."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "fterh"
        },
        "content": "This also allows us to practice the Single Responsibility Principle and Single Layer of Abstraction Principle, among others."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "fterh"
        },
        "content": "Secondly, it improves testability by facilitating unit testing of smaller blocks of logic, rather than a single giant block."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "fterh"
        },
        "content": "In normal operation, when the user uses an alias, SourceManagerParser parses the user input to extract the \"command word\"."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fterh"
        },
        "content": "It checks whether the \"command word\" is an alias using AliasManager\u0027s `isAlias()` method."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "fterh"
        },
        "content": "If so, it fetches the original command that the alias is associated to using AliasManager\u0027s `getCommand()` method"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "fterh"
        },
        "content": "(which returns an `Optional\u003cString\u003e` - this forces the caller to unwrap the optional and avoids null pointer exceptions)."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "fterh"
        },
        "content": "Finally, SourceManagerParser recursively calls itself using the original command retrieved from AliasManager to execute the original command that the alias is associated with."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "fterh"
        },
        "content": "**Alternative:** An alternative implementation could be to modify the `HashMap\u003cString, String\u003e` in AliasManager into `HashMap\u003cString, Class\u003c? extends Command\u003e\u003e`. The value is thus a Command class."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "fterh"
        },
        "content": "When a valid alias is used, AliasManager would instantiate the associated class and return the instance."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fterh"
        },
        "content": "However, this implementation is disfavored, for the following reasons."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fterh"
        },
        "content": "Firstly, SourceManagerParser works with both Command classes and Parser classes."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "fterh"
        },
        "content": "Some commands, for instance `add`, have accompanying arguments to be parsed."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fterh"
        },
        "content": "For these \"parsable commands\", SourceManagerParser instantiates a CommandParser and calls its `.parse()` method."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "fterh"
        },
        "content": "For other \"non-parsable commands\", for instance `clear`, SourceManagerParser instantiates and returns the command directly."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "fterh"
        },
        "content": "Therefore, if we were to adopt this implementation, we would require 2 separate HashMaps mapping aliases to `Class\u003c? extends Command\u003e` and `Class\u003c? extends Parser\u003c? extends Command\u003e\u003e`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "fterh"
        },
        "content": "This introduces a lot of complexity into AliasManager, and results in some duplication of logic across SourceManagerParser and AliasManager."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "fterh"
        },
        "content": "Specifically, the logic that distinguishes between commands/aliases that map to `Command` and those that map to `Parser` will be duplicated in both SourceManagerParser and AliasManager."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "fterh"
        },
        "content": "This violates the DRY principle."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "fterh"
        },
        "content": "Furthermore, doing so increases coupling across the project, as there are now associations between AliasManager and the various Commands/Parsers. We want to minimize coupling whenever possible."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "fterh"
        },
        "content": "Therefore, by simply mapping aliases to commands, and having a single layer of recursion in SourceManagerParser whereby it calls itself with the actual command, we avoid all the above problems."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "fterh"
        },
        "content": "We improve cohesion, reduce coupling, drastically reduce complexity, and improve testability."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Persistence:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "fterh"
        },
        "content": "The usefulness of aliases would be significantly diminished if they do not persist between sessions."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "fterh"
        },
        "content": "Therefore, we want aliases to be stored on disk and automatically loaded in future sessions."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "fterh"
        },
        "content": "To accomplish this, we create an `AliasStorage` interface, and an implementing class `ConcreteAliasStorage`."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "fterh"
        },
        "content": "We also modify AliasManager to instantiate ConcreteAliasStorage upon its own instantiation."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "fterh"
        },
        "content": "ConcreteAliasStorage is responsible for reading/writing from/to disk,"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fterh"
        },
        "content": "and therefore converting the in-memory database (HashMap object) of aliases into/from an encoded representation."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fterh"
        },
        "content": "When AliasManager\u0027s aliases database is mutated (i.e. create or remove alias), it calls ConcreteAliasStorage\u0027s `saveAliases()` method."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fterh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "fterh"
        },
        "content": "**Alternative:** A more elegant implementation would be to apply the observer pattern,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "fterh"
        },
        "content": "with the observer observing the aliases HashMap database, and calling `saveAliases()` when it is mutated."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "fterh"
        },
        "content": "However, given the simplicity of AliasManager, we believe that applying the observer pattern will result in unnecessary overhead,"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "fterh"
        },
        "content": "with minimal (or no) tangible benefits."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "fterh"
        },
        "content": "Firstly, the aliases HashMap database is a private field, and only accessible within AliasManager."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "fterh"
        },
        "content": "Secondly, there are only 2 methods which would mutate the aliases HashMap database."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "fterh"
        },
        "content": "Within ConcreteAliasStorage, its `saveAliases()` method encodes aliases and commands into a string,"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "fterh"
        },
        "content": "in the following format: `alias1:command1;alias2:command2;alias3:command3`."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "fterh"
        },
        "content": "Conversely, `readAliases()` parses this string and reconstructs the aliases HashMap database."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "fterh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "fterh"
        },
        "content": "**Alternative:** We opted to use our own very simple encoding scheme instead of JSON."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "fterh"
        },
        "content": "JSON is more suited for \"document-like\" objects with different properties, some of which are possibly nested multiple layers."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "fterh"
        },
        "content": "However, in our case, we only have a series of key:value pairs, in a predictable form, with no nesting."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "fterh"
        },
        "content": "Therefore, we thought that a simple semicolon-separated key:value pair encoding scheme would suffice."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "// tag::search[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d\u003d Search feature"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "The search feature is facilitated by `Infinity Machine`."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "It extends `Infinity Machine` with an find feature, allowing user to search through source entries by the title, type, detail and/or tags."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Additionally, it uses:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* `SourceContainsKeywordsPredicate.java` -- Here, the logic of running through all the respective fields of all the sources and matching it with the user inputs"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "(trimmed by space, case insensitive) is implemented. It is split by the CLI prefixes and implements conjunction logic."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Given below is an example usage scenario and how the search mechanism behaves at each step."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Step 1. The user launches the application for the first time. The `Infinity Machine` will be initialized with the initial source database state, by default listing all the sources"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "in an indexed fashion, with all details and in order of their addition."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Step 2. The user executes `search i/footitle1` command and only those sources that have their title as `footitle1` are displayed."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Step 3. The user executes `search i/footitle6 y/website` and only those entries are listed that have both their title as `footitle1` and type as `website`."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "`search` alone, without any arguments, will result in error. See `list` command for enumerating all database entries."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How search executes"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* **Alternative 1 (current choice):** Runs through all entries and matches the arguments, field by field."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Cons: May have performance issues in terms of time usage."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* **Alternative 1 (current choice):** Using streams and StringUtil functions."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Cons: Not the most efficient implementation."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "// end::search[]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Count feature"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "The count command is facilitated by `Infinity Machine`."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `Infinity Machine with a count functionality calculating the total number of sources retrieved from the database.`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it uses:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "* `FilteredSourceList` --"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the count mechanism behaves at each step."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `Infinity Machine` will be initialized with the initial source database state, by default listing all the sources"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "in an indexed fashion, with all details and in order of their addition."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `count` command. All entries retrieved using the command entered will be counted."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "`list` does not take any arguments. If given, it will ignore it."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes a \u0027search\u0027 command to search for all entries matching a certain keyword."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user executes `count` command again. The count of the total number of entries retrieved through the `search`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "command will be returned."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "Alternative: It can be implemented in the Model and ModelManager instead of directly in the execute command however, this is an inefficient implementation and thus"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "is not used."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d\u003d List feature"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "The list command is facilitated by `Infinity Machine`."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "It extends `Infinity Machine` with a list functionality, enumerating all or a specific number of"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "entries in the source database and their details, in the order of their addition."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "It has mainly two usages: +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "1) Without a parameter, as just `list` : enumerates all the entries of the source database with their details +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "2) With a parameter N : where N is a positive integer, enumerates only the top - N or first - N sources from the source database +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Additionally, it uses:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* `PREDICATE_SHOW_ALL_SOURCES` -- when the user does not pass an argument to the list command, all sources must be displayed displayed."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "This predicate results `true` for every source tested."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* `makePredicateForTopN` -- when the user passes an argument, only first N sources must be listed."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "This method returns a new object of type `Predicate\u003cSource\u003e` that keeps track of the `count` of sources,"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "displaying `true` for the first N and `false` for the rest."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* `targetIndex` -- the number N up to which the most recent sources are to be displayed to the user. Maintained internally."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Set to the current size of the database if the value input is more that this current size."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Given below is an example usage scenario and how the list mechanism behaves."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Step 1. The user launches the application for the first time. The `Infinity Machine` will be initialized with the initial source database state, by default listing all the sources"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "in an indexed fashion, with all details and in order of their addition."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Step 2. The user executes an `add` command to add another source entry to the database."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Step 3. The user executes `list` command (with no arguments). All the entries in the database are listed again, showing all the details and"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "in the order of their addition."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Step 4. The user now executes `delete` to delete an entry."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Step 5. The user executes `list` command again. All the updated entries in the database, leaving out the last deleted one,  are listed again, showing all the details and"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "in the order of their addition."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Step 6. The user now executes `list 2` command. The first 2 entries akin to the previous output are displayed."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Step 7. The user now executes `list 3 5` command. An invalid command format exception is thrown, prompting the user"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "to enter exactly 1 or no arguments."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Step 8. The user now executes `list 3` command. The first 3 entries of the entire source database are listed with all their details."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How list \u0026 list n executes"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* **List (current choice):** Filters using predicate that returns `true` for every source."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Cons: May have performance issues in terms of time usage."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* **List N (current choice):** Filters using predicate that returns `true` for first N sources."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Pros: Easy to implement. Intuitive to understand"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Cons: Can be made faster and cleaner using List operations or streams."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the list/list n commands"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* **Alternative 1 (current choice):** Forms predicates based on the input parameter, maintain targetIndex."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Cons: Maybe not the best implementation."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "// tag::devorder[]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Custom Order Command"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "The function is currently implemented using the functionality of the source model. It allows users to designate a source they want to move and a location they want to move it to."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "The primary uses of this feature are to facilitate source management and ordering sources by some user defined metric like personal importance."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Given the function works purely on the parameters the user enters, a parser file was necessary to filter out invalid inputs like alphabets or special characters."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Further consideration was necessary because of nature of the inputs. The inputs are array indexes which are very prone to being out or bounds that can result in system failures. Therefore, in addition to traditional exception handling, the function also implements its own checks for invalid user indexes."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "These check include the following:"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* Checking for inputs which are 0 or smaller"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** The user entered input follows traditional listing which starts from 1.  However array indexes in Java start from 0.  Therefore, 1 is always subtracted from any input added."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** This means that any user input less than 1 are automatically invalid since that index cannot possibly exist"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* Checking for inputs which are larger than the size of the list of sources"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** The classic out of bounds exception occurs when a function attempts to extract an index from a point larger than the list\u0027s current size."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** The function therefore checks the user input to ensure that it is always within the size of the list."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Once the inputs are deemed as valid, the actual moving can begin. The model uses a list implementation for its primary storage model. This means that when a source is moved to a location, every source around it will need to be shifted to the front or the back depending on where the original source originated at."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Thankfully, the Java List implementation does come with the function to add an item to the lest at a particular index, pushing everything aside automatically. The function called `addSourceAtIndex` was added to the model which took in the source to add as well as an index which the source should be added at."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "The function takes the following steps to make the swap:"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* Step 1 -- The function stores a copy of the source to be moved locally"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** The source to be moved is found using the index entered by the user and the `List.get` function that takes in an index and returns the source to be moved"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* Step 2 -- The function then deletes the source to be moved from the list"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** The `deleteSource` function automatically moves sources up to fill up the void left by the deleted source"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** A deletion is necessary in this step because the model does not accept duplicate sources. Therefore, adding the source to be moved first before deleting it would result in the function failing."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* Step 3 -- The `addSourceAtIndex` function is used to place the recently deleted source back into the list at the designated location."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* Step 4 -- The function then commits the database to save the recent changes."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "// end::devorder[]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "\u003d\u003d\u003d Biblio feature"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "The list command is facilitated by `Infinity Machine`."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "It extends `Infinity Machine` with a bibliography generating functionality, generating a bibliographical entry of the appropriate style based on the requested format and source index."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "Additionally, it uses:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "* `FilteredSourceList` --"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "Given below is an example usage scenario and how the biblio mechanism behaves."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "Step 1. The user launches the application for the first time. The `Infinity Machine` will be initialized with the initial source database state, by default listing all the sources"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "in an indexed fashion, with all details and in order of their addition."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "Step 2. The user executes an `add` command to add another source entry to the database."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "Step 3. The user executes a `biblio` command with the requested style and the index of the added source as arguments. A bibliographical entry of the appropriate style is displayed."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "*Alternative*: As the bibliographic entry for each style is fixed, they may be generated on creation of a source. However, a user is not likely to need the entries for all sources and in all styles. If additional styles are added, this would result in even more clutter. As such, an as-needed implementation is preferable."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of research data"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "* needs efficient search and retrieval of research data"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "* wants a safe place to save and store information"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage research data faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`* * *` |user |be able to add a new source |store my research materials"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`* * *` |user |be able to remove sources I do not want |have a clean and updated database"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`* * *` |user |edit an existing source |change a source without deleting it"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`* * *` |user |be able to tag my sources |easily determine what this source is about"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`* * *` |user |be able to search for sources by type, name and tags |easily navigate through my sources"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`* * *` |user |see all the sources that I have stored |have an overview of what I have at the moment"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`* * *` |new user |have access to all the commands available |have a guide in case I forget how to use the application"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`* *` |user |be able to hide sensitive data |maintain the privacy of my research materials"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`* *` |user |my incorrect searches to show me the closest search terms |still find what I want even if I do not know what it is"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`* *` |user |be able to customise the application commands to my own linking |have easy to use aliases for my commands"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`* *` |user |be able to view past commands |easily trace back what I added, removed or modified"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`* *` |user who is prone to making mistakes |be able to undo previous commands |retrieve lost sources if I accidentally deleted them"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`* *` |user |be able to order the sources in the application however I like |put important sources on top or group them together"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`*` |very picky user |be able to customise the word colour in the application |make the application personalized to me"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|`*` |user |see some ASCII art representations in the application |have nicer things to look at other than just text"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "(For all use cases below, the *System* is the `Infinity Machine` and the *Actor* is the `User`, unless specified otherwise)"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Add a source"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to add a specified source to the database"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine adds the source to the database"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "3.  User requests to list all sources in the database"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "4.  The Infinity Machine displays all sources in the database including the newly added one"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1b. The command entered is invalid. Either it is misspelled or does not have the correct arguments and parameters."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1b1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Delete a source"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to list all sources"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine shows a list of the sources currently in the database"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "3.  User requests to delete a specific source in the list"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "4.  The Infinity Machine deletes that source as per the user\u0027s request"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 2a. There are no sources in the list. The database is empty."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3a. The given index is invalid. Either it is a negative number or exceeds the current list total."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3a1. The Infinity Machine shows an error message."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3b. The command entered is invalid. Either it is misspelled or does not have the correct arguments and parameters."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3b1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Edit a source"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to list all sources"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine shows a list of the sources currently in the database"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "3.  User requests to edit a specific source in the list with some parameters"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "4.  The Infinity Machine modifies that source as per the user\u0027s request"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 2a. There are no sources in the list. The database is empty."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3a. The given index is invalid. Either it is a negative number or exceeds the current list total."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3a1. The Infinity Machine shows an error message."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3b. The command entered is invalid. Either it is misspelled or does not have the correct arguments and parameters."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3b1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Search for a source"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to search for a source with specific keywords"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine shows a list of the sources currently in the database that match the user\u0027s keywords"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. Either it is misspelled or does not have any keywords."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 2a. There are no sources in the list. The database is empty."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends with nothing being displayed."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 2b. There are no sources in the list that match the user\u0027s keywords."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends with nothing being displayed."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: List the sources in the database"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to list all sources"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine shows a list of the sources currently in the database"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. The command was misspelled."
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 2a. There are no sources in the list. The database is empty."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends with nothing being displayed."
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Reorder sources in the database"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to list all sources"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine shows a list of the sources currently in the database"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "3.  User requests to move a specific source in the list to another position either further up or below"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "4.  The Infinity Machine moves that source to the targeted location as per the user\u0027s request"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 2a. There are no sources in the list. The database is empty."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3a. The given source index is invalid. Either it is a negative number or exceeds the current list total."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3a1. The Infinity Machine shows an error message."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3b. The given location index is invalid. Either it is a negative number or exceeds the current list total."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3b1. The Infinity Machine shows an error message."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3c. The command entered is invalid. Either it is misspelled or does not have the correct arguments and parameters."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3c1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3d. The source index and the location index are the same."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3d1. The Infinity Machine performs the move but nothing changes."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends with no change to the database."
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Generate bibliography entry of a source"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to list all sources"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine shows a list of the sources currently in the database"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "3.  User requests to generate a bibliography entry of a specific source in the list"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "4.  The Infinity Machine generates a bibliography entry of that source as per the user\u0027s request in a predefined citation standard"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 2a. There are no sources in the list. The database is empty."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3a. The given index is invalid. Either it is a negative number or exceeds the current list total."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3a1. The Infinity Machine shows an error message."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3b. The command entered is invalid. Either it is misspelled or does not have the correct arguments and parameters."
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3b1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: List the history of entered commands"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to list all previously entered commands"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine shows a list of the commands entered previously"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. The command was misspelled."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 2a. There are no previous commands."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends with nothing being displayed."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: List the search history of database"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to list all previously searched entities"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine shows the search history of the application"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. The command was misspelled."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 2a. There are no previous search commands."
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends with nothing being displayed."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Creating an alias of a command"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to create an alias of a command"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine creates and assigns the user defined alias to the command"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "3.  User executes that command with the alias"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "4.  The Infinity Machine executes the user requested command as though the original command was entered"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. Either the command was misspelled or the parameters entered were incorrect."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1b. The alias the user is assigning already exists."
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1b1. The Infinity Machine will override the original aliased command with the new command entered."
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1b. The command the user is attempting to alias is already an alias."
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1b1. The Infinity Machine shows an error message."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3a. The alias creation was not successful."
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3a1. The Infinity Machine shows an error message since the command is invalid."
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Removing an alias of a command"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to remove an alias of a command"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine removes the alias to the command"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "3.  User executes that command with the now removed alias"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "4.  The Infinity Machine will not execute the command since it is no longer an alias and instead displays an error"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. Either the command was misspelled or the parameters entered were incorrect."
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1b. The alias the user is attempting to remove does not exist."
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1b1. The Infinity Machine will not perform any action."
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 2 with no change."
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3a. The alias was not successful removed."
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3a1. The Infinity Machine will execute the command when the alias is used."
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: List all the aliases currently active"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to list all active aliases"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine shows a list of the active aliases for the various commands"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. The command was misspelled."
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 2a. There are no aliases in the application."
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends with nothing being displayed."
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Count the total number of sources in the database"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to count how many sources there are in the database"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine shows the number of sources in the database"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. The command was misspelled."
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Undo a previous command"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to undo a previous command"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine undoes the previous command and sets the database to its state before the command"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. The command was misspelled."
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1b. There are no previous commands."
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends with no changes to the database."
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1c. All previous commands are not \"undoable\" (they do not modify the sources or are valid redo commands)"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1c1. The Infinity Machine will not undo anything and the sources will be unchanged."
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends with no changes to the database."
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Redo a previous command"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to redo a previous command"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine redoes the previous command and sets the database to its state after the command"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. The command was misspelled."
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1b. There are no previous commands."
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends with no changes to the database."
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1c. All previous commands are not \"redoable\" (they do not modify the sources or are valid undo commands)"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1c1. The Infinity Machine will not undo anything and the sources will be unchanged."
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends with no changes to the database."
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Enable panic mode"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to enable panic mode"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine goes into panic mode and hides all sources"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "3.  User requests to list all sources"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "4.  The Infinity Machine will display nothing since it is in panic mode"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. The command is misspelled."
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1b. The system is already in panic mode."
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1b1. The Infinity Machine does not perform any action since it is already in panic mode."
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case continues at step 3."
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3a. The earlier enable panic command is invalid."
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3a1. The Infinity Machine displays all sources since it did not enter panic mode."
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Disable panic mode"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to disable panic mode"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine goes into normal mode and reveals all sources"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "3.  User requests to list all sources"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "4.  The Infinity Machine will display all sources since it is no longer in panic mode"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. The command is misspelled."
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1b. The system is already in normal mode."
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1b1. The Infinity Machine does not perform any action since it is already in panic mode."
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case continues at step 3."
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3a. The earlier enable panic command is invalid."
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3a1. The Infinity Machine displays nothing since it is still in panic mode."
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3b. There are no sources in the list. The database is empty."
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3b1. The Infinity Machine displays nothing since there are no sources."
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Clear all sources in the database"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests to clear all sources in the database"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The Infinity Machine clears all the sources in the database making it empty"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "3.  User requests to list all sources"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "4.  The Infinity Machine will display nothing since all the sources have been removed"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. The command was misspelled."
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 3a. The earlier clear command is invalid."
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 3a1. The Infinity Machine displays all sources it has since it did not lose any sources."
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Use case: Exit application"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "1.  User requests exit application"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "2.  The infinity machine saves and shuts down"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* 1a. The command entered is invalid. The command was misspelled."
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** 1a1. The Infinity Machine shows an error message together with a help text to guide the user along."
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Use case resumes at step 0."
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 100,
      "DoItTomorrow": 21,
      "-": 1019,
      "fterh": 108,
      "DarrenDragonLee": 603
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "case141"
        },
        "content": "\u003d The Infinity Machine - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W13-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\"To understand matters rightly we should understand their details; and as that knowledge is almost infinite, our knowledge is always superficial and imperfect.\" - Francois de La Rochefoucauld"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "The knowledge in the universe is infinite and there exists many things that are still beyond our comprehension. However, that does not mean that the process of learning what we have discovered should be a difficult one."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Introducing the Infinity Machine, an application for efficient storing and retrieving of textual information on research material by allowing users to apply to it custom made tags and type for easy search and retrieval. Intended for tech-savvy university students who are able to use CLI and wish to organize and tag research information or any other data that they may wish to store."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "No longer will you miss out on important sources or developments in your field of interest.  No longer will you forget where you read something and struggle to find it again."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ".  Download the latest `infinitymachine.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Infinity Machine."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* *`list`* : lists all sources currently in the Infinity Machine"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* **`add`**`i/Algorithms Wikipedia y/Website d/Basic definitions and history of algorithms t/Algorithms t/Computer Science` : adds a source named `Wikipedia Algorithms` to the Infinity Machine."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* **`delete`**`3` : deletes the 3rd source shown in the current list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* *`exit`* : exits the the Infinity Machine"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/TITLE`, `TITLE` is a parameter which can be used as `add n/Wikipedia Algorithms`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* Items in square brackets are optional e.g `n/TITLE [t/TAG]` can be used as `n/Wikipedia Algorithms t/Wikipedia` or as `n/Wikipedia Algorithms`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/Computer Science`, `t/Computer Science t/Algorithms` etc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `i/TITLE y/TYPE`, `y/TYPE i/TITLE` is also acceptable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "case141"
        },
        "content": "Adds a new source to the list of sources +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Format: `add n/TITLE y/TYPE d/DETAILS [t/TAG]...`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "case141"
        },
        "content": "A source can have any number of tags (including 0)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* `add i/Algorithms Wikipedia y/Website d/Basic definitions and history of algorithms t/Algorithm t/Wikipedia`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* `add i/Artificial Intelligence IEEE y/Journal Article d/introductory facts on artificial intelligence t/Science Journal t/AI`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "case141"
        },
        "content": "\u003d\u003d\u003d Deleting a source : `delete`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "case141"
        },
        "content": "Deletes the specified source. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "case141"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "case141"
        },
        "content": "* Deletes the source at the specified `INDEX`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "case141"
        },
        "content": "* The index refers to the index number shown in the displayed source list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "case141"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "case141"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "case141"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "case141"
        },
        "content": "Deletes the 2nd source in the database."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "case141"
        },
        "content": "* `search algorithms` +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "case141"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "case141"
        },
        "content": "Deletes the 1st source in the results of the `find` command."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Restoring a source : `restore`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the specified source. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `restore INDEX`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* Restores the source at the specified `INDEX`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed deleted source list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* `restore 2` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the 2nd deleted source in the database."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* `list-delete` +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`restore 1` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the 1st deleted source in the database."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "case141"
        },
        "content": "\u003d\u003d\u003d Editing a source : `edit`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "case141"
        },
        "content": "Edits an existing source in the database. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Format: `edit INDEX [i/TITLE] [y/TYPE] [d/DETAILS] [t/TAG]...`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "case141"
        },
        "content": "* Edits the source at the specified `INDEX`. The index refers to the index number shown in the displayed source list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "case141"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "case141"
        },
        "content": "* For the editing of tags, any existing tags to be kept must be re-entered."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "case141"
        },
        "content": "* If the existing tags are `Algorithm` and `Wikipedia` and the user wants to keep only `Algorithm`, they must enter the command `edit 1 t/Algorithm`."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "case141"
        },
        "content": "* Entering just `t/` without any thing after that will simply delete all tags for that entry."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "case141"
        },
        "content": "* `edit 2 n/Photosynthesis Wikipedia t/Photosynthesis t/Biology` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "case141"
        },
        "content": "Edits the title and tags of the source to be `Photosynthesis Wikipedia` and `Photosynthesis, Biology` respectively."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "case141"
        },
        "content": "* `edit 5 t/` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "case141"
        },
        "content": "Edits the 5th source and clears all its existing tags."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "case141"
        },
        "content": "\u003d\u003d\u003d Searching a source: `search`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Searches for entries amongst the list of sources. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Able to search by title, type, detail and tags as specified by the CLI prefixes."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Finds all entries with an (exact, case insensitive) matching field as entered by the user. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Searches with multiple arguments are taken as conjunction searches, i.e all those sources"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "that satisfy all the keyword values are shown."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "It is case insensitive (eg. `RSAalgorithm` is same as `rsaalgorithm`) +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Matching is exact (eg. `Algorithm` will not match with `Algorithms`) +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Format: `search [n/TITLE] [y/TYPE] [d/DETAILS] [t/TAG]`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "case141"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* There can have any number of tags but minimally 1 (just `search` results in error. To enumerate all entries, check out `list` command instead)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`, `FooTitle` will not match `FooTitle1`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* Search implemented as a logical AND. eg. `search i/algorithm y/website` results in all those sources"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "that have title `algorithm` AND type `website`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* `search i/Algorithms` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Returns the source(s) with the title `algorithms`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* `search y/website t/ArtificialIntelligence t/MachineLearning` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Returns any source having tags `ArtificialIntelligence` and `MachineLearning` and of type `website`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d\u003d Listing all sources : `list`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Displays a list of all sources currently in the database, without filtering. +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Optional argument N used to list only the top N sources to the user. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Format: `list [N]`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* Lists all sources present in the database in the order of their addition, if no argument passed"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* Lists top N sources if a single integer N is passed"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* Throws error if more than one arguments are passed"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* The paramter passed, N, must be a positive integer else error is thrown"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* Tags, Details, Type are also displayed along with the sources"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "****"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d\u003d Reordering sources to your liking : `order`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Moves the specified source from one position to another as defined by the user. +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Format: `delete ORIGINAL_INDEX NEW_INDEX`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "****"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* Obtains the source at the specified `ORIGINAL_INDEX` and moves it to the `NEW_INDEX`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* The index refers to the index number shown in the displayed source list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* The specified source will replace the original source at that index."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** If the souce was shifted forward, sources before the `NEW_INDEX` will be shifted back and the source designated by `ORIGINAL_INDEX` will take the position of `NEW_INDEX`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** If the souce was shifted backwards, sources after the `NEW_INDEX` will be shifted forward and the source designated by `ORIGINAL_INDEX` will take the position of `NEW_INDEX`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* `order 1 4` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Moves the source located at index 1 to index 4."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* `order 1 6` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "If there are only 6 sources in the database, the command moves the source located at index 1 to last position in the list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "case141"
        },
        "content": "\u003d\u003d\u003d Generate bibliography entry : `biblio`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "Generates an bibliographical entry from the source at the specified. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "Format: `biblio INDEX`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "****"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "* Generates a bibliographical entry from the source at the specified `INDEX`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "* The index refers to the index number shown in the displayed source list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "****"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "case141"
        },
        "content": "\u003d\u003d\u003d Listing history of searches made : `searchhistory`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "case141"
        },
        "content": "Lists the results of all searches made using the `search` command recently. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "case141"
        },
        "content": "Format: `searchhistory`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d Command aliases : `alias`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Creating an alias: `alias`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fterh"
        },
        "content": "Allows the user to create aliases create aliases for commands. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fterh"
        },
        "content": "Format: `alias COMMAND ALIAS`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fterh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias count c` (`c` is now a valid pseudo-command that works exactly like `count`)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias invalid i` (`i` is now an invalid pseudo-command that works exactly like `invalid`)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fterh"
        },
        "content": "The user is responsible for ensuring that he is creating aliases for valid commands."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fterh"
        },
        "content": "The successful creation of an alias does not provide any guarantee of the validity of the associated command."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fterh"
        },
        "content": "If the user attempts to add an alias that has already been added, the old one will be overwritten. For example:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias count c`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias invalid c`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "fterh"
        },
        "content": "`c` is now an alias for the invalid command `invalid`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "fterh"
        },
        "content": "The command may not be another alias. The alias may not be a command."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias count ct` (`ct` is now an alias for `count`)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias ct c` (this is invalid because `ct` is another alias)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias count list` (this is invalid because `list` is a command)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "fterh"
        },
        "content": "The alias must be syntatically valid. A valid syntax may only contain alphabets."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias list l` (valid)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias count ct` (valid)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias clear $` (invalid)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Removing an alias: `alias-rm`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fterh"
        },
        "content": "Allows the user to remove previously-defined aliases. +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fterh"
        },
        "content": "Format: `alias-rm ALIAS`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "case141"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias count c` (`c` is now an alias for `count`)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias-rm c` (`c` is no longer an alias for `count`)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "fterh"
        },
        "content": "If the user attempts to remove a non-existent alias, nothing happens."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "fterh"
        },
        "content": "`alias-rm` only guarantees that after it is performed, the alias argument does not exist."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all aliases: `alias-ls`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fterh"
        },
        "content": "Lists all defined aliases and their associated commands. +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "fterh"
        },
        "content": "Format: `alias-ls`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Alias persistence"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "fterh"
        },
        "content": "Aliases are persistent across usage sessions."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "fterh"
        },
        "content": "When an alias is created or removed, this is recorded to disk."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "fterh"
        },
        "content": "No action is required on the user\u0027s part."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Counting total number of sources: `count`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Counts and returns the total number of source entries retrieved. +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `count`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* `count` +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Result: `Total number of source(s): 6` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Counts the total number of sources retrieved from the database."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "case141"
        },
        "content": "Allows the user to reverse the last performed undoable action. +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "case141"
        },
        "content": "Undoable commands: those commands that modify the source\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "case141"
        },
        "content": "* `delete Algorithms` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "case141"
        },
        "content": "`undo` (reverses the `delete Algorithms` command) +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "case141"
        },
        "content": "Allows user to redo the last performed action. +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d Enabling panic mode : `panic`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "fterh"
        },
        "content": "Allows user to temporarily hide data. +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "fterh"
        },
        "content": "Format: `panic`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d Enabling panic mode : `unpanic`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "fterh"
        },
        "content": "Restores user data. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "fterh"
        },
        "content": "Format: `unpanic`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "case141"
        },
        "content": "\u003d\u003d\u003d Autocorrect (\u0027Did you mean\u0027) : \u003cno command\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "case141"
        },
        "content": "Suggests commands to the users when they get the spelling wrong. +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "case141"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "case141"
        },
        "content": "* `delete Algorith` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "case141"
        },
        "content": "`Did you mean: Algorithms`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Research materials can be very sensitive and private especially for high profile researchers. The Infinity Machine hopes to be able to help researchers by encrypting their data for only authorised viewers to access."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "Will allow users to generate simple encryption keys which will help keep their research materials secure."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Infinity Machine folder."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* *Add* `add i/TITLE y/TYPE d/DETAILS [t/TAG]...` +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "e.g. `add i/Artificial Intelligence IEEE y/Journal Article d/Landmark paper on perils of artificial intelligence t/Science Journal t/AI`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "* *Restore* : `restore INDEX` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `restore 3`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* *Edit* : `edit INDEX i/TITLE y/TYPE d/DETAILS [t/TAG]...` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "e.g. `edit 2 i/Photosynthesis Wikipedia t/Photosynthesis t/Biology`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "case141"
        },
        "content": "* *Search* : `search [KEYWORD] [KEYWORD]...` +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "case141"
        },
        "content": "e.g. `search algorithm journal`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "case141"
        },
        "content": "* *Biblio* : `biblio`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "case141"
        },
        "content": "* *Search History* : `searchhistory`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "case141"
        },
        "content": "* *Define Command* : `definecommand c/COMMAND a/ALIAS` +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "case141"
        },
        "content": "e.g. `definecommand c/edit a/e`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "fterh"
        },
        "content": "* *Panic* : `panic`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "fterh"
        },
        "content": "* *Unpanic* : `unpanic`"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 26,
      "DoItTomorrow": 6,
      "case141": 59,
      "-": 206,
      "DarrenDragonLee": 50,
      "fterh": 60
    }
  },
  {
    "path": "docs/team/darrendragonlee.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d Darren Lee Wei Sheng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d PROJECT: The Infinity Machine"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "The Infinity Machine is a desktop application that lets users store research materials for future use. It provides a quick and easy way for tech-savvy users, like university students or researchers, to manage and organise their research materials."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "The user interacts with the application using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* *Major enhancement*: Added the Custom Order command to the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** What it does: This function allows greater flexibility and personalisation for the application by giving users the ability to modify the order in which their sources are displayed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** Justification: This feature improves the product significantly because it allows users greater customisation options for their own personal sources which enhances the management component of the application. More important and critical sources can be given priority and placed on top while older or outdated sources can be relegated to the bottom of the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** Implementation: This new feature required additional model functionality which needed to be added and tested thoroughly before deployment."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003ddarrendragonlee[Project Dashboard]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*** Managed and maintained the team\u0027s AboutUs page, ensuring images, names and links are up to date (Pull Requests https://github.com/CS2103-AY1819S2-W13-3/main/pull/43[#43], https://github.com/CS2103-AY1819S2-W13-3/main/pull/58[#58], https://github.com/CS2103-AY1819S2-W13-3/main/pull/61[#61])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** Model development:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*** Designed and implemented a brand new model for research sources based on the original AddressBook implementation (Pull Requests https://github.com/CS2103-AY1819S2-W13-3/main/pull/54[#54], https://github.com/CS2103-AY1819S2-W13-3/main/pull/69[#69])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "**** Ultimately unused in the final version of the application but was important in guiding the reintegration of the final source model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** Integration of existing functions:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*** Updated the existing add and edit commands to be able to incorporate research sources (Pull request https://github.com/CS2103-AY1819S2-W13-3/main/pull/88[#88])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "**** Refactored a significant amount of code to ensure functionality across the entire model."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*** Made comprehensive overall updates to the User Guide which made it more accurate and inclusive (Pull request https://github.com/CS2103-AY1819S2-W13-3/main/pull/133[#133])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*** Added a section on User Stories to the Developer Guide to better direct the development of the application (Pull request https://github.com/CS2103-AY1819S2-W13-3/main/pull/125[#125])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*** Added a large section encompassing all the use cases for every function in the application to the Developer Guide to assist in testing the functions for the correct outputs (Pull request https://github.com/CS2103-AY1819S2-W13-3/main/pull/134[#134])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "*** Offered technical assistance to team mates by providing in depth code analysis for pull requests (Pull request https://github.com/CS2103-AY1819S2-W13-3/main/pull/128[#128])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "include::../UserGuide.adoc[tag\u003dorder]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "include::../UserGuide.adoc[tag\u003dadd]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "include::../UserGuide.adoc[tag\u003dedit]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddevorder]"
      }
    ],
    "authorContributionMap": {
      "DarrenDragonLee": 65
    }
  },
  {
    "path": "docs/team/fterh.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d Fabian Terh Jun Wei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d PROJECT: Infinity Machine"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "Infinity Machine is a source manager to be used by tech-savvy university students who are comfortable with the command line interface (CLI)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "* *Major enhancement*: added *the ability to add, remove, and manage command aliases*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "** What it does: allows the user to define custom aliases for commands, which persist across sessions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "** Justification: This feature improves the product significantly because a user can:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "(1) create custom memorable alises for any of the existing commands;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "(2) work more efficiently by creating shortcuts for lengthy and commonly-used commands"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "** Highlights: This enhancement affects the way user input is parsed and executed,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "both for existing commands and commands to be added in the future."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "It required an extensive analysis of various design approaches."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "The implementation was challenging because:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "*** There are different classes of commands that are parsed and handled in different ways."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "This enhancement must be agnostic to these various classes of commands,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "and must potentially work with any new future classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "*** This enhancement must both be backward-compatible with existing commands and also transparent to implementors of future commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "In other words, this enhancement will work seamlessly with any future command implementations, even if the implementors have no knowledge of this enhancement."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "* *Minor enhancement*: added a panic/unpanic mode command that allows the user to quickly hide the current list of sources from display."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S2-W13-3/main/blob/master/src/main/java/seedu/address/logic/parser/AliasManager.java[Functional code 1]][https://github.com/CS2103-AY1819S2-W13-3/main/blob/master/src/main/java/seedu/address/storage/ConcreteAliasStorage.java[Functional code 2]][https://github.com/CS2103-AY1819S2-W13-3/main/blob/master/src/test/java/seedu/address/logic/parser/AliasManagerTest.java[Test code 1]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": "*** Co-managed releases `v1.1` - `v1.3` (3 releases) on GitHub"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": "*** Updated codebase to morph from AddressBook to Infinity Machine (Pull requests https://github.com/CS2103-AY1819S2-W13-3/main/pull/89[#89], https://github.com/CS2103-AY1819S2-W13-3/main/pull/93[#93], https://github.com/CS2103-AY1819S2-W13-3/main/pull/98[#98])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "*** Included reposense (Pull request https://github.com/CS2103-AY1819S2-W13-3/main/pull/117[#117])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": "*** Updated existing tests to include integration tests with major enhancement (Pull request https://github.com/CS2103-AY1819S2-W13-3/main/pull/132[#132])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-W13-3/main/pull/54[#54], https://github.com/CS2103-AY1819S2-W13-3/main/pull/69[#69]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com/nus-cs2103-AY1819S2/forum/issues/52[1], https://github.com/nus-cs2103-AY1819S2/forum/issues/64[2], https://github.com/nus-cs2103-AY1819S2/forum/issues/69[3], https://github.com/nus-cs2103-AY1819S2/forum/issues/51[4],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": "https://github.com/nus-cs2103-AY1819S2/forum/issues/43[5])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fterh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d Command aliases : `alias`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Creating an alias: `alias`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fterh"
        },
        "content": "Allows the user to create aliases create aliases for commands. +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fterh"
        },
        "content": "Format: `alias COMMAND ALIAS`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fterh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias count c` (`c` is now a valid pseudo-command that works exactly like `count`)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias invalid i` (`i` is now an invalid pseudo-command that works exactly like `invalid`)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": "The user is responsible for ensuring that he is creating aliases for valid commands."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fterh"
        },
        "content": "The successful creation of an alias does not provide any guarantee of the validity of the associated command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": "If the user attempts to add an alias that has already been added, the old one will be overwritten. For example:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias count c`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias invalid c`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": "`c` is now an alias for the invalid command `invalid`."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "The command may not be another alias. The alias may not be a command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias count ct` (`ct` is now an alias for `count`)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias ct c` (this is invalid because `ct` is another alias)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias count list` (this is invalid because `list` is a command)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fterh"
        },
        "content": "The alias must be syntatically valid. A valid syntax may only contain alphabets."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias list l` (valid)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias count ct` (valid)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias clear $` (invalid)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Removing an alias: `alias-rm`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fterh"
        },
        "content": "Allows the user to remove previously-defined aliases. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fterh"
        },
        "content": "Format: `alias-rm ALIAS`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fterh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias count c` (`c` is now an alias for `count`)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fterh"
        },
        "content": "* `alias-rm c` (`c` is no longer an alias for `count`)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fterh"
        },
        "content": "If the user attempts to remove a non-existent alias, nothing happens."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fterh"
        },
        "content": "`alias-rm` only guarantees that after it is performed, the alias argument does not exist."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all aliases: `alias-ls`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fterh"
        },
        "content": "Lists all defined aliases and their associated commands. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fterh"
        },
        "content": "Format: `alias-ls`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Alias persistence"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fterh"
        },
        "content": "Aliases are persistent across usage sessions."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fterh"
        },
        "content": "When an alias is created or removed, this is recorded to disk."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fterh"
        },
        "content": "No action is required on the user\u0027s part."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fterh"
        },
        "content": "https://github.com/CS2103-AY1819S2-W13-3/main/blob/master/docs/UserGuide.adoc#enabling-panic-mode-code-panic-code"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fterh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fterh"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fterh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d Command Alias feature"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fterh"
        },
        "content": "The command alias feature allows users to use shorthand commands to rapidly \"get things done\", for instance using `a` instead of `add`, or `c` instead of `count`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fterh"
        },
        "content": "Users may do one of the following:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fterh"
        },
        "content": "1) Add a new alias"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fterh"
        },
        "content": "2) Remove an existing alias"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fterh"
        },
        "content": "3) List all aliases"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Overview:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fterh"
        },
        "content": "This feature is backed by an in-memory database implemented as a Java `HashMap\u003cString, String\u003e`."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fterh"
        },
        "content": "A HashMap is chosen for several reasons:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fterh"
        },
        "content": "* Adding and removing an alias is straightforward (using Java HashMap API) and efficient (`O(1)` time)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fterh"
        },
        "content": "* Checking whether an alias exists is fast (`O(1)` time)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fterh"
        },
        "content": "* HashMaps naturally facilitate the process of looking up an associated value with a given key"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fterh"
        },
        "content": "*Alternative*: An alternative implementation could use a Java `ArrayList`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fterh"
        },
        "content": "However, that adds additional code complexity, as there needs to be a way of associating 2 strings."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fterh"
        },
        "content": "For instance, we could create an `ArrayList\u003cAliasWrapper\u003e`, where `AliasWrapper` is a wrapper class to associate 2 strings."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fterh"
        },
        "content": "However, that is inelegant and inefficient, as opposed to a `HashMap` solution."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fterh"
        },
        "content": "Furthermore, checking for membership in an `ArrayList` is an `O(N)` operation in an unsorted list, or `O(log(N))` in a sorted list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fterh"
        },
        "content": "Therefore, due to the key-value association inherent in the idea of an alias manager, a `HashMap` is the most approriate data structure."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fterh"
        },
        "content": "image::AliasManagerClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Operation:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fterh"
        },
        "content": "SourceManagerParser detects when a meta-command is entered."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fterh"
        },
        "content": "A meta-command is one that pertains to AliasManager (and by association SourceManagerParser), e.g. `alias`, `alias-rm`, `alias-ls`, etc."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fterh"
        },
        "content": "AliasManager exposes the meta-commands it \"uses\", which SourceManagerParser relies on for detection."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fterh"
        },
        "content": "However, it is acknowledged that this is not strictly necessary."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fterh"
        },
        "content": "It is safe for SourceManagerParser to redefine these meta-commands."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fterh"
        },
        "content": "The default meta-commands that AliasManager exposes should be thought of as recommended, but not mandatory, meta-commands."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fterh"
        },
        "content": "AliasManager is fundamentally command-agnostic; it does not care what meta-commands are actually used."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fterh"
        },
        "content": "When a meta-command is detected to have been entered, SourceManagerParser delegates it to the appropriate AliasMetaCommandParser to handle."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fterh"
        },
        "content": "For instance, `alias FOO BAR` is delegated to the AliasAddMetaCommandParser (a concrete subclass of AliasMetaCommandParser) with the arguments \"FOO BAR\"."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fterh"
        },
        "content": "The AliasMetaCommandParser concrete subclasses parses the arguments and returns a DummyCommand response object."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fterh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fterh"
        },
        "content": "This delegation design pattern is chosen for 2 reasons:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fterh"
        },
        "content": "Firstly, it hides complexity in SourceManagerParser by abstracting the logic of interacting with AliasManager away."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fterh"
        },
        "content": "This makes SourceManagerParser more readable, declarative, and maintainable."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fterh"
        },
        "content": "This also allows us to practice the Single Responsibility Principle and Single Layer of Abstraction Principle, among others."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fterh"
        },
        "content": "Secondly, it improves testability by facilitating unit testing of smaller blocks of logic, rather than a single giant block."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fterh"
        },
        "content": "In normal operation, when the user uses an alias, SourceManagerParser parses the user input to extract the \"command word\"."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fterh"
        },
        "content": "It checks whether the \"command word\" is an alias using AliasManager\u0027s `isAlias()` method."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fterh"
        },
        "content": "If so, it fetches the original command that the alias is associated to using AliasManager\u0027s `getCommand()` method"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fterh"
        },
        "content": "(which returns an `Optional\u003cString\u003e` - this forces the caller to unwrap the optional and avoids null pointer exceptions)."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fterh"
        },
        "content": "Finally, SourceManagerParser recursively calls itself using the original command retrieved from AliasManager to execute the original command that the alias is associated with."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fterh"
        },
        "content": "**Alternative:** An alternative implementation could be to modify the `HashMap\u003cString, String\u003e` in AliasManager into `HashMap\u003cString, Class\u003c? extends Command\u003e\u003e`. The value is thus a Command class."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fterh"
        },
        "content": "When a valid alias is used, AliasManager would instantiate the associated class and return the instance."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fterh"
        },
        "content": "However, this implementation is disfavored, for the following reasons."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fterh"
        },
        "content": "Firstly, SourceManagerParser works with both Command classes and Parser classes."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fterh"
        },
        "content": "Some commands, for instance `add`, have accompanying arguments to be parsed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fterh"
        },
        "content": "For these \"parsable commands\", SourceManagerParser instantiates a CommandParser and calls its `.parse()` method."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fterh"
        },
        "content": "For other \"non-parsable commands\", for instance `clear`, SourceManagerParser instantiates and returns the command directly."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fterh"
        },
        "content": "Therefore, if we were to adopt this implementation, we would require 2 separate HashMaps mapping aliases to `Class\u003c? extends Command\u003e` and `Class\u003c? extends Parser\u003c? extends Command\u003e\u003e`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fterh"
        },
        "content": "This introduces a lot of complexity into AliasManager, and results in some duplication of logic across SourceManagerParser and AliasManager."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fterh"
        },
        "content": "Specifically, the logic that distinguishes between commands/aliases that map to `Command` and those that map to `Parser` will be duplicated in both SourceManagerParser and AliasManager."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fterh"
        },
        "content": "This violates the DRY principle."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fterh"
        },
        "content": "Furthermore, doing so increases coupling across the project, as there are now associations between AliasManager and the various Commands/Parsers. We want to minimize coupling whenever possible."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fterh"
        },
        "content": "Therefore, by simply mapping aliases to commands, and having a single layer of recursion in SourceManagerParser whereby it calls itself with the actual command, we avoid all the above problems."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fterh"
        },
        "content": "We improve cohesion, reduce coupling, drastically reduce complexity, and improve testability."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d\u003d\u003d Persistence:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fterh"
        },
        "content": "The usefulness of aliases would be significantly diminished if they do not persist between sessions."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fterh"
        },
        "content": "Therefore, we want aliases to be stored on disk and automatically loaded in future sessions."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fterh"
        },
        "content": "To accomplish this, we create an `AliasStorage` interface, and an implementing class `ConcreteAliasStorage`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fterh"
        },
        "content": "We also modify AliasManager to instantiate ConcreteAliasStorage upon its own instantiation."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fterh"
        },
        "content": "ConcreteAliasStorage is responsible for reading/writing from/to disk,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fterh"
        },
        "content": "and therefore converting the in-memory database (HashMap object) of aliases into/from an encoded representation."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fterh"
        },
        "content": "When AliasManager\u0027s aliases database is mutated (i.e. create or remove alias), it calls ConcreteAliasStorage\u0027s `saveAliases()` method."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fterh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fterh"
        },
        "content": "**Alternative:** A more elegant implementation would be to apply the observer pattern,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fterh"
        },
        "content": "with the observer observing the aliases HashMap database, and calling `saveAliases()` when it is mutated."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fterh"
        },
        "content": "However, given the simplicity of AliasManager, we believe that applying the observer pattern will result in unnecessary overhead,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fterh"
        },
        "content": "with minimal (or no) tangible benefits."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fterh"
        },
        "content": "Firstly, the aliases HashMap database is a private field, and only accessible within AliasManager."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fterh"
        },
        "content": "Secondly, there are only 2 methods which would mutate the aliases HashMap database."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fterh"
        },
        "content": "Within ConcreteAliasStorage, its `saveAliases()` method encodes aliases and commands into a string,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fterh"
        },
        "content": "in the following format: `alias1:command1;alias2:command2;alias3:command3`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fterh"
        },
        "content": "Conversely, `readAliases()` parses this string and reconstructs the aliases HashMap database."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fterh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fterh"
        },
        "content": "**Alternative:** We opted to use our own very simple encoding scheme instead of JSON."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fterh"
        },
        "content": "JSON is more suited for \"document-like\" objects with different properties, some of which are possibly nested multiple layers."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fterh"
        },
        "content": "However, in our case, we only have a series of key:value pairs, in a predictable form, with no nesting."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fterh"
        },
        "content": "Therefore, we thought that a simple semicolon-separated key:value pair encoding scheme would suffice."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fterh"
        },
        "content": "\u003d\u003d PROJECTS"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fterh"
        },
        "content": "---"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fterh"
        },
        "content": "https://github.com/fterh/sneakpeek"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fterh"
        },
        "content": "https://github.com/fterh/kopi-guru"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fterh"
        },
        "content": ":)"
      }
    ],
    "authorContributionMap": {
      "fterh": 234
    }
  },
  {
    "path": "docs/team/ruhanisuri.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d Ruhani Suri - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d PROJECT: The Infinity Machine"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "Introducing the Infinity Machine, an application for efficient storing and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "retrieving of textual information on research material by allowing users to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "apply to it custom made tags and type for easy search and retrieval. Intended"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "for tech-savvy university students who are able to use CLI and wish to organize"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " and tag research information or any other data that they may wish to store."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* added *the ability to search* through sources:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** What it does: allows the user to search through all the entries in the database through various fields at a time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Justification: This feature improves the product significantly because a user can now search an entry with a particular title AND a particular type and so on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Highlights: This enhancement does not affect existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* added *the ability to list n sources*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** What it does: allows the user to pass an optional argument to `list` command, a positive integer n, and then displays only the first n source entries."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Justification: This feature improves the product significantly because a user can now only list as many item he wants and need not clutter the screen by displaying all."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Highlights: Argument n is internally capped to the size of the database. This enhancement does not affect existing commands and commands to be added in the future."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* *Code contributed*: _{https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dsuriruhani\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-02\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue}_"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "***"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "*** Documentation:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlist]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsearch]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlist]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsearch]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "---"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.DeletedSources;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyDeletedSources;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlySourceManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.SourceManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.DeletedSourcesStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonDeletedSourcesStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonSourceManagerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.SourceManagerStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing SourceManager ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        SourceManagerStorage sourceManagerStorage \u003d new JsonSourceManagerStorage(userPrefs.getSourceManagerFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeletedSourcesStorage deletedSourcesStorage \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonDeletedSourcesStorage(userPrefs.getDeletedSourceFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(sourceManagerStorage, userPrefsStorage, deletedSourcesStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlySourceManager\u003e sourceManagerOptional;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyDeletedSources\u003e deletedSourcesOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlySourceManager initialData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyDeletedSources initialDeletedSources;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            sourceManagerOptional \u003d storage.readSourceManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            deletedSourcesOptional \u003d storage.readDeletedSources();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!sourceManagerOptional.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample SourceManager\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!deletedSourcesOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample DeletedSourcesList\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d sourceManagerOptional.orElseGet(SampleDataUtil::getSampleSourceManager);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            initialDeletedSources \u003d deletedSourcesOptional.orElseGet(SampleDataUtil::getSampleDeletedSourcesList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty SourceManager\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new SourceManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            initialDeletedSources \u003d new DeletedSources();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty SourceManager\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new SourceManager();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initialDeletedSources \u003d new DeletedSources();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialDeletedSources);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty SourceManager\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting SourceManager \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * This the main method.  The one method that starts the entire program."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * The program cannot run if this main method is not here."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * This is only here because travis demands it."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * @param args The user input."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 202,
      "DarrenDragonLee": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final String MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX \u003d \"The source index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_DELETED_SOURCE_DISPLAYED_INDEX \u003d \"The source index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SOURCES_LISTED_OVERVIEW \u003d \"%1$d sources listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "DarrenDragonLee": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a source to the infinity machine."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new source to the database. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + PREFIX_TITLE + \"SOURCE_TITLE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + PREFIX_TYPE + \"SOURCE_TYPE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + PREFIX_DETAILS + \"SOURCE_DETAILS \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"SOURCE_TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + PREFIX_TITLE + \"Wikipedia Algorithms \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + PREFIX_TYPE + \"Website \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + PREFIX_DETAILS + \"Basic definitions of algorithms \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + PREFIX_TAG + \"Algorithms \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + PREFIX_TAG + \"Introduction\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New source added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SOURCE \u003d \"This source already exists in the database.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    private final Source toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public AddCommand(Source source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        toAdd \u003d source;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        if (model.hasSource(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SOURCE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        model.addSource(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        model.commitSourceManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "DarrenDragonLee": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BiblioCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": " * Generates a bibliography from a source at the specified index of appropriate style."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "public class BiblioCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"biblio\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            + \": Generates a bibliography in appropriate style\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            + \"FORMAT (must be a non-empty string)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"APA 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Bibliography generated\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    private final String format;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    public BiblioCommand(String format, Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        this.format \u003d format;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        List\u003cSource\u003e lastShownList \u003d model.getFilteredSourceList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        Source targetSource \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        String biblioEntry;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        switch (format) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        case \"APA\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            biblioEntry \u003d generateApa(targetSource);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS + biblioEntry));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        case \"MLA\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            biblioEntry \u003d generateMla(targetSource);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS + biblioEntry));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "     * Generates a bibliography of APA style."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    private String generateApa(Source targetSource) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        String targetTitle \u003d targetSource.getTitle().title;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        String targetType \u003d targetSource.getType().type;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        String targetDetail \u003d targetSource.getDetail().detail;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        String biblioEntry \u003d String.format(\"\\n%s;\\n%s;\\n%s;\\n\", targetTitle, targetType, targetDetail);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        return biblioEntry;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "     * Generates a bibliography of MLA style."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    private String generateMla(Source targetSource) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        String targetTitle \u003d targetSource.getTitle().title;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        String targetType \u003d targetSource.getType().type;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        String targetDetail \u003d targetSource.getDetail().detail;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        String biblioEntry \u003d String.format(\"\\n%s;\\n%s;\\n%s;\\n\", targetTitle, targetType, targetDetail);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        return biblioEntry;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DoItTomorrow": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "case141"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "case141"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "case141"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "case141"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "case141"
        },
        "content": " * Returns the total number of sources in the database."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "case141"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "case141"
        },
        "content": "public class CountCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "case141"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"count\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "case141"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "case141"
        },
        "content": "            + \": Counts the number of source(s) in the Infinity Machine.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "case141"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Total number of Source(s): %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "case141"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        int count \u003d model.getFilteredSourceList().size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "case141"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, count));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "case141"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "case141": 23,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CustomOrderCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SOURCES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": " * Moves a source to a designated position"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "public class CustomOrderCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"order\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + \": Swaps the source in a given index to a position in the list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + \"SOURCE_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + \"MOVE_POSITION (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 6\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final String MESSAGE_SOURCE_INDEX_INVALID \u003d \"The source index to move is invalid.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final String MESSAGE_MOVE_POSITION_INVALID \u003d \"The position to move to is invalid.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final String MESSAGE_INDEX_IDENTICAL \u003d \"The source index and move position are the same.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Source at position %d moved to position %d.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    private int initialIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    private int newPosition;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public CustomOrderCommand(int initialIndex, int newPosition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        this.initialIndex \u003d initialIndex - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        this.newPosition \u003d newPosition - 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        model.updateFilteredSourceList(PREDICATE_SHOW_ALL_SOURCES);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        List\u003cSource\u003e completeSourceList \u003d model.getFilteredSourceList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        if (initialIndex \u003e\u003d completeSourceList.size() || initialIndex \u003c 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            logger.info(\"--- CustomOrderCommand: Initial index given is out of bounds.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            throw new CommandException(MESSAGE_SOURCE_INDEX_INVALID);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        if (newPosition \u003e\u003d completeSourceList.size() || newPosition \u003c 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            logger.info(\"--- CustomOrderCommand: Move position index given is out of bounds.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            throw new CommandException(MESSAGE_MOVE_POSITION_INVALID);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        if (initialIndex \u003d\u003d newPosition) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            logger.info(\"--- CustomOrderCommand: Initial index and move position are the same.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            throw new CommandException(MESSAGE_INDEX_IDENTICAL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Source sourceToMove \u003d completeSourceList.get(initialIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        model.deleteSource(sourceToMove);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        model.addSourceAtIndex(sourceToMove, newPosition);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        model.commitSourceManager();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, initialIndex + 1, newPosition + 1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DarrenDragonLee": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.source.Detail;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.source.Title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.source.Type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing source in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the source identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed source list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + \"[\" + PREFIX_TYPE + \"TYPE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + \"[\" + PREFIX_DETAILS + \"DETAILS] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + PREFIX_TITLE + \"Algorithms IEEE \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            + PREFIX_DETAILS + \"Basic algorithm controls and processes\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final String MESSAGE_EDIT_SOURCE_SUCCESS \u003d \"Edited Source: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SOURCE \u003d \"This source already exists in the database.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    private final EditSourceDescriptor editSourceDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * @param index of the source in the filtered source list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * @param editSourceDescriptor details to edit the source with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public EditCommand(Index index, EditSourceDescriptor editSourceDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        requireNonNull(editSourceDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        this.editSourceDescriptor \u003d new EditSourceDescriptor(editSourceDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        List\u003cSource\u003e lastShownList \u003d model.getFilteredSourceList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Source sourceToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Source editedSource \u003d createEditedSource(sourceToEdit, editSourceDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        if (!sourceToEdit.isSameSource(editedSource) \u0026\u0026 model.hasSource(editedSource)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SOURCE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        model.setSource(sourceToEdit, editedSource);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        model.updateFilteredSourceList(Model.PREDICATE_SHOW_ALL_SOURCES);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        model.commitSourceManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SOURCE_SUCCESS, editedSource));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * Creates and returns a {@code Source} with the details of {@code sourceToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * edited with {@code editSourceDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    private static Source createEditedSource(Source sourceToEdit, EditSourceDescriptor editSourceDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        assert sourceToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Title updatedTitle \u003d editSourceDescriptor.getTitle().orElse(sourceToEdit.getTitle());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Type updatedType \u003d editSourceDescriptor.getType().orElse(sourceToEdit.getType());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Detail updatedDetails \u003d editSourceDescriptor.getDetails().orElse(sourceToEdit.getDetail());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editSourceDescriptor.getTags().orElse(sourceToEdit.getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        return new Source(updatedTitle, updatedType, updatedDetails, updatedTags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                \u0026\u0026 editSourceDescriptor.equals(e.editSourceDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static class EditSourceDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        private Type type;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        private Detail details;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        public EditSourceDescriptor() {}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        public EditSourceDescriptor(EditSourceDescriptor toCopy) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            setDetails(toCopy.details);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, type, details, tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        public void setType(Type type) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        public Optional\u003cType\u003e getType() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        public void setDetails(Detail details) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            this.details \u003d details;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        public Optional\u003cDetail\u003e getDetails() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            return Optional.ofNullable(details);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            if (!(other instanceof EditSourceDescriptor)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            EditSourceDescriptor e \u003d (EditSourceDescriptor) other;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                    \u0026\u0026 getType().equals(e.getType())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                    \u0026\u0026 getDetails().equals(e.getDetails())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 148,
      "DarrenDragonLee": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GreetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " * Greets the user for a wholesome experience."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "public class GreetCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"greet\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Hello there, beautiful human! Hope you have a good experience \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + \"with our product and a even better day ahead! Come again :)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SOURCES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " * Lists all sources in the Source Database to the user, or the top N sources where N may"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " * be an optional argument supplied by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + \": List all the sources in the database to the user, or optionally, the top N sources if\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + \" an argument is supplied.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + \"Parameters: [INDEX] (Optional, must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 20\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public static final String MESSAGE_LIST_ALL_SUCCESS \u003d \"Listed all sources!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public static final String MESSAGE_LIST_N_SUCCESS \u003d \"Listed top %d sources!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private Index targetIndex \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //Constructor overloading to account for an optional parameter"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public ListCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public ListCommand() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * A method which constructs a predicate to output top n sources"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * Parameters: positive integer n"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private Predicate\u003cSource\u003e makePredicateForTopN(int n) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        return new Predicate\u003c\u003e() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            private int count \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            public boolean test(Source source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                if (count \u003c n) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //shortcut to obtain the entire list of all sources by first displaying an unfiltered list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        model.updateFilteredSourceList(PREDICATE_SHOW_ALL_SOURCES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        int size \u003d model.getFilteredSourceList().size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (targetIndex !\u003d null) { //when LIST is used with an argument (show N)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            //to ensure N is capped at list size"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            targetIndex \u003d targetIndex.getOneBased() \u003e size ? Index.fromOneBased(size) : targetIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            model.updateFilteredSourceList(makePredicateForTopN(targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_LIST_N_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        } else { //when LIST is used without an argument (show all)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            return new CommandResult(MESSAGE_LIST_ALL_SUCCESS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ListCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 58,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PanicCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Activate panic mode!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class PanicCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"panic\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Keep your questionable research private.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"\"; // Obviously, we won\u0027t announce panic mode activation ;)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public PanicCommand() {}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "        model.enablePanicMode();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PanicMode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": " * The API for any class that supports PanicMode."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "public interface PanicMode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void enablePanicMode();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void disablePanicMode();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.model.source.SourceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " * Finds and lists all sources in Source Database which have any of their title, type, detail, source, tag(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " * containing the argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all sources whose title, type, details, \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + \"source and tags contains any of the specified keywords (case-insensitive) and displays them as a \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + \"list with index numbers. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + PREFIX_TITLE + \"SOURCE_TITLE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + PREFIX_TYPE + \"SOURCE_TYPE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + PREFIX_DETAILS + \"SOURCE_DETAILS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"SOURCE_TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + PREFIX_TITLE + \"Wikipedia Algorithms \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + PREFIX_TYPE + \"Website \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + PREFIX_DETAILS + \"Basic definitions of algorithms \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + PREFIX_TAG + \"Algorithms \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            + PREFIX_TAG + \"Introduction\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private final SourceContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public SearchCommand(SourceContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredSourceList(predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_SOURCES_LISTED_OVERVIEW, model.getFilteredSourceList().size()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 27,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a source identified using it\u0027s displayed index from the infinity machine."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the source identified by the index number used in the displayed source list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_SOURCE_SUCCESS \u003d \"Selected Source: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cSource\u003e filteredSourceList \u003d model.getFilteredSourceList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredSourceList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedSource(filteredSourceList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_SOURCE_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "DarrenDragonLee": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnpanicCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Deactivate panic mode!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class UnpanicCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unpanic\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Keep your questionable research private. \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Restored!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public UnpanicCommand() {}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "        model.disablePanicMode();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.source.Detail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.source.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.source.Type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_TYPE, PREFIX_DETAILS, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_TYPE, PREFIX_DETAILS)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Detail details \u003d ParserUtil.parseDetails(argMultimap.getValue(PREFIX_DETAILS).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Source source \u003d new Source(title, type, details, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        return new AddCommand(source);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "DarrenDragonLee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AliasAddMetaCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Parses input arguments for the AliasManager \"alias\" metacommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class AliasAddMetaCommandParser extends AliasMetaCommandParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Instantiates self with an instance of aliasManager."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public AliasAddMetaCommandParser(AliasManager aliasManager) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "        setAliasManager(aliasManager);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Parses the provided arguments in the context of the alias (add) meta-command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * and returns a DummyCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public DummyCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "        String[] splitArguments \u003d userInput.trim().split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (splitArguments.length !\u003d 2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new ParseException(\"You have provided an invalid number of arguments\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "            getAliasManager().registerAlias(splitArguments[0], splitArguments[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return new DummyCommand(\"Alias created\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return new DummyCommand(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AliasListMetaCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Parses input arguments for the AliasManager \"alias-ls\" metacommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class AliasListMetaCommandParser extends AliasMetaCommandParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Instantiates self with an instance of aliasManager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public AliasListMetaCommandParser(AliasManager aliasManager) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "        setAliasManager(aliasManager);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Parses the provided arguments in the context of the alias-ls meta-command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * and returns a DummyCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public DummyCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "        HashMap\u003cString, String\u003e aliasList \u003d getAliasManager().getAliasList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (aliasList.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return new DummyCommand(\"There are no aliases to list\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasList.forEach((alias, command) -\u003e sb.append(String.format(\"%s: %s\\n\", alias, command)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return new DummyCommand(sb.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AliasManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.storage.AliasStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.storage.ConcreteAliasStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Manages user-defined command aliases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "class AliasManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": "    static final String COMMAND_WORD_ADD \u003d \"alias\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "    static final String COMMAND_WORD_REMOVE \u003d \"alias-rm\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "    static final String COMMAND_WORD_LIST \u003d \"alias-ls\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String ERROR_INVALID_SYNTAX \u003d \"Aliases must be alphabetical only\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String ERROR_COMMAND_IS_METACOMMAND \u003d \"This command cannot be aliased\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String ERROR_COMMAND_IS_ALIAS \u003d \"Provided command is another alias\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String ERROR_ALIAS_IS_COMMAND \u003d \"Provided alias is a command\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String REGEX_VALIDATOR \u003d \"([a-z]|[A-Z])+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AliasManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private boolean persistentMode \u003d true; // Disable for unit testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private CommandValidator commandValidator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private HashMap\u003cString, String\u003e aliases \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private AliasStorage aliasStorage \u003d new ConcreteAliasStorage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "    AliasManager(CommandValidator commandValidator) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this(commandValidator, true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "    AliasManager(CommandValidator commandValidator, boolean persistentMode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Objects.requireNonNull(commandValidator);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this.commandValidator \u003d commandValidator;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (persistentMode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "            loadStoredAliases();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "            this.persistentMode \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Getter for aliasStorage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * This is not safe to mutate."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fterh"
        },
        "content": "    AliasStorage getAliasStorage() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return aliasStorage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Loads and restores previously-stored aliases from disk into memory."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * If an exception is thrown, log, terminate the method, and keep `aliases` empty."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private void loadStoredAliases() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fterh"
        },
        "content": "        HashMap\u003cString, String\u003e loadedAliases;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fterh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fterh"
        },
        "content": "            logger.info(\"Attempting to load aliases from storage\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fterh"
        },
        "content": "            loadedAliases \u003d aliasStorage.readAliases();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fterh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "            logger.warning(e.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliases \u003d new HashMap(loadedAliases);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": "        logger.info(\"Restored aliases from storage\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Saves the current state of `aliases` into disk for persistent storage."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Any exceptions thrown are logged."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Does nothing if persistent mode is disabled (for unit testing)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private void saveAliases() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (!persistentMode) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fterh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fterh"
        },
        "content": "            logger.info(\"Attempting to save aliases to storage\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fterh"
        },
        "content": "            aliasStorage.saveAliases((HashMap) aliases.clone());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fterh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fterh"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fterh"
        },
        "content": "                    String.format(\"Skipping saving aliases to storage; encountered exception: %s\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fterh"
        },
        "content": "                            e.toString()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Checks if alias is registered."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fterh"
        },
        "content": "    boolean isAlias(String alias) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Objects.requireNonNull(alias);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return aliases.containsKey(alias);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Associates an alias with a command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * If alias already exists, it will be overwritten."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @throws IllegalArgumentException if command has an invalid syntax (must be alphabetical only)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @throws IllegalArgumentException if command is a meta-command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @throws IllegalArgumentException if command is another registered alias."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @throws IllegalArgumentException if alias is an existing command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void registerAlias(String command, String alias) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Objects.requireNonNull(alias);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Objects.requireNonNull(command);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // Guard against invalid alias syntax"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (!alias.matches(REGEX_VALIDATOR)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new IllegalArgumentException(ERROR_INVALID_SYNTAX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // Guard against commend being an AliasManager meta-command (e.g. alias, alias-rm, etc.)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (command.equals(COMMAND_WORD_ADD)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fterh"
        },
        "content": "                || command.equals(COMMAND_WORD_REMOVE)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fterh"
        },
        "content": "                || command.equals(COMMAND_WORD_LIST)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new IllegalArgumentException(ERROR_COMMAND_IS_METACOMMAND);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // Guard against command being another registered alias"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (isAlias(command)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new IllegalArgumentException(ERROR_COMMAND_IS_ALIAS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // Guard against alias being an existing command"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (commandValidator.isValidCommand(alias)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new IllegalArgumentException(ERROR_ALIAS_IS_COMMAND);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliases.put(alias, command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fterh"
        },
        "content": "        saveAliases();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Removes an alias. Does nothing if alias does not exist."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void unregisterAlias(String alias) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliases.remove(alias);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fterh"
        },
        "content": "        saveAliases();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Looks up and returns the command that alias is associated with."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @returns A String optional if alias is registered, and an empty optional otherwise."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fterh"
        },
        "content": "    Optional\u003cString\u003e getCommand(String alias) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Objects.requireNonNull(alias);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (!isAlias(alias)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fterh"
        },
        "content": "        String command \u003d aliases.get(alias);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return Optional.of(command);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns a HashMap listing all registered aliases to their commands."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * The returned HashMap is a copy of the original and is safe to work with (i.e. safe to mutate)."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fterh"
        },
        "content": "    HashMap\u003cString, String\u003e getAliasList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return (HashMap) aliases.clone();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AliasMetaCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": " * An abstract class that all AliasManager meta-command parsers extends from."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "public abstract class AliasMetaCommandParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private AliasManager aliasManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "    AliasManager getAliasManager() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return aliasManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void setAliasManager(AliasManager aliasManager) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this.aliasManager \u003d aliasManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AliasRemoveMetaCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Parses input arguments for the AliasManager \"alias-rm\" metacommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class AliasRemoveMetaCommandParser extends AliasMetaCommandParser implements Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "    static final String ERROR_INVALID_ARGUMENTS \u003d \"You have provided an invalid number of arguments\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Instantiates self with an instance of aliasManager."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public AliasRemoveMetaCommandParser(AliasManager aliasManager) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": "        setAliasManager(aliasManager);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Parses the provided arguments in the context of the alias-rm meta-command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * and returns a DummyCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public DummyCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // We need this because \"\".trim().split(\" \").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // so the following if statement does not catch this condition"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (userInput.equals(\"\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new ParseException(ERROR_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "        String[] splitArguments \u003d userInput.trim().split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (splitArguments.length !\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new ParseException(ERROR_INVALID_ARGUMENTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "        getAliasManager().unregisterAlias(splitArguments[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return new DummyCommand(\"Alias removed\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BiblioCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.logic.commands.BiblioCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": " * Parses input arguments and creates a new BiblioCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "public class BiblioCommandParser implements Parser\u003cBiblioCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BiblioCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "     * and returns an BiblioCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    public BiblioCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            String[] tokenizedArguments \u003d args.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            String format \u003d tokenizedArguments[1];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            if (tokenizedArguments.length !\u003d 3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "                || format.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BiblioCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(tokenizedArguments[2]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            return new BiblioCommand(format, index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BiblioCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DoItTomorrow": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final Prefix PREFIX_DETAILS \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "DarrenDragonLee": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CommandValidator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Represents a CommandValidator that is able to verify if a string is a valid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "public interface CommandValidator {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Checks whether command is a valid command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "    boolean isValidCommand(String command);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CustomOrderCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.CustomOrderCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": " * Parser for the CustomOrder command which takes in a user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "public class CustomOrderCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CustomOrderCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * and returns an CustomOrderCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public CustomOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        logger.info(\"--- CustomOrderCommandParser: raw user input parameters:\" + args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        // splits the args into an array of strings"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        // if the string array size is not 2, means the user entered too few or too many arguments"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        if (splitArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CustomOrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            int initialIndex \u003d Integer.parseInt(splitArgs[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            logger.info(\"--- CustomOrderCommandParser: the initial position is index \" + initialIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                int newPosition \u003d Integer.parseInt(splitArgs[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                logger.info(\"--- CustomOrderCommandParser: the new position is index \" + newPosition);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                return new CustomOrderCommand(initialIndex, newPosition);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, CustomOrderCommand.MESSAGE_USAGE), nfe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CustomOrderCommand.MESSAGE_USAGE), nfe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DarrenDragonLee": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DummyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": " * A concrete implementation of Command that doesn\u0027t do anything except return a CommandResult."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class DummyCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private CommandResult commandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "    DummyCommand(String feedback) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": "        commandResult \u003d new CommandResult(feedback);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditSourceDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_TYPE, PREFIX_DETAILS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        EditSourceDescriptor editSourceDescriptor \u003d new EditSourceDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            editSourceDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editSourceDescriptor.setType(ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DETAILS).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editSourceDescriptor.setDetails(ParserUtil.parseDetails(argMultimap.getValue(PREFIX_DETAILS).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editSourceDescriptor::setTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        if (!editSourceDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        return new EditCommand(index, editSourceDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "DarrenDragonLee": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            if (args.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                return new ListCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.source.Detail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.source.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.source.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * @throws ParseException if the given {@code Title} is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * Parses a {@code String type} into a {@code Type}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * @throws ParseException if the given {@code Type} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static Type parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        if (!Type.isValidType(trimmedType)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            throw new ParseException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        return new Type(trimmedType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * Parses a {@code String details} into an {@code Details}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * @throws ParseException if the given {@code Details} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static Detail parseDetails(String details) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        requireNonNull(details);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        String trimmedDetails \u003d details.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        if (!Detail.isValidDetail(trimmedDetails)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            throw new ParseException(Detail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        return new Detail(trimmedDetails);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "DarrenDragonLee": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.model.source.SourceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * and returns an SearchCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_TYPE, PREFIX_DETAILS, PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //String[] titleKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        return new SearchCommand(new SourceContainsKeywordsPredicate(argMultimap));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 21,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SourceManagerParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.logic.commands.BiblioCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.CountCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.CustomOrderCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.GreetCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.PanicCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RestoreCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.commands.UnpanicCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class SourceManagerParser implements CommandValidator {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Set of all valid commands"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private HashSet\u003cString\u003e validCommands \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private AliasManager aliasManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceManagerParser() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        aliasManager \u003d new AliasManager(this);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        initializeValidCommands();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * Alternative constructor for dependency injection."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public SourceManagerParser(AliasManager aliasManager) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        this.aliasManager \u003d aliasManager;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        initializeValidCommands();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * Initializes the set of valid commands."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private void initializeValidCommands() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(SelectCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(SearchCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(PanicCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(UnpanicCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(CountCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fterh"
        },
        "content": "        validCommands.add(GreetCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        validCommands.add(RestoreCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Checks whether command is a valid command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public boolean isValidCommand(String command) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return validCommands.contains(command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        case CustomOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            return new CustomOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fterh"
        },
        "content": "        case PanicCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return new PanicCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fterh"
        },
        "content": "        case UnpanicCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return new UnpanicCommand();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "case141"
        },
        "content": "        case CountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "case141"
        },
        "content": "            return new CountCommand();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        case GreetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            return new GreetCommand();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        case BiblioCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            return new BiblioCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        case RestoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RestoreCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // Meta-commands (pertaining to AliasManager)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        // Meta-commands (pertaining to AliasManager):"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        // For these, we include implementation details because these are meta-commands"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        // that relate directly to AliasManager (and by association, SourceManagerParser)."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fterh"
        },
        "content": "        case AliasManager.COMMAND_WORD_ADD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            return new AliasAddMetaCommandParser(aliasManager).parse(arguments);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fterh"
        },
        "content": "        case AliasManager.COMMAND_WORD_REMOVE:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            return new AliasRemoveMetaCommandParser(aliasManager).parse(arguments);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        case AliasManager.COMMAND_WORD_LIST:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            return new AliasListMetaCommandParser(aliasManager).parse(arguments);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fterh"
        },
        "content": "            // Throw ParseException if input is not an alias"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fterh"
        },
        "content": "            if (!aliasManager.isAlias(commandWord)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fterh"
        },
        "content": "            // This should never throw NoSuchElementException because we ensured the validity of the alias"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fterh"
        },
        "content": "            String actualCommand \u003d aliasManager.getCommand(commandWord).get();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fterh"
        },
        "content": "            String actualUserInput \u003d userInput.replaceFirst(commandWord, actualCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return parseCommand(actualUserInput);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 30,
      "DoItTomorrow": 5,
      "case141": 3,
      "-": 78,
      "fterh": 58,
      "DarrenDragonLee": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "// To deprecate"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 144,
      "fterh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.commands.PanicMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "public interface Model extends PanicMode {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "    Predicate\u003cSource\u003e PREDICATE_SHOW_ALL_SOURCES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cSource\u003e PREDICATE_SHOW_ALL_DELETED_SOURCES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns the user prefs\u0027 source manager file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "    Path getSourceManagerFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 source manager file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getDeletedSourceFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Sets the user prefs\u0027 source manager file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void setSourceManagerFilePath(Path sourceManagerFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 source manager file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setDeletedSourceFilePath(Path deletedSourceFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Replaces source manager data with the data in {@code sourceManager}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void setSourceManager(ReadOnlySourceManager sourceManager);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /** Returns the SourceManager */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "    ReadOnlySourceManager getSourceManager();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces source manager data with the data in {@code sourceManager}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void setDeletedSources(ReadOnlyDeletedSources deletedSources);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the SourceManager */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyDeletedSources getDeletedSources();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns true if a source with the same identity as {@code source} exists in the source manager."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fterh"
        },
        "content": "    boolean hasSource(Source source);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a source with the same identity as {@code source} exists in the source manager."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasDeletedSource(Source source);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Deletes the given source."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * The source must exist in the source manager."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void deleteSource(Source target);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given source."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The source must exist in the source manager."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    void removeDeletedSource(Source target);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Adds the given source."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * {@code source} must not already exist in the source manager."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void addSource(Source source);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given source."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code source} must not already exist in the source manager."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    void addDeletedSource(Source source);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * Adds the given source to an index."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * {@code source} must not already exist in the source manager."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    void addSourceAtIndex(Source source, int index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given source to an index."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code source} must not already exist in the source manager."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void addDeletedSourceAtIndex(Source source, int index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Replaces the given source {@code target} with {@code editedSource}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * {@code target} must exist in the source manager."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * The source identity of {@code editedSource} must not be the same"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * as another existing source in the source manager."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void setSource(Source target, Source editedSource);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given source {@code target} with {@code editedSource}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the source manager."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * The source identity of {@code editedSource} must not be the same"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * as another existing source in the source manager."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    void setDeletedSource(Source target, Source editedSource);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered source list */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fterh"
        },
        "content": "    ObservableList\u003cSource\u003e getFilteredSourceList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered source list */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cSource\u003e getFilteredDeletedSourceList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Updates the filter of the filtered source list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void updateFilteredSourceList(Predicate\u003cSource\u003e predicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered source list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredDeletedSourceList(Predicate\u003cSource\u003e predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns true if the model has previous source manager states to restore."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fterh"
        },
        "content": "    boolean canUndoSourceManager();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous source manager states to restore."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoDeletedSources();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns true if the model has undone source manager states to restore."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fterh"
        },
        "content": "    boolean canRedoSourceManager();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone source manager states to restore."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoDeletedSources();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Restores the model\u0027s source manager to its previous state."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void undoSourceManager();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s source manager to its previous state."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoDeletedSources();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Restores the model\u0027s source manager to its previously undone state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void redoSourceManager();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s source manager to its previously undone state."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoDeletedSources();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Saves the current source manager state for undo/redo."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void commitSourceManager();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current source manager state for undo/redo."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitDeletedSources();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Selected source in the filtered source list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * null if no source is selected."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fterh"
        },
        "content": "    ReadOnlyProperty\u003cSource\u003e selectedSourceProperty();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected source in the filtered source list."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no source is selected."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cSource\u003e selectedDeletedSourceProperty();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns the selected source in the filtered source list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * null if no source is selected."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fterh"
        },
        "content": "    Source getSelectedSource();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected source in the filtered source list."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no source is selected."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    Source getSelectedDeletedSource();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Sets the selected source in the filtered source list."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void setSelectedSource(Source source);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected source in the filtered source list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedDeletedSource(Source source);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Default implementation to prevent compilation errors when implementors of Model"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * do not implement PanicMode."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fterh"
        },
        "content": "    default void enablePanicMode() {}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Default implementation to prevent compilation errors when implementors of Model"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * do not implement PanicMode."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "fterh"
        },
        "content": "    default void disablePanicMode() {}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "case141": 1,
      "-": 188,
      "fterh": 57,
      "DarrenDragonLee": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.commands.PanicMode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.source.exceptions.SourceNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Represents the in-memory model of the source manager data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class ModelManager implements Model, PanicMode {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private VersionedSourceManager versionedSourceManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedDeletedSources versionedDeletedSources;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private final FilteredList\u003cSource\u003e filteredSources;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cSource\u003e filteredDeletedSources;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private final SimpleObjectProperty\u003cSource\u003e selectedSource \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cSource\u003e selectedDeletedSource \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private boolean panicMode \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private VersionedSourceManager sourceManagerBackup \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Initializes a ModelManager with the given sourceManager and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlySourceManager sourceManager, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        ReadOnlyDeletedSources deletedSources) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(sourceManager, userPrefs, deletedSources);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with source manager: \" + sourceManager + \" and user prefs \" + userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" and deleted sources \" + deletedSources);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fterh"
        },
        "content": "        versionedSourceManager \u003d new VersionedSourceManager(sourceManager);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedDeletedSources \u003d new VersionedDeletedSources((deletedSources));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": "        filteredSources \u003d new FilteredList\u003c\u003e(versionedSourceManager.getSourceList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredDeletedSources \u003d new FilteredList\u003c\u003e(versionedDeletedSources.getDeletedSourceList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "        filteredSources.addListener(this::ensureSelectedSourceIsValid);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredDeletedSources.addListener(this::ensureSelectedDeletedSourceIsValid);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new SourceManager(), new UserPrefs(), new DeletedSources());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Activates panic mode. Backs up source manager and displays an empty one."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void enablePanicMode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fterh"
        },
        "content": "        logger.fine(\"Enabling panic mode\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (panicMode) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": "            // Prevent enabling panic mode twice, which causes a bug where by"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fterh"
        },
        "content": "            // the empty mock database is backed up and overwrites the actual database"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "            logger.fine(\"Panic mode already enabled.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fterh"
        },
        "content": "        panicMode \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sourceManagerBackup \u003d new VersionedSourceManager(versionedSourceManager);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fterh"
        },
        "content": "        logger.fine(\"Backed up source manager.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fterh"
        },
        "content": "        versionedSourceManager.resetData(new SourceManager());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fterh"
        },
        "content": "        logger.fine(\"Reset visible source manager to an empty source manager.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Deactivates panic mode. Restores original source manager."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void disablePanicMode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fterh"
        },
        "content": "        logger.fine(\"Disabling panic mode\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (!panicMode) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fterh"
        },
        "content": "            logger.fine(\"Panic mode already disabled.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fterh"
        },
        "content": "        panicMode \u003d false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (sourceManagerBackup \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fterh"
        },
        "content": "            logger.fine(\"Nothing to restore, sourceManagerBackup is null\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fterh"
        },
        "content": "        versionedSourceManager.resetData(sourceManagerBackup);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public Path getSourceManagerFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return userPrefs.getSourceManagerFilePath();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void setSourceManagerFilePath(Path sourceManagerFilePath) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fterh"
        },
        "content": "        requireNonNull(sourceManagerFilePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fterh"
        },
        "content": "        userPrefs.setSourceManagerFilePath(sourceManagerFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getDeletedSourceFilePath() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getDeletedSourceFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDeletedSourceFilePath(Path deletedSourcesFilePath) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(deletedSourcesFilePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setDeletedSourceFilePath(deletedSourcesFilePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void setSourceManager(ReadOnlySourceManager sourceManager) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fterh"
        },
        "content": "        versionedSourceManager.resetData(sourceManager);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public ReadOnlySourceManager getSourceManager() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return versionedSourceManager;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public boolean hasSource(Source source) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fterh"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return versionedSourceManager.hasSource(source);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void deleteSource(Source target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fterh"
        },
        "content": "        versionedSourceManager.removeSource(target);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void addSource(Source source) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fterh"
        },
        "content": "        versionedSourceManager.addSource(source);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fterh"
        },
        "content": "        updateFilteredSourceList(PREDICATE_SHOW_ALL_SOURCES);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public void addSourceAtIndex(Source source, int index) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        versionedSourceManager.addSourceAtIndex(source, index);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        updateFilteredSourceList(PREDICATE_SHOW_ALL_SOURCES);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void setSource(Source target, Source editedSource) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fterh"
        },
        "content": "        requireAllNonNull(target, editedSource);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fterh"
        },
        "content": "        versionedSourceManager.setSource(target, editedSource);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DeletedSources \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDeletedSources(ReadOnlyDeletedSources deletedSources) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedDeletedSources.resetData(deletedSources);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyDeletedSources getDeletedSources() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedDeletedSources;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasDeletedSource(Source deletedSources) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(deletedSources);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedDeletedSources.hasDeletedSource(deletedSources);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeDeletedSource(Source target) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedDeletedSources.removeDeletedSource(target);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addDeletedSource(Source source) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedDeletedSources.addDeletedSource(source);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredDeletedSourceList(PREDICATE_SHOW_ALL_DELETED_SOURCES);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addDeletedSourceAtIndex(Source source, int index) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedDeletedSources.addDeletedSourceAtIndex(source, index);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredDeletedSourceList(PREDICATE_SHOW_ALL_DELETED_SOURCES);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDeletedSource(Source target, Source editedSource) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedSource);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedDeletedSources.setDeletedSource(target, editedSource);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fterh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Source List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Source} backed by the internal list of"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * {@code versionedSourceManager}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public ObservableList\u003cSource\u003e getFilteredSourceList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return filteredSources;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void updateFilteredSourceList(Predicate\u003cSource\u003e predicate) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "fterh"
        },
        "content": "        filteredSources.setPredicate(predicate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Source} backed by the internal list of"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedSourceManager}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cSource\u003e getFilteredDeletedSourceList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredDeletedSources;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredDeletedSourceList(Predicate\u003cSource\u003e predicate) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredDeletedSources.setPredicate(predicate);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public boolean canUndoSourceManager() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return versionedSourceManager.canUndo();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoDeletedSources() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedDeletedSources.canUndo();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public boolean canRedoSourceManager() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return versionedSourceManager.canRedo();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoDeletedSources() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedDeletedSources.canRedo();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void undoSourceManager() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "fterh"
        },
        "content": "        versionedSourceManager.undo();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoDeletedSources() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedDeletedSources.undo();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void redoSourceManager() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "fterh"
        },
        "content": "        versionedSourceManager.redo();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoDeletedSources() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedDeletedSources.redo();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void commitSourceManager() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "fterh"
        },
        "content": "        versionedSourceManager.commit();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitDeletedSources() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedDeletedSources.commit();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public ReadOnlyProperty\u003cSource\u003e selectedSourceProperty() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return selectedSource;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public Source getSelectedSource() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return selectedSource.getValue();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void setSelectedSource(Source source) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (source !\u003d null \u0026\u0026 !filteredSources.contains(source)) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new SourceNotFoundException();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "fterh"
        },
        "content": "        selectedSource.setValue(source);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cSource\u003e selectedDeletedSourceProperty() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedDeletedSource;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    public Source getSelectedDeletedSource() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedDeletedSource.getValue();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedDeletedSource(Source source) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        if (source !\u003d null \u0026\u0026 !filteredDeletedSources.contains(source)) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new SourceNotFoundException();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedDeletedSource.setValue(source);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Ensures {@code selectedSource} is a valid source in {@code filteredSources}."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private void ensureSelectedSourceIsValid(ListChangeListener.Change\u003c? extends Source\u003e change) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "fterh"
        },
        "content": "            if (selectedSource.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "fterh"
        },
        "content": "                // null is always a valid selected source, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "fterh"
        },
        "content": "            boolean wasSelectedSourceReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "fterh"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedSource.getValue());"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "fterh"
        },
        "content": "            if (wasSelectedSourceReplaced) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "fterh"
        },
        "content": "                // Update selectedSource to its new value."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "fterh"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedSource.getValue());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "fterh"
        },
        "content": "                selectedSource.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "fterh"
        },
        "content": "            boolean wasSelectedSourceRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "fterh"
        },
        "content": "                    .anyMatch(removedSource -\u003e selectedSource.getValue().isSameSource(removedSource));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "fterh"
        },
        "content": "            if (wasSelectedSourceRemoved) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "fterh"
        },
        "content": "                // Select the source that came before it in the list,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "fterh"
        },
        "content": "                // or clear the selection if there is no such source."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "fterh"
        },
        "content": "                selectedSource.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedDeletedSource} is a valid source in {@code filteredDeletedSources}."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedDeletedSourceIsValid(ListChangeListener.Change\u003c? extends Source\u003e change) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedDeletedSource.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected deleted source, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedSourceReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedDeletedSource.getValue());"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedSourceReplaced) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedDeletedSource to its new value."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedDeletedSource.getValue());"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedDeletedSource.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedSourceRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedSource -\u003e selectedDeletedSource.getValue().isSameSource(removedSource));"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedSourceRemoved) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the source that came before it in the list,"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such source."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedDeletedSource.setValue(change.getFrom() \u003e 0"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "                        ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return versionedSourceManager.equals(other.versionedSourceManager)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 versionedDeletedSources.equals(other.versionedDeletedSources)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "fterh"
        },
        "content": "                \u0026\u0026 filteredSources.equals(other.filteredSources)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredDeletedSources.equals(other.filteredDeletedSources)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedSource.get(), other.selectedSource.get())"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedDeletedSource.get(), other.selectedDeletedSource.get());"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 319,
      "fterh": 115,
      "DarrenDragonLee": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "// To deprecate"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "fterh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlySourceManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Unmodifiable view of a source manager"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "public interface ReadOnlySourceManager extends Observable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns an unmodifiable view of the source list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * This list will not contain any duplicate sources."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": "    ObservableList\u003cSource\u003e getSourceList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "    Path getSourceManagerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getDeletedSourceFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "fterh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/SourceManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.UniqueSourceList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Wraps all data at the source manager level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class SourceManager implements ReadOnlySourceManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private final UniqueSourceList sources;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sources \u003d new UniqueSourceList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceManager() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Creates a SourceManager using the Sources in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceManager(ReadOnlySourceManager toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Replaces the contents of the source list with {@code sources}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * {@code sources} must not contain duplicate sources."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void setSources(List\u003cSource\u003e sources) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this.sources.setSources(sources);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fterh"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Resets the existing data of this {@code SourceManager} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void resetData(ReadOnlySourceManager newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fterh"
        },
        "content": "        setSources(newData.getSourceList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fterh"
        },
        "content": "    //// source-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns true if a source with the same identity as {@code source} exists in the source manager."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public boolean hasSource(Source source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fterh"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return sources.contains(source);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Adds a source to the source manager."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * The source must not already exist in the source manager."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void addSource(Source s) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sources.add(s);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fterh"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * Adds a source to the source manager."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * The source must not already exist in the source manager."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public void addSourceAtIndex(Source s, int index) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        sources.addAtIndex(s, index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Replaces the given source {@code target} in the list with {@code editedSource}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * {@code target} must exist in the source manager."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The source identity of {@code editedSource} must not be the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * same as another existing source in the source manager."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void setSource(Source target, Source editedSource) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fterh"
        },
        "content": "        requireNonNull(editedSource);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sources.setSource(target, editedSource);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fterh"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Removes {@code key} from this {@code SourceManager}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * {@code key} must exist in the source manager."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void removeSource(Source key) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sources.remove(key);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fterh"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fterh"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fterh"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Notifies listeners that the source manager has been modified."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fterh"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fterh"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fterh"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return sources.asUnmodifiableObservableList().size() + \" sources\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public ObservableList\u003cSource\u003e getSourceList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return sources.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fterh"
        },
        "content": "                || (other instanceof SourceManager // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fterh"
        },
        "content": "                \u0026\u0026 sources.equals(((SourceManager) other).sources));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return sources.hashCode();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "fterh": 143,
      "DarrenDragonLee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private Path sourceManagerFilePath \u003d Paths.get(\"data\" , \"sourcemanager.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path deletedSourceFilePath \u003d Paths.get(\"data\" , \"deletedsource.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "        setSourceManagerFilePath(newUserPrefs.getSourceManagerFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setDeletedSourceFilePath(newUserPrefs.getDeletedSourceFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public Path getSourceManagerFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return sourceManagerFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void setSourceManagerFilePath(Path sourceManagerFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "        requireNonNull(sourceManagerFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this.sourceManagerFilePath \u003d sourceManagerFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getDeletedSourceFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return deletedSourceFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDeletedSourceFilePath(Path deletedSourceFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(deletedSourceFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deletedSourceFilePath \u003d deletedSourceFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 sourceManagerFilePath.equals(o.sourceManagerFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 deletedSourceFilePath.equals(o.deletedSourceFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return Objects.hash(guiSettings, sourceManagerFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nSource Manager Local data file location : \" + sourceManagerFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nDeleted Source Local data file location : \" + deletedSourceFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 92,
      "fterh": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "// To deprecate"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code AddressBook} that keeps track of its own history."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBook extends AddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cReadOnlyAddressBook\u003e addressBookStateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public VersionedAddressBook(ReadOnlyAddressBook initialState) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.add(new AddressBook(initialState));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves a copy of the current {@code AddressBook} state at the end of the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.add(new AddressBook(this));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof VersionedAddressBook)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook otherVersionedAddressBook \u003d (VersionedAddressBook) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(otherVersionedAddressBook)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedAddressBook.addressBookStateList)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "fterh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedSourceManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": " * {@code SourceManager} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class VersionedSourceManager extends SourceManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private final List\u003cReadOnlySourceManager\u003e sourceManagerStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public VersionedSourceManager(ReadOnlySourceManager initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sourceManagerStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sourceManagerStateList.add(new SourceManager(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Saves a copy of the current {@code SourceManager} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sourceManagerStateList.add(new SourceManager(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sourceManagerStateList.subList(currentStatePointer + 1, sourceManagerStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Restores the source manager to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "        resetData(sourceManagerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Restores the source manager to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fterh"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": "        resetData(sourceManagerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns true if {@code undo()} has source manager states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns true if {@code redo()} has source manager states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return currentStatePointer \u003c sourceManagerStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (!(other instanceof VersionedSourceManager)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fterh"
        },
        "content": "        VersionedSourceManager otherVersionedSourceManager \u003d (VersionedSourceManager) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return super.equals(otherVersionedSourceManager)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fterh"
        },
        "content": "                \u0026\u0026 sourceManagerStateList.equals(otherVersionedSourceManager.sourceManagerStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fterh"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedSourceManager.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fterh"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fterh"
        },
        "content": "            super(\"Current state pointer at start of sourceManagerState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fterh"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fterh"
        },
        "content": "            super(\"Current state pointer at end of sourceManagerState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "// To deprecate"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "fterh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "// To deprecate"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 137,
      "fterh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicatePersonException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "// To deprecate"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "fterh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "// To deprecate"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "fterh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/source/Detail.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "case141"
        },
        "content": "package seedu.address.model.source;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "case141"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "case141"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static seedu.address.model.source.Source.validateSourceAttribute;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "case141"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "case141"
        },
        "content": " * Represents a Source\u0027s Detail in the infinity machine."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "case141"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDetail(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "case141"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "case141"
        },
        "content": "public class Detail {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Details can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the detail must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "case141"
        },
        "content": "    public final String detail;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "case141"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Detail}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "case141"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param detail A valid detail."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "case141"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "case141"
        },
        "content": "    public Detail(String detail) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "case141"
        },
        "content": "        requireNonNull(detail);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "        checkArgument(validateSourceAttribute(detail, VALIDATION_REGEX), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "case141"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidDetail(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return validateSourceAttribute(test, VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "case141"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "case141"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "case141"
        },
        "content": "                || (other instanceof Detail // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "case141"
        },
        "content": "                \u0026\u0026 detail.equals(((Detail) other).detail)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "case141"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "case141"
        },
        "content": "        return detail.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "case141"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "case141"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "case141"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "case141"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "case141"
        },
        "content": "        return \u0027[\u0027 + detail + \u0027]\u0027;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "case141"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "case141": 43,
      "-": 13,
      "fterh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/source/Source.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "case141"
        },
        "content": "package seedu.address.model.source;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "case141"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "case141"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "case141"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "case141"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "case141"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.regex.PatternSyntaxException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "case141"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "case141"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "case141"
        },
        "content": " * Represents a Source in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "case141"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "case141"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "case141"
        },
        "content": "public class Source {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "case141"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "case141"
        },
        "content": "    private final Type type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "case141"
        },
        "content": "    private final Detail detail;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "case141"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "case141"
        },
        "content": "    public Source(Title title, Type type, Detail detail, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "case141"
        },
        "content": "        requireAllNonNull(title, type, detail, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "case141"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "case141"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "case141"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "case141"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * A static utility method to validate a source attribute with a regex expression."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * A private utility method to validate a source attribute with a regex expression."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @param attribute An attribute of the source class, e.g. title."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @param regex A regex expression with which to validate `attribute`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @return true if `attribute` is valid, and false if either `attribute` or `regex` is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static boolean validateSourceAttribute(String attribute, String regex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": "        boolean validationResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fterh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": "            validationResult \u003d attribute.matches(regex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fterh"
        },
        "content": "        } catch (PatternSyntaxException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": "            logger.severe(e.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return validationResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "case141"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "case141"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "case141"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "case141"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "case141"
        },
        "content": "    public Detail getDetail() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "case141"
        },
        "content": "        return detail;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "case141"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "case141"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "case141"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "case141"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "case141"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "case141"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "case141"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "case141"
        },
        "content": "     * Returns true if both sources of the same title have at least one other identity field that is the same."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "case141"
        },
        "content": "     * This defines a weaker notion of equality between two sources."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "case141"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "case141"
        },
        "content": "    public boolean isSameSource(Source otherSource) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "case141"
        },
        "content": "        if (otherSource \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "case141"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "case141"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "case141"
        },
        "content": "        return otherSource !\u003d null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "case141"
        },
        "content": "                \u0026\u0026 otherSource.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "case141"
        },
        "content": "                \u0026\u0026 (otherSource.getType().equals(getType()) || otherSource.getDetail().equals(getDetail()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "case141"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "case141"
        },
        "content": "     * Returns true if both sources have the same identity and data fields."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "case141"
        },
        "content": "     * This defines a stronger notion of equality between two sources."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "case141"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "case141"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "case141"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "case141"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "case141"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "case141"
        },
        "content": "        if (!(other instanceof Source)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "case141"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "case141"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "case141"
        },
        "content": "        Source otherSource \u003d (Source) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "case141"
        },
        "content": "        return otherSource.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "case141"
        },
        "content": "                \u0026\u0026 otherSource.getType().equals(getType())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "case141"
        },
        "content": "                \u0026\u0026 otherSource.getDetail().equals(getDetail())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "case141"
        },
        "content": "                \u0026\u0026 otherSource.getTags().equals(getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "case141"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "case141"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "case141"
        },
        "content": "        return Objects.hash(title, type, detail, tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "case141"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "case141"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "case141"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "case141"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "case141"
        },
        "content": "                .append(getType())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "case141"
        },
        "content": "                .append(\" Detail: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "case141"
        },
        "content": "                .append(getDetail())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "case141"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "case141"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "case141"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "case141"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "case141": 106,
      "fterh": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/source/SourceContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "package seedu.address.model.source;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " * Tests that a {@code Source}\u0027s {@code Title}, {@code Type} {@code Detail}, and {@code Tag}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " * match the keywords given. Performs a logical AND by checking if all those keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " * are present in the output source."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "public class SourceContainsKeywordsPredicate implements Predicate\u003cSource\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private final ArgumentMultimap keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public SourceContainsKeywordsPredicate(ArgumentMultimap keywords) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public boolean test(Source source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        String titleKeywords \u003d keywords.getValue(PREFIX_TITLE).orElse(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        String typeKeywords \u003d keywords.getValue(PREFIX_TYPE).orElse(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        String detailsKeywords \u003d keywords.getValue(PREFIX_DETAILS).orElse(\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        List\u003cString\u003e tagKeywords \u003d keywords.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (titleKeywords.equals(\"\") \u0026\u0026 tagKeywords.isEmpty()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                \u0026\u0026 typeKeywords.equals(\"\") \u0026\u0026 detailsKeywords.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (!titleKeywords.equals(\"\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            result \u003d result \u0026\u0026 matchTitleKeywords(titleKeywords, source);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (!typeKeywords.equals(\"\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            result \u003d result \u0026\u0026 matchTypeKeywords(typeKeywords, source);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (!detailsKeywords.equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            result \u003d result \u0026\u0026 matchDetailKeywords(detailsKeywords, source);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (!tagKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            List\u003cString\u003e listTitleKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            for (String tag : tagKeywords) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                listTitleKeywords.add(tag.trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            result \u003d result \u0026\u0026 matchTagKeywords(tagKeywords, source);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * Evaluates true for sources that have tags that match the tags entered by the user as an argument"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @param tagKeywords entered by user"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @param source to be tested"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @return true if present, else false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private boolean matchTagKeywords(List\u003cString\u003e tagKeywords, Source source) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        for (String tag : tagKeywords) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            result \u003d result \u0026\u0026 source.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(tag.trim(), keyword.tagName));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * Evaluates true for sources that have details that match the details entered by the user as an argument"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @param detailsKeywords entered by the user"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @param source to be tested"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @return true if matches, else false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private boolean matchDetailKeywords(String detailsKeywords, Source source) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        List\u003cString\u003e listTitleKeywords \u003d Arrays.asList(detailsKeywords.trim().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        return listTitleKeywords.stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(source.getDetail().detail, keyword));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * Evaluates true for sources that have types that match the types entered by the user as an argument"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @param typeKeywords entered by the user"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @param source to be tested"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @return true if matches, else false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private boolean matchTypeKeywords(String typeKeywords, Source source) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        List\u003cString\u003e listTitleKeywords \u003d Arrays.asList(typeKeywords.trim().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        return listTitleKeywords.stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(source.getType().type, keyword));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * Evaluates true for sources that have title that match the title entered by the user as an argument"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @param titleKeywords entered by the user"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @param source to be tested"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @return true if matches, else false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private boolean matchTitleKeywords(String titleKeywords, Source source) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        List\u003cString\u003e listTitleKeywords \u003d Arrays.asList(titleKeywords.trim().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        return listTitleKeywords.stream()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(source.getTitle().title, keyword));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                || (other instanceof SourceContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                \u0026\u0026 keywords.equals(((SourceContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/model/source/Title.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "case141"
        },
        "content": "package seedu.address.model.source;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "case141"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "case141"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static seedu.address.model.source.Source.validateSourceAttribute;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "case141"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "case141"
        },
        "content": " * Represents a Source\u0027s Title in the infinity machine."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "case141"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "case141"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "case141"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "case141"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "case141"
        },
        "content": "            \"Titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "case141"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "case141"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "case141"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "case141"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "case141"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "case141"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "case141"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "case141"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "case141"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "case141"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "case141"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "        checkArgument(validateSourceAttribute(title, VALIDATION_REGEX), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "case141"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return validateSourceAttribute(test, VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "case141"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "case141"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "case141"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "case141"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "case141"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "case141"
        },
        "content": "                \u0026\u0026 this.title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "case141"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "case141"
        },
        "content": "        return this.title.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "case141"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "case141": 49,
      "-": 5,
      "fterh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/source/Type.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "case141"
        },
        "content": "package seedu.address.model.source;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "case141"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "case141"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static seedu.address.model.source.Source.validateSourceAttribute;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "case141"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "case141"
        },
        "content": " * Represents a Source\u0027s Type in the infinity machine."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "case141"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidType(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "case141"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "case141"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "case141"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Type should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "case141"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the type must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "case141"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "case141"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "case141"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "case141"
        },
        "content": "    public final String type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "case141"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Type}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "case141"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param type A valid type."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "case141"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "case141"
        },
        "content": "    public Type(String type) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "case141"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "        checkArgument(validateSourceAttribute(type, VALIDATION_REGEX), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "case141"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidType(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return validateSourceAttribute(test, VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "case141"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "case141"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "case141"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "case141"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "case141"
        },
        "content": "                || (other instanceof Type // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "case141"
        },
        "content": "                \u0026\u0026 this.type.equals(((Type) other).type)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "case141"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "case141"
        },
        "content": "        return this.type.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "case141"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "case141"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "case141": 47,
      "-": 8,
      "fterh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/source/UniqueSourceList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.model.source;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.exceptions.DuplicateSourceException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.exceptions.SourceNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": " * A list of sources that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": " * A source is considered unique by comparing using {@code Source#isSameSource(Source)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": " * sources uses Source#isSameSource(Source) for equality so as to ensure that the source being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": " * unique in terms of identity in the UniqueSourceList. However, the removal of a source uses Source#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": " * as to ensure that the source with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": " * @see Source#isSameSource(Source)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class UniqueSourceList implements Iterable\u003cSource\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private final ObservableList\u003cSource\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private final ObservableList\u003cSource\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns true if the list contains an equivalent source as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public boolean contains(Source toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameSource);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Adds a source to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * The source must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void add(Source toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new DuplicateSourceException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * Adds a source to the list at a specified index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     * The source must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public void addAtIndex(Source toAdd, int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "            throw new DuplicateSourceException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        internalList.add(index, toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Replaces the source {@code target} in the list with {@code editedSource}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * The source identity of {@code editedSource} must not be the same as another existing source in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void setSource(Source target, Source editedSource) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fterh"
        },
        "content": "        requireAllNonNull(target, editedSource);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new SourceNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (!target.isSameSource(editedSource) \u0026\u0026 contains(editedSource)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new DuplicateSourceException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fterh"
        },
        "content": "        internalList.set(index, editedSource);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Removes the equivalent source from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * The source must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void remove(Source toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fterh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new SourceNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void setSources(UniqueSourceList replacement) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fterh"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fterh"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Replaces the contents of this list with {@code sources}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * {@code sources} must not contain duplicate sources."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void setSources(List\u003cSource\u003e sources) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fterh"
        },
        "content": "        requireAllNonNull(sources);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (!sourcesAreUnique(sources)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new DuplicateSourceException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fterh"
        },
        "content": "        internalList.setAll(sources);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public ObservableList\u003cSource\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public Iterator\u003cSource\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fterh"
        },
        "content": "                || (other instanceof UniqueSourceList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fterh"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueSourceList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns true if {@code sources} contains only unique sources."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private boolean sourcesAreUnique(List\u003cSource\u003e sources) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fterh"
        },
        "content": "        for (int i \u003d 0; i \u003c sources.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fterh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c sources.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fterh"
        },
        "content": "                if (sources.get(i).isSameSource(sources.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fterh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fterh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fterh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 137,
      "DarrenDragonLee": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/source/exceptions/DuplicateSourceException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.model.source.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Signals that the operation will result in duplicate Sources (Sources are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class DuplicateSourceException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public DuplicateSourceException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "        super(\"Operation would result in duplicate sources\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/source/exceptions/SourceNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.model.source.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Signals that the operation is unable to find the specified source."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class SourceNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "fterh": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.DeletedSources;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyDeletedSources;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.ReadOnlySourceManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.SourceManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Detail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Contains utility methods for populating {@code SourceManager} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static Source[] getSampleSources() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return new Source[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "            new Source(new Title(\"FooTitle1\"), new Type(\"FooType1\"), new Detail(\"FooDetail1\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "                getTagSet(\"footag1\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "            new Source(new Title(\"FooTitle2\"), new Type(\"FooType2\"), new Detail(\"FooDetail2\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "                getTagSet(\"footag2\", \"footag1\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "            new Source(new Title(\"FooTitle3\"), new Type(\"FooType3\"), new Detail(\"FooDetail3\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "                getTagSet(\"footag3\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "            new Source(new Title(\"FooTitle4\"), new Type(\"FooType4\"), new Detail(\"FooDetail4\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "                getTagSet(\"footag4\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "            new Source(new Title(\"FooTitle5\"), new Type(\"FooType5\"), new Detail(\"FooDetail5\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "                getTagSet(\"footag5\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "            new Source(new Title(\"FooTitle6\"), new Type(\"FooType6\"), new Detail(\"FooDetail6\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "                getTagSet(\"footag2\"))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static ReadOnlySourceManager getSampleSourceManager() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "        SourceManager sampleSm \u003d new SourceManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": "        for (Source sampleSource : getSampleSources()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "            sampleSm.addSource(sampleSource);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return sampleSm;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Source[] getSampleDeletedSources() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Source[] {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            new Source(new Title(\"Algorithms 0\"), new Type(\"Math\"), new Detail(\"AlgoDetails12\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"ComputerScience12\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            new Source(new Title(\"Algorithms 1\"), new Type(\"Math\"), new Detail(\"AlgoDetails12\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                        getTagSet(\"ComputerScience12\"))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyDeletedSources getSampleDeletedSourcesList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeletedSources deletedSources \u003d new DeletedSources();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Source sampleDeletedSource : getSampleDeletedSources()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            deletedSources.addDeletedSource(sampleDeletedSource);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return deletedSources;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "fterh": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AliasStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Represents a storage for user-defined command aliases."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "public interface AliasStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Clears aliases in storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void clearAliasesInStorage() throws IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns the file path of the Aliases data file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "    Path getAliasesFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns Aliases data from storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @returns a HashMap mapping aliases to commands (possibly empty)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "    HashMap\u003cString, String\u003e readAliases() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Saves the provided Aliases to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @param aliases a HashMap mapping aliases to commands; cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "    void saveAliases(HashMap\u003cString, String\u003e aliases) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ConcreteAliasStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": " * A concrete implementation of AliasStorage to access aliases stored persistently."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class ConcreteAliasStorage implements AliasStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String ALIAS_COMMAND_SEPERATOR \u003d \":\"; // i.e. alias:command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String PAIR_SEPARATOR \u003d \";\"; // i.e. alias1:command1;alias2:command2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final Path ALIASES_STORAGE_PATH \u003d Paths.get(\"data\" , \"aliases.data\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public ConcreteAliasStorage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this.filePath \u003d ALIASES_STORAGE_PATH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public ConcreteAliasStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void clearAliasesInStorage() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "        FileUtil.writeToFile(filePath, \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public Path getAliasesFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public HashMap\u003cString, String\u003e readAliases() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return readAliases(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Similar to {@link #readAliases()}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @param aliasesFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public HashMap\u003cString, String\u003e readAliases(Path aliasesFilePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Objects.requireNonNull(aliasesFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // Guard against non-existent file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (!FileUtil.isFileExists(aliasesFilePath)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new IOException(\"File does not exist\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // Should never throw, since we guarded against a non-existent file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fterh"
        },
        "content": "        String fileContents \u003d FileUtil.readFromFile(aliasesFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fterh"
        },
        "content": "        HashMap\u003cString, String\u003e aliases \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fterh"
        },
        "content": "        String[] aliasCommandPairs \u003d fileContents.split(PAIR_SEPARATOR);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fterh"
        },
        "content": "        for (int i \u003d 0; i \u003c aliasCommandPairs.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "            String[] aliasCommandPair \u003d aliasCommandPairs[i].split(ALIAS_COMMAND_SEPERATOR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "            // Guard against invalid format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": "            if (aliasCommandPair.length !\u003d 2) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fterh"
        },
        "content": "                throw new DataConversionException(new Exception(\"Invalid format\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fterh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": "            aliases.put(aliasCommandPair[0], aliasCommandPair[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return aliases;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void saveAliases(HashMap\u003cString, String\u003e aliases) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Objects.requireNonNull(aliases);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fterh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliases.forEach((alias, command) -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fterh"
        },
        "content": "            sb.append(alias);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fterh"
        },
        "content": "            sb.append(ALIAS_COMMAND_SEPERATOR);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fterh"
        },
        "content": "            sb.append(command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fterh"
        },
        "content": "            sb.append(PAIR_SEPARATOR);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fterh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fterh"
        },
        "content": "        FileUtil.writeToFile(filePath, sb.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSource.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.model.source.Detail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.model.source.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.model.source.Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " * Jackson-friendly version of {@link Source}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "class JsonAdaptedSource {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Source\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private final String detail;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * Constructs a {@code JsonAdaptedSource} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public JsonAdaptedSource(@JsonProperty(\"title\") String title, @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"detail\") String detail, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * Converts a given {@code Source} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public JsonAdaptedSource(Source source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d source.getType().type;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        detail \u003d source.getDetail().detail;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * Converts this Jackson-friendly adapted source object into the model\u0027s {@code Source} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted source."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public Source toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        final List\u003cTag\u003e sourceTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            sourceTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (!Type.isValidType(type)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        final Type modelType \u003d new Type(type);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (detail \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Detail.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        if (!Detail.isValidDetail(detail)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Detail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        final Detail modelDetail \u003d new Detail(detail);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(sourceTags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Source(modelTitle, modelType, modelDetail, modelTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 88,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableSourceManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlySourceManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.SourceManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable Source Manager that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"sourcemanager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableSourceManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SOURCE \u003d \"Source list contains duplicate entires.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private final List\u003cJsonAdaptedSource\u003e sources \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableSourceManager} with the given sources."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableSourceManager(@JsonProperty(\"sources\") List\u003cJsonAdaptedSource\u003e sources) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        this.sources.addAll(sources);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlySourceManager} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableSourceManager}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableSourceManager(ReadOnlySourceManager source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        sources.addAll(source.getSourceList().stream().map(JsonAdaptedSource::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this source manager into the model\u0027s {@code SourceManager} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public SourceManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        SourceManager sourceManager \u003d new SourceManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedSource jsonAdaptedSource : sources) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            Source source \u003d jsonAdaptedSource.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (sourceManager.hasSource(source)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SOURCE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            sourceManager.addSource(source);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return sourceManager;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 41,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSourceManagerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlySourceManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access Source Manager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSourceManagerStorage implements SourceManagerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSourceManagerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSourceManagerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getSourceManagerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlySourceManager\u003e readSourceManager() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readSourceManager(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readSourceManager()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlySourceManager\u003e readSourceManager(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableSourceManager\u003e jsonSourceManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableSourceManager.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonSourceManager.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonSourceManager.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveSourceManager(ReadOnlySourceManager sourceManager) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveSourceManager(sourceManager, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveSourceManager(ReadOnlySourceManager, Path)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveSourceManager(ReadOnlySourceManager sourceManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sourceManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSourceManager(sourceManager), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 60,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//Modified"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyDeletedSources;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlySourceManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "suriruhani"
        },
        "content": " * API of the Source Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends SourceManagerStorage, UserPrefsStorage, DeletedSourcesStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getSourceManagerFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlySourceManager\u003e readSourceManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveSourceManager(ReadOnlySourceManager sourceManager) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getDeletedSourceFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyDeletedSources\u003e readDeletedSources() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveDeletedSources(ReadOnlyDeletedSources deletedSources) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SourceCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Source}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class SourceCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"SourceListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "case141"
        },
        "content": "     * or an exceptions will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Source source;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label detail;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public SourceCard(Source source, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        title.setText(source.getTitle().title);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        type.setText(source.getType().type);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        detail.setText(source.getDetail().detail);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof SourceCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        SourceCard card \u003d (SourceCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 source.equals(card.source);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "case141": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": "          \u003cVBox fx:id\u003d\"sourceList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": "            \u003cStackPane fx:id\u003d\"sourceListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "fterh": 2
    }
  },
  {
    "path": "src/main/resources/view/SourceListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \u003cLabel fx:id\u003d\"detail\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "      \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "fterh": 3
    }
  },
  {
    "path": "src/main/resources/view/SourceListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "  \u003cListView fx:id\u003d\"sourceListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "fterh": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private final SourceListPanelHandle sourceListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sourceListPanel \u003d new SourceListPanelHandle(getChildNode(SourceListPanelHandle.SOURCE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceListPanelHandle getSourceListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return sourceListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "fterh": 4
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/SourceCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Provides a handle to a source card in the source list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class SourceCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String TITLE_FIELD_ID \u003d \"#title\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String TYPE_FIELD_ID \u003d \"#type\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String DETAIL_FIELD_ID \u003d \"#detail\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private final Label titleLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private final Label typeLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private final Label detailLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "        titleLabel \u003d getChildNode(TITLE_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "        typeLabel \u003d getChildNode(TYPE_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "        detailLabel \u003d getChildNode(DETAIL_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return titleLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return typeLabel.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public String getDetail() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return detailLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fterh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fterh"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns true if this handle contains {@code source}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public boolean equals(Source source) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return getTitle().equals(source.getTitle().title)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fterh"
        },
        "content": "                \u0026\u0026 getType().equals(source.getType().type)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "                \u0026\u0026 getDetail().equals(source.getDetail().detail)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(source.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.ReadOnlySourceManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.SourceManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.storage.JsonSourceManagerStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "    protected Supplier\u003cReadOnlySourceManager\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlySourceManager\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "            JsonSourceManagerStorage jsonSourceManagerStorage \u003d new JsonSourceManagerStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "                jsonSourceManagerStorage.saveSourceManager(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": "        userPrefs.setSourceManagerFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns a defensive copy of the source manager data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceManager readStorageSourceManager() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return new SourceManager(storage.readSourceManager().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fterh"
        },
        "content": "            throw new AssertionError(\"Data is not in the SourceManager format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return storage.getSourceManagerFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getSourceManager()), new UserPrefs(), model.getDeletedSources());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fterh"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredSourceList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 96,
      "fterh": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "case141"
        },
        "content": "        /* IMPORTANT: Any code below an exceptions-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "case141"
        },
        "content": "         * That means you should not have more than one exceptions test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "case141": 2,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DETAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalSources.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlySourceManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonDeletedSourcesStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonSourceManagerStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SourceBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exceptions\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSourceManagerStorage sourceManagerStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonSourceManagerStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonDeletedSourcesStorage jsonDeletedSourcesStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonDeletedSourcesStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(sourceManagerStorage, userPrefsStorage, jsonDeletedSourcesStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_LIST_ALL_SUCCESS, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonSourceManagerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSourceManagerStorage sourceManagerStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonSourceManagerIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonDeletedSourcesStorage jsonDeletedSourcesStorage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonDeletedSourcesStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(sourceManagerStorage, userPrefsStorage, jsonDeletedSourcesStorage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + TITLE_DESC_AMY + TYPE_DESC_AMY"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                + DETAIL_DESC_AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Source expectedSource \u003d new SourceBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addSource(expectedSource);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredSourceList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredSourceList().remove(0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exceptions is thrown and that the result message is correct."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSourceManager(), new UserPrefs(), model.getDeletedSources());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exceptions is thrown,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonSourceManagerIoExceptionThrowingStub extends JsonSourceManagerStorage {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonSourceManagerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveSourceManager(ReadOnlySourceManager sourceManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 3,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyDeletedSources;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlySourceManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.SourceManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SourceBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullSource_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_sourceAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingSourceAdded modelStub \u003d new ModelStubAcceptingSourceAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Source validSource \u003d new SourceBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validSource).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validSource), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validSource), modelStub.sourcesAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateSource_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Source validSource \u003d new SourceBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validSource);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithSource(validSource);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_SOURCE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Source alice \u003d new SourceBuilder().withTitle(\"Alice\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Source bob \u003d new SourceBuilder().withTitle(\"Bob\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getSourceManagerFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSourceManagerFilePath(Path sourceManagerFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getDeletedSourceFilePath() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setDeletedSourceFilePath(Path sourceManagerFilePath) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addSource(Source source) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addDeletedSource(Source source) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        public void addSourceAtIndex(Source source, int index) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addDeletedSourceAtIndex(Source source, int index) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSourceManager(ReadOnlySourceManager newData) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setDeletedSources(ReadOnlyDeletedSources deletedSources) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlySourceManager getSourceManager() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyDeletedSources getDeletedSources() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasSource(Source source) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasDeletedSource(Source source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteSource(Source target) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeDeletedSource(Source target) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSource(Source target, Source editedSource) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setDeletedSource(Source target, Source editedSource) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cSource\u003e getFilteredSourceList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cSource\u003e getFilteredDeletedSourceList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredSourceList(Predicate\u003cSource\u003e predicate) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredDeletedSourceList(Predicate\u003cSource\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoSourceManager() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoSourceManager() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoSourceManager() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoSourceManager() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitSourceManager() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoDeletedSources() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoDeletedSources() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoDeletedSources() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoDeletedSources() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitDeletedSources() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cSource\u003e selectedSourceProperty() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        public Source getSelectedSource() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedSource(Source source) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cSource\u003e selectedDeletedSourceProperty() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        public Source getSelectedDeletedSource() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedDeletedSource(Source source) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithSource extends ModelStub {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Source source;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithSource(Source source) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(source);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            this.source \u003d source;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasSource(Source source) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(source);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.source.isSameSource(source);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the source being added."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingSourceAdded extends ModelStub {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cSource\u003e sourcesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasSource(Source source) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(source);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            return sourcesAdded.stream().anyMatch(source::isSameSource);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addSource(Source source) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(source);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            sourcesAdded.add(source);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitSourceManager() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlySourceManager getSourceManager() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SourceManager();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 354,
      "DarrenDragonLee": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BiblioCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SOURCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import static seedu.address.testutil.TypicalSources.getTypicalDeletedSources;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import static seedu.address.testutil.TypicalSources.getTypicalSourceManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": " * {@code BiblioCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "public class BiblioCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSourceManager(), new UserPrefs(), getTypicalDeletedSources());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    public void execute_validStylevalidIndex_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        BiblioCommand biblioCommand \u003d new BiblioCommand(\"APA\", INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            String expectedMessage \u003d new BiblioCommand(\"APA\", INDEX_FIRST_SOURCE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "                    .execute(new ModelManager(getTypicalSourceManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "                                              getTypicalDeletedSources()), new CommandHistory())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "                    .getFeedbackToUser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            ModelManager expectedModel \u003d new ModelManager(model.getSourceManager(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "                                                          new UserPrefs(), getTypicalDeletedSources());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            assertCommandSuccess(biblioCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "            assert false : \"CommandException thrown\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    public void execute_invalidStyleValidIndex_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        BiblioCommand biblioCommand \u003d new BiblioCommand(\"Foo\", INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        assertCommandFailure(biblioCommand, model, commandHistory, Messages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    public void execute_validStyleInvalidIndex_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSourceList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        BiblioCommand biblioCommand \u003d new BiblioCommand(\"APA\", outOfBoundIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        assertCommandFailure(biblioCommand, model, commandHistory, Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    public void execute_invalidStyleInvalidIndex_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSourceList().size() + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        BiblioCommand biblioCommand \u003d new BiblioCommand(\"Foo\", outOfBoundIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "        assertCommandFailure(biblioCommand, model, commandHistory, Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DoItTomorrow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DoItTomorrow": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.SourceManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.testutil.EditSourceDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String VALID_TITLE_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String VALID_TITLE_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TYPE_AMY \u003d \"amy type\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TYPE_BOB \u003d \"bob type\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String VALID_DETAIL_AMY \u003d \"amy_detail\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String VALID_DETAIL_BOB \u003d \"bob_detail\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String VALID_TAG_FOO \u003d \"foo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String VALID_TAG_BAR \u003d \"bar\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String TITLE_DESC_AMY \u003d \" \" + PREFIX_TITLE + VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String TITLE_DESC_BOB \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String TYPE_DESC_AMY \u003d \" \" + PREFIX_TYPE + VALID_TYPE_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String TYPE_DESC_BOB \u003d \" \" + PREFIX_TYPE + VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String DETAIL_DESC_AMY \u003d \" \" + PREFIX_DETAILS + VALID_DETAIL_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String DETAIL_DESC_BOB \u003d \" \" + PREFIX_DETAILS + VALID_DETAIL_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String TAG_DESC_FOO \u003d \" \" + PREFIX_TAG + VALID_TAG_FOO;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String TAG_DESC_BAR \u003d \" \" + PREFIX_TAG + VALID_TAG_BAR;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"!@#$%^\u0026*()\"; // Special characters not allowed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String INVALID_TYPE_DESC \u003d \" \" + PREFIX_TYPE + \"!@#$%^\u0026*()\"; // Special characters not allowed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String INVALID_DETAIL_DESC \u003d \" \" + PREFIX_DETAILS; // empty string not allowed for details"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"foobar*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final EditCommand.EditSourceDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public static final EditCommand.EditSourceDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fterh"
        },
        "content": "        DESC_AMY \u003d new EditSourceDescriptorBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": "                .withType(VALID_TYPE_AMY).withDetail(VALID_DETAIL_AMY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "                .withTags(VALID_TAG_FOO).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": "        DESC_BOB \u003d new EditSourceDescriptorBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fterh"
        },
        "content": "                .withType(VALID_TYPE_BOB).withDetail(VALID_DETAIL_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fterh"
        },
        "content": "                .withTags(VALID_TAG_FOO, VALID_TAG_BAR).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * - the source manager, filtered source list and selected source in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fterh"
        },
        "content": "        SourceManager expectedSourceManager \u003d new SourceManager(actualModel.getSourceManager());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fterh"
        },
        "content": "        List\u003cSource\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredSourceList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Source expectedSelectedSource \u003d actualModel.getSelectedSource();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fterh"
        },
        "content": "            assertEquals(expectedSourceManager, actualModel.getSourceManager());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fterh"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredSourceList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fterh"
        },
        "content": "            assertEquals(expectedSelectedSource, actualModel.getSelectedSource());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the source at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * {@code model}\u0027s source manager."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static void showSourceAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredSourceList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //Source source \u003d model.getFilteredSourceList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //final String[] splitTitle \u003d source.getTitle().title.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //model.updateFilteredSourceList(new SourceContainsKeywordsPredicate(Arrays.asList(splitTitle[0])));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //assertEquals(1, model.getFilteredSourceList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Deletes the first source in {@code model}\u0027s filtered list from {@code model}\u0027s source manager."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static void deleteFirstSource(Model model) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Source firstSource \u003d model.getFilteredSourceList().get(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fterh"
        },
        "content": "        model.deleteSource(firstSource);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fterh"
        },
        "content": "        model.commitSourceManager();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 5,
      "-": 89,
      "fterh": 46,
      "DarrenDragonLee": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CustomOrderCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalSources.getTypicalDeletedSources;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import static seedu.address.testutil.TypicalSources.getTypicalSourceManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "public class CustomOrderCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model testModel \u003d new ModelManager(getTypicalSourceManager(), new UserPrefs(), getTypicalDeletedSources());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public void execute_basicOperationForwardSwap_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int sourceIndex \u003d 3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int movePosition \u003d 5;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(testModel.getSourceManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                testModel.getDeletedSources());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Source sourceToMove \u003d testModel.getFilteredSourceList().get(sourceIndex - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        expectedModel.deleteSource(sourceToMove);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        expectedModel.addSourceAtIndex(sourceToMove, movePosition - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        String expectedMessage \u003d String.format(CustomOrderCommand.MESSAGE_SUCCESS, sourceIndex, movePosition);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                new CustomOrderCommand(sourceIndex, movePosition),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                testModel,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public void execute_basicOperationForwardSwapEdgeCase_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int sourceIndex \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int movePosition \u003d testModel.getFilteredSourceList().size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(testModel.getSourceManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                testModel.getDeletedSources());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Source sourceToMove \u003d testModel.getFilteredSourceList().get(sourceIndex - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        expectedModel.deleteSource(sourceToMove);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        expectedModel.addSourceAtIndex(sourceToMove, movePosition - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        String expectedMessage \u003d String.format(CustomOrderCommand.MESSAGE_SUCCESS, sourceIndex, movePosition);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                new CustomOrderCommand(sourceIndex, movePosition),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                testModel,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public void execute_basicOperationBackwardSwap_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int sourceIndex \u003d 5;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int movePosition \u003d 3;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(testModel.getSourceManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                testModel.getDeletedSources());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Source sourceToMove \u003d testModel.getFilteredSourceList().get(sourceIndex - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        expectedModel.deleteSource(sourceToMove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        expectedModel.addSourceAtIndex(sourceToMove, movePosition - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        String expectedMessage \u003d String.format(CustomOrderCommand.MESSAGE_SUCCESS, sourceIndex, movePosition);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                new CustomOrderCommand(sourceIndex, movePosition),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                testModel,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public void execute_basicOperationBackwardSwapEdgeCase_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int sourceIndex \u003d testModel.getFilteredSourceList().size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int movePosition \u003d 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(testModel.getSourceManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                testModel.getDeletedSources());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        Source sourceToMove \u003d testModel.getFilteredSourceList().get(sourceIndex - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        expectedModel.deleteSource(sourceToMove);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        expectedModel.addSourceAtIndex(sourceToMove, movePosition - 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        String expectedMessage \u003d String.format(CustomOrderCommand.MESSAGE_SUCCESS, sourceIndex, movePosition);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                new CustomOrderCommand(sourceIndex, movePosition),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                testModel,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public void execute_sameInputParameters_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int sourceIndex \u003d 4;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int movePosition \u003d 4;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        String expectedMessage \u003d CustomOrderCommand.MESSAGE_INDEX_IDENTICAL;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                new CustomOrderCommand(sourceIndex, movePosition),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                testModel,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public void execute_indexZero_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int sourceIndex \u003d 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int movePosition \u003d 4;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        String expectedMessage \u003d CustomOrderCommand.MESSAGE_SOURCE_INDEX_INVALID;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                new CustomOrderCommand(sourceIndex, movePosition),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                testModel,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public void execute_indexOutOfBounds_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int sourceIndex \u003d testModel.getFilteredSourceList().size() + 1;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int movePosition \u003d 4;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        String expectedMessage \u003d CustomOrderCommand.MESSAGE_SOURCE_INDEX_INVALID;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                new CustomOrderCommand(sourceIndex, movePosition),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                testModel,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public void execute_moveZero_failure() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int sourceIndex \u003d 4;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int movePosition \u003d 0;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        String expectedMessage \u003d CustomOrderCommand.MESSAGE_MOVE_POSITION_INVALID;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                new CustomOrderCommand(sourceIndex, movePosition),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                testModel,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    public void execute_moveOutOfBounds_failure() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int sourceIndex \u003d 4;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        int movePosition \u003d testModel.getFilteredSourceList().size() + 1;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        String expectedMessage \u003d CustomOrderCommand.MESSAGE_MOVE_POSITION_INVALID;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                new CustomOrderCommand(sourceIndex, movePosition),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                testModel,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DarrenDragonLee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "DarrenDragonLee": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showSourceAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SOURCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SOURCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalSources.getTypicalDeletedSources;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalSources.getTypicalSourceManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSourceManager(), new UserPrefs(), getTypicalDeletedSources());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Source sourceToDelete \u003d model.getFilteredSourceList().get(INDEX_FIRST_SOURCE.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_SOURCE_SUCCESS, sourceToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSourceManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                model.getDeletedSources());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deleteSource(sourceToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSourceList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showSourceAtIndex(model, INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Source sourceToDelete \u003d model.getFilteredSourceList().get(INDEX_FIRST_SOURCE.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_SOURCE_SUCCESS, sourceToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSourceManager(), new UserPrefs(), getTypicalDeletedSources());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deleteSource(sourceToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoSource(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showSourceAtIndex(model, INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SOURCE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of source manager list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSourceManager().getSourceList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Source sourceToDelete \u003d model.getFilteredSourceList().get(INDEX_FIRST_SOURCE.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSourceManager(), new UserPrefs(), model.getDeletedSources());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deleteSource(sourceToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first source deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts sourceManager back to previous state and filtered source list to show all sources"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoSourceManager();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        //        UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first source deleted again"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        //        expectedModel.redoSourceManager();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //        RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSourceList().size() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e source manager state not added into model"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // single source manager state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Source} from a filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted source in the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the source object regardless of indexing."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameSourceDeleted() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSourceManager(), new UserPrefs(), model.getDeletedSources());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        showSourceAtIndex(model, INDEX_SECOND_SOURCE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Source sourceToDelete \u003d model.getFilteredSourceList().get(INDEX_FIRST_SOURCE.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deleteSource(sourceToDelete);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second source in unfiltered source list / first source in filtered source list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts sourceManager back to previous state and filtered source list to show all sources"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoSourceManager();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandSuccess(new UndoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        //        UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertNotEquals(sourceToDelete, model.getFilteredSourceList().get(INDEX_FIRST_SOURCE.getZeroBased()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second source in unfiltered source list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        //        expectedModel.redoSourceManager();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandSuccess(new RedoCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        //        RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_SOURCE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different source -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoSource(Model model) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredSourceList(p -\u003e false);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredSourceList().isEmpty());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 2,
      "-": 180
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FOO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showSourceAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SOURCE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SOURCE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalSources.getTypicalDeletedSources;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalSources.getTypicalSourceManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditSourceDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.SourceManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditSourceDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SourceBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSourceManager(), new UserPrefs(), getTypicalDeletedSources());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Source editedSource \u003d new SourceBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditSourceDescriptor descriptor \u003d new EditSourceDescriptorBuilder(editedSource).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SOURCE, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SOURCE_SUCCESS, editedSource);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SourceManager(model.getSourceManager()), new UserPrefs(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                model.getDeletedSources());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSource(model.getFilteredSourceList().get(0), editedSource);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastSource \u003d Index.fromOneBased(model.getFilteredSourceList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Source lastSource \u003d model.getFilteredSourceList().get(indexLastSource.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        SourceBuilder sourceInList \u003d new SourceBuilder(lastSource);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Source editedSource \u003d sourceInList.withTitle(VALID_TITLE_BOB).withType(VALID_TYPE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FOO).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditSourceDescriptor descriptor \u003d new EditSourceDescriptorBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withType(VALID_TYPE_BOB).withTags(VALID_TAG_FOO).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastSource, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SOURCE_SUCCESS, editedSource);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SourceManager(model.getSourceManager()), new UserPrefs(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                model.getDeletedSources());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSource(lastSource, editedSource);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SOURCE, new EditSourceDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Source editedSource \u003d model.getFilteredSourceList().get(INDEX_FIRST_SOURCE.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SOURCE_SUCCESS, editedSource);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SourceManager(model.getSourceManager()), new UserPrefs(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                model.getDeletedSources());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        showSourceAtIndex(model, INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Source sourceInFilteredList \u003d model.getFilteredSourceList().get(INDEX_FIRST_SOURCE.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Source editedSource \u003d new SourceBuilder(sourceInFilteredList).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SOURCE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditSourceDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_SOURCE_SUCCESS, editedSource);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SourceManager(model.getSourceManager()), new UserPrefs(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                model.getDeletedSources());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSource(model.getFilteredSourceList().get(0), editedSource);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateSourceUnfilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Source firstSource \u003d model.getFilteredSourceList().get(INDEX_FIRST_SOURCE.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditSourceDescriptor descriptor \u003d new EditSourceDescriptorBuilder(firstSource).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_SOURCE, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_SOURCE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateSourceFilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        showSourceAtIndex(model, INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit source in filtered list into a duplicate in source manager"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Source sourceInList \u003d model.getSourceManager().getSourceList().get(INDEX_SECOND_SOURCE.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SOURCE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditSourceDescriptorBuilder(sourceInList).build());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_SOURCE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidSourceIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSourceList().size() + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditSourceDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditSourceDescriptorBuilder().withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of source manager"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidSourceIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        showSourceAtIndex(model, INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SOURCE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of source manager list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSourceManager().getSourceList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditSourceDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Source editedSource \u003d new SourceBuilder().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Source sourceToEdit \u003d model.getFilteredSourceList().get(INDEX_FIRST_SOURCE.getZeroBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        EditSourceDescriptor descriptor \u003d new EditSourceDescriptorBuilder(editedSource).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SOURCE, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SourceManager(model.getSourceManager()), new UserPrefs(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                model.getDeletedSources());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSource(sourceToEdit, editedSource);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first source edited"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts sourceManager back to previous state and filtered source list to show all sources"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoSourceManager();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first source edited again"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoSourceManager();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSourceList().size() + 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditSourceDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditSourceDescriptorBuilder().withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e source manager state not added into model"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // single source manager state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Source} from a filtered list."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited source in the"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the source object regardless of indexing."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameSourceEdited() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Source editedSource \u003d new SourceBuilder().build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        EditSourceDescriptor descriptor \u003d new EditSourceDescriptorBuilder(editedSource).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_SOURCE, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SourceManager(model.getSourceManager()), new UserPrefs(),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                model.getDeletedSources());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        showSourceAtIndex(model, INDEX_SECOND_SOURCE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Source sourceToEdit \u003d model.getFilteredSourceList().get(INDEX_FIRST_SOURCE.getZeroBased());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSource(sourceToEdit, editedSource);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitSourceManager();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second source in unfiltered source list / first source in filtered source list"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts sourceManager back to previous state and filtered source list to show all sources"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoSourceManager();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredSourceList().get(INDEX_FIRST_SOURCE.getZeroBased()), sourceToEdit);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second source in unfiltered source list"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoSourceManager();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_SOURCE, DESC_AMY);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        EditSourceDescriptor copyDescriptor \u003d new EditSourceDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_SOURCE, copyDescriptor);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_SOURCE, DESC_AMY)));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_SOURCE, DESC_BOB)));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 3,
      "-": 257
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showSourceAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SOURCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalSources.getTypicalDeletedSources;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalSources.getTypicalSourceManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalSourceManager(), new UserPrefs(), getTypicalDeletedSources());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getSourceManager(), new UserPrefs(), model.getDeletedSources());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_LIST_ALL_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showSourceAtIndex(model, INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_LIST_ALL_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 4,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.model.source.SourceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchCommand}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSourceManager(), new UserPrefs(), getTypicalDeletedSources());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSourceManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            getTypicalDeletedSources());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        ArgumentMultimap first \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        first.put(new Prefix(\"first\"), \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        ArgumentMultimap second \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        second.put(new Prefix(\"second\"), \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        SourceContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//                new SourceContainsKeywordsPredicate(first);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        SourceContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//                new SourceContainsKeywordsPredicate(second);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        SearchCommand searchFirstCommand \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        SearchCommand searchSecondCommand \u003d new SearchCommand(secondPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        assertTrue(searchFirstCommand.equals(searchFirstCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        SearchCommand searchFirstCommandCopy \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        assertTrue(searchFirstCommand.equals(searchFirstCommandCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        assertFalse(searchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        assertFalse(searchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        // different source -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        assertFalse(searchFirstCommand.equals(searchSecondCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noSourceFound() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_SOURCES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        SourceContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        expectedModel.updateFilteredSourceList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "//        assertEquals(Collections.emptyList(), model.getFilteredSourceList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multipleSourcesFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SOURCES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        SourceContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredSourceList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredSourceList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code TitleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private SourceContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        argMultimap.put(new Prefix(\"i/\"), userInput);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        return new SourceContainsKeywordsPredicate(argMultimap);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //return new SourceContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 52,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showSourceAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SOURCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SOURCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SOURCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalSources.getTypicalDeletedSources;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalSources.getTypicalSourceManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSourceManager(), new UserPrefs(), getTypicalDeletedSources());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSourceManager(), new UserPrefs(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            getTypicalDeletedSources());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastSourceIndex \u003d Index.fromOneBased(model.getFilteredSourceList().size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_SOURCE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastSourceIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredSourceList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        showSourceAtIndex(model, INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        showSourceAtIndex(expectedModel, INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showSourceAtIndex(model, INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showSourceAtIndex(expectedModel, INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_SOURCE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of source manager list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getSourceManager().getSourceList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_SOURCE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different source -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * and checks that the model\u0027s selected source is set to the source at {@code index} in the filtered source list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_SOURCE_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSelectedSource(model.getFilteredSourceList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 4,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AliasManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class AliasManagerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private class CommandValidatorStub implements CommandValidator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "        public boolean isValidCommand(String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "            if (command.equals(EXISTING_COMMAND_1) || command.equals(EXISTING_COMMAND_2)) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String ALIAS_1 \u003d \"a\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String ALIAS_2 \u003d \"b\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String EXISTING_COMMAND_1 \u003d \"foo\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String EXISTING_COMMAND_2 \u003d \"bar\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String NOVEL_COMMAND_1 \u003d \"novel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private CommandValidator commandValidator \u003d new CommandValidatorStub();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private AliasManager aliasManager \u003d new AliasManager(commandValidator);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // Creates fresh instance without persistence"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "        // Alias persistence messes up unit test cases"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager \u003d new AliasManager(commandValidator, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Create an alias using an invalid alias syntax"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void create_existingCommand_invalidAlias1() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(EXISTING_COMMAND_1, \";\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Create an alias using an invalid alias syntax"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void create_existingCommand_invalidAlias2() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(EXISTING_COMMAND_1, \"a:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Create an alias using an invalid alias syntax"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void create_existingCommand_invalidAlias3() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(EXISTING_COMMAND_1, \"a:b\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Create an alias for an existing (valid) command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void create_existingCommand_unusedAlias() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertFalse(aliasManager.isAlias(ALIAS_1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertFalse(aliasManager.getCommand(ALIAS_1).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(EXISTING_COMMAND_1, ALIAS_1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertTrue(aliasManager.isAlias(ALIAS_1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertTrue(aliasManager.getCommand(ALIAS_1).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertEquals(aliasManager.getCommand(ALIAS_1).get(), EXISTING_COMMAND_1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Create an alias for a non-existing (invalid) command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void create_nonExistingCommand_unusedAlias() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertFalse(aliasManager.isAlias(ALIAS_1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertFalse(aliasManager.getCommand(ALIAS_1).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(NOVEL_COMMAND_1, ALIAS_1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertTrue(aliasManager.isAlias(ALIAS_1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertTrue(aliasManager.getCommand(ALIAS_1).isPresent());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertEquals(aliasManager.getCommand(ALIAS_1).get(), NOVEL_COMMAND_1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Attempt to create an alias for an existing (valid) command using another command as alias"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void create_existingCommand_aliasIsExistingCommand() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertFalse(aliasManager.isAlias(EXISTING_COMMAND_2));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertFalse(aliasManager.getCommand(EXISTING_COMMAND_2).isPresent());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(EXISTING_COMMAND_1, EXISTING_COMMAND_2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Attempt to create an alias for the alias (add) meta-command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void create_metaCommandAdd_unusedAlias() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(AliasManager.COMMAND_WORD_ADD, ALIAS_1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Attempt to create an alias for the alias-rm meta-command"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void create_metaCommandRemove_unusedAlias() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(AliasManager.COMMAND_WORD_REMOVE, ALIAS_1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Attempt to create an alias for an existing (valid) command using an existing alias"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void create_existingCommand_aliasIsExistingAlias() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertFalse(aliasManager.isAlias(ALIAS_1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(EXISTING_COMMAND_1, ALIAS_1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertTrue(aliasManager.isAlias(ALIAS_1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertEquals(aliasManager.getCommand(ALIAS_1).get(), EXISTING_COMMAND_1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(EXISTING_COMMAND_2, ALIAS_1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertTrue(aliasManager.isAlias(ALIAS_1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertEquals(aliasManager.getCommand(ALIAS_1).get(), EXISTING_COMMAND_2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Attempt to create an alias for another alias"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void create_commandIsAlias_unusedAlias() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(EXISTING_COMMAND_1, ALIAS_1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(ALIAS_1, ALIAS_2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void remove_existingAlias() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(EXISTING_COMMAND_1, ALIAS_1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertTrue(aliasManager.isAlias(ALIAS_1));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertEquals(aliasManager.getCommand(ALIAS_1).get(), EXISTING_COMMAND_1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.unregisterAlias(ALIAS_1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertFalse(aliasManager.isAlias(ALIAS_1));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertFalse(aliasManager.getCommand(ALIAS_1).isPresent());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void remove_nonExistingAlias() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(EXISTING_COMMAND_1, ALIAS_1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertTrue(aliasManager.isAlias(ALIAS_1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertEquals(aliasManager.getCommand(ALIAS_1).get(), EXISTING_COMMAND_1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.unregisterAlias(ALIAS_2); // Should not throw"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertTrue(aliasManager.isAlias(ALIAS_1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertTrue(aliasManager.getCommand(ALIAS_1).isPresent());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertFalse(aliasManager.isAlias(ALIAS_2));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertFalse(aliasManager.getCommand(ALIAS_2).isPresent());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Attempt to get alias list from an empty alias manager"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Should not throw an exception; should not mutate alias manager"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void list_emptyAliasManager() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fterh"
        },
        "content": "        HashMap\u003cString, String\u003e aliasList \u003d aliasManager.getAliasList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertFalse(aliasManager.getCommand(ALIAS_1).isPresent());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertNull(aliasList.get(ALIAS_1));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasList.put(ALIAS_1, EXISTING_COMMAND_1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertFalse(aliasManager.getCommand(ALIAS_1).isPresent());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fterh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Attempt to get alias list from a non-empty alias manager"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Should not throw an exception; should not mutate alias manager"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void list_nonEmptyAliasManager() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasManager.registerAlias(EXISTING_COMMAND_1, ALIAS_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fterh"
        },
        "content": "        HashMap\u003cString, String\u003e aliasList \u003d aliasManager.getAliasList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertTrue(aliasManager.getCommand(ALIAS_1).isPresent());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertEquals(aliasList.get(ALIAS_1), EXISTING_COMMAND_1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fterh"
        },
        "content": "        aliasList.remove(ALIAS_1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertTrue(aliasManager.getCommand(ALIAS_1).isPresent());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SOURCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Detail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.source.Type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"INV@L!D\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String INVALID_TYPE \u003d \"INV@L!D\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String INVALID_DETAIL \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String VALID_TITLE \u003d \"VALIDTITLE\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String VALID_TYPE \u003d \"VALIDTYPE\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String VALID_DETAIL \u003d \"VALIDDETAIL\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"foo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"bar\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(INDEX_FIRST_SOURCE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(INDEX_FIRST_SOURCE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void parseTitle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsTitle() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedTitle() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fterh"
        },
        "content": "        String titleWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(titleWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void parseType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseType((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void parseType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseType(INVALID_TYPE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void parseType_validValueWithoutWhitespace_returnsType() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Type expectedType \u003d new Type(VALID_TYPE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedType, ParserUtil.parseType(VALID_TYPE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void parseType_validValueWithWhitespace_returnsTrimmedType() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fterh"
        },
        "content": "        String typeWithWhitespace \u003d WHITESPACE + VALID_TYPE + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Type expectedType \u003d new Type(VALID_TYPE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedType, ParserUtil.parseType(typeWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void parseDetail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDetails((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void parseDetail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDetails(INVALID_DETAIL));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void parseDetail_validValueWithoutWhitespace_returnsDetail() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Detail expectedDetail \u003d new Detail(VALID_DETAIL);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedDetail, ParserUtil.parseDetails(VALID_DETAIL));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public void parseDetail_validValueWithWhitespace_returnsTrimmedDetail() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fterh"
        },
        "content": "        String detailWithWhitespace \u003d WHITESPACE + VALID_DETAIL + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Detail expectedDetail \u003d new Detail(VALID_DETAIL);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedDetail, ParserUtil.parseDetails(detailWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 136,
      "fterh": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SearchCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private SearchCommandParser parser \u003d new SearchCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //SearchCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                //new SearchCommand(new SourceContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 4,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SourceManagerParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SOURCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "case141"
        },
        "content": "import seedu.address.logic.commands.CountCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.testutil.EditSourceDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.testutil.SourceBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.testutil.SourceUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class SourceManagerParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    private SourceManagerParser parser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        parser \u003d new SourceManagerParser(); // Reset between tests"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Source source \u003d new SourceBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(SourceUtil.getAddCommand(source));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(new AddCommand(source), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "case141"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "case141"
        },
        "content": "    public void parseCommand_count() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "case141"
        },
        "content": "        assertTrue(parser.parseCommand(CountCommand.COMMAND_WORD) instanceof CountCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "case141"
        },
        "content": "        assertTrue(parser.parseCommand(CountCommand.COMMAND_WORD + \" 3\") instanceof CountCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "case141"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_SOURCE.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_SOURCE), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Source source \u003d new SourceBuilder().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": "        EditCommand.EditSourceDescriptor descriptor \u003d new EditSourceDescriptorBuilder(source).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "                + INDEX_FIRST_SOURCE.getOneBased() + \" \" + SourceUtil.getEditSourceDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_SOURCE, descriptor), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //SearchCommand command \u003d (SearchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "                //SearchCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        //assertEquals(new SearchCommand(new SourceContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fterh"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_SOURCE.getOneBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_SOURCE), command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    // Meta-commands (pertaining to AliasManager)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public void parseMetaCommand_addAlias_validArguments() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        parser.parseCommand(\"alias count c\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        assertTrue(parser.parseCommand(\"c\") instanceof CountCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public void parseMetaCommand_addAlias_invalidArguments1() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        parser.parseCommand(\"alias count\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public void parseMetaCommand_addAlias_invalidArguments2() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        parser.parseCommand(\"alias count c c\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public void parseMetaCommand_removeAlias_validArguments() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        parser.parseCommand(\"alias count c\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        parser.parseCommand(\"alias-rm c\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        parser.parseCommand(\"c\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public void parseMetaCommand_removeAlias_invalidArguments1() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        parser.parseCommand(\"alias count c\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        parser.parseCommand(\"alias-rm\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    public void parseMetaCommand_removeAlias_invalidArguments2() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        parser.parseCommand(\"alias count c c\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        parser.parseCommand(\"alias-rm\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 53,
      "case141": 6,
      "-": 116,
      "fterh": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "case141"
        },
        "content": "     * If there\u0027s no need for the verification of the exceptions\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "case141"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exceptions thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "case141"
        },
        "content": "     * Represents a function which does not return anything and may throw an exceptions."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "case141": 3,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditSourceDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditSourceDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Detail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": " * A utility class to help with building EditSourceDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class EditSourceDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditSourceDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public EditSourceDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "        descriptor \u003d new EditSourceDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public EditSourceDescriptorBuilder(EditSourceDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditSourceDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns an {@code EditSourceDescriptor} with fields containing {@code source}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public EditSourceDescriptorBuilder(Source source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditSourceDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "        descriptor.setTitle(source.getTitle());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "        descriptor.setType(source.getType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": "        descriptor.setDetails(source.getDetail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "        descriptor.setTags(source.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Sets the {@code Title} of the {@code EditSourceDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public EditSourceDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Sets the {@code Type} of the {@code EditSourceDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public EditSourceDescriptorBuilder withType(String type) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": "        descriptor.setType(new Type(type));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Sets the {@code Detail} of the {@code EditSourceDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public EditSourceDescriptorBuilder withDetail(String detail) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fterh"
        },
        "content": "        descriptor.setDetails(new Detail(detail));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditSourceDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public EditSourceDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public EditSourceDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "fterh": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "// To deprecate"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 93,
      "fterh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SourceBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Detail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": " * A utility class to help with building Source objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class SourceBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Default Title\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"Default Type\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String DEFAULT_DETAIL \u003d \"Default Detail\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private Detail detail;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "        type \u003d new Type(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "        detail \u003d new Detail(DEFAULT_DETAIL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Initializes the SourceBuilder with the data of {@code sourceToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceBuilder(Source sourceToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "        title \u003d sourceToCopy.getTitle();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "        type \u003d sourceToCopy.getType();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": "        detail \u003d sourceToCopy.getDetail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(sourceToCopy.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Sets the {@code Title} of the {@code Source} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Source} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Sets the {@code Type} of the {@code Source} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceBuilder withType(String type) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this.type \u003d new Type(type);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Sets the {@code Detail} of the {@code Source} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceBuilder withDetail(String detail) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this.detail \u003d new Detail(detail);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public Source build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return new Source(title, type, detail, tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SourceManagerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.SourceManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": " * A utility class to help with building SourceManager objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": " *     {@code SourceManager ab \u003d new SourceManagerBuilder().withSource(\"Foo\", \"Bar\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class SourceManagerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private SourceManager sourceManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceManagerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sourceManager \u003d new SourceManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceManagerBuilder(SourceManager sourceManager) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "        this.sourceManager \u003d sourceManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Adds a new {@code Source} to the {@code SourceManager} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceManagerBuilder withSource(Source source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sourceManager.addSource(source);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceManager build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return sourceManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fterh": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SourceUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fterh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditSourceDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fterh"
        },
        "content": " * A utility class for Source."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class SourceUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns an add command string for adding the {@code source}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static String getAddCommand(Source source) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getSourceDetails(source);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns the part of command string for the given {@code source}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static String getSourceDetails(Source source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sb.append(PREFIX_TITLE + source.getTitle().title + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sb.append(PREFIX_TYPE + source.getType().type + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "        sb.append(PREFIX_DETAILS + source.getDetail().detail + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "        source.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns the part of command string for the given {@code EditSourceDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static String getEditSourceDescriptorDetails(EditSourceDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "        descriptor.getTitle().ifPresent(title -\u003e sb.append(PREFIX_TITLE).append(title.title).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "        descriptor.getType().ifPresent(type -\u003e sb.append(PREFIX_TYPE).append(type.type).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": "        descriptor.getDetails().ifPresent(detail -\u003e sb.append(PREFIX_DETAILS).append(detail.detail).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fterh"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fterh"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fterh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "fterh": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns the middle index of the source in the {@code model}\u0027s source list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredSourceList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns the last index of the source in the {@code model}\u0027s source list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredSourceList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns the source in the {@code model}\u0027s source list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static Source getSource(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return model.getFilteredSourceList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "fterh": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final Index INDEX_FIRST_SOURCE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final Index INDEX_SECOND_SOURCE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final Index INDEX_THIRD_SOURCE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "fterh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSources.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fterh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FOO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.DeletedSources;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.SourceManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": " * A utility class containing a list of {@code Source} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class TypicalSources {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final Source ALICE \u003d new SourceBuilder().withTitle(\"Alice Pauline\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withType(\"alice type\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "            .withDetail(\"alice_detail\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fterh"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final Source BENSON \u003d new SourceBuilder().withTitle(\"Benson Meier\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withType(\"benson type\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fterh"
        },
        "content": "            .withDetail(\"benson_detail\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final Source CARL \u003d new SourceBuilder().withTitle(\"Carl Kurz\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withType(\"carl type\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "            .withDetail(\"carl_detail\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final Source DANIEL \u003d new SourceBuilder().withTitle(\"Daniel Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withType(\"daniel type\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fterh"
        },
        "content": "            .withDetail(\"daniel_detail\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final Source ELLE \u003d new SourceBuilder().withTitle(\"Elle Meyer\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withType(\"elle type\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fterh"
        },
        "content": "            .withDetail(\"elle_detail\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final Source FIONA \u003d new SourceBuilder().withTitle(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withType(\"fiona type\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "            .withDetail(\"fiona_detail\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final Source GEORGE \u003d new SourceBuilder().withTitle(\"George Best\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withType(\"george type\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fterh"
        },
        "content": "            .withDetail(\"george_detail\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Source ALGORITHMS \u003d new SourceBuilder().withTitle(\"Algorithms 101\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .withType(\"Coding\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .withDetail(\"How to write algorithms for code.\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fterh"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final Source HOON \u003d new SourceBuilder().withTitle(\"Hoon Meier\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withType(\"hoon type\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fterh"
        },
        "content": "            .withDetail(\"hoon_detail\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final Source IDA \u003d new SourceBuilder().withTitle(\"Ida Mueller\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .withType(\"ida type\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fterh"
        },
        "content": "            .withDetail(\"ida_detail\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Source AMY \u003d new SourceBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .withType(VALID_TYPE_AMY).withDetail(VALID_DETAIL_AMY).withTags(VALID_TAG_FOO).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Source BOB \u003d new SourceBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .withType(VALID_TYPE_BOB).withDetail(VALID_DETAIL_BOB).withTags(VALID_TAG_BAR, VALID_TAG_FOO).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private TypicalSources() {} // prevents instantiation"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fterh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns a {@code SourceManager} with all the typical sources."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fterh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static SourceManager getTypicalSourceManager() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fterh"
        },
        "content": "        SourceManager sm \u003d new SourceManager();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fterh"
        },
        "content": "        for (Source source : getTypicalSources()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fterh"
        },
        "content": "            sm.addSource(source);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fterh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return sm;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fterh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code DeletedSources} with all the typical deleted sources."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DeletedSources getTypicalDeletedSources() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        DeletedSources ds \u003d new DeletedSources();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Source source : getTypicalDeletedSourcesList()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            ds.addDeletedSource(source);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return ds;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static List\u003cSource\u003e getTypicalSources() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fterh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cSource\u003e getTypicalDeletedSourcesList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALGORITHMS));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fterh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "fterh": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "case141"
        },
        "content": "            // expected exceptions thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "case141"
        },
        "content": "            // expected exceptions thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "case141"
        },
        "content": "            // expected exceptions thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "case141": 3,
      "-": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "import guitests.guihandles.SourceCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import guitests.guihandles.SourceListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static void assertCardEquals(SourceCardHandle expectedCard, SourceCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedCard.getDetail(), actualCard.getDetail());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedCard.getType(), actualCard.getType());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedCard.getTitle(), actualCard.getTitle());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedSource}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysSource(Source expectedSource, SourceCardHandle actualCard) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedSource.getTitle().title, actualCard.getTitle());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedSource.getType().type, actualCard.getType());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedSource.getDetail().detail, actualCard.getDetail());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedSource.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Asserts that the list in {@code sourceListPanelHandle} displays the details of {@code sources} correctly and"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static void assertListMatching(SourceListPanelHandle sourceListPanelHandle, Source... sources) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": "        for (int i \u003d 0; i \u003c sources.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fterh"
        },
        "content": "            sourceListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysSource(sources[i], sourceListPanelHandle.getSourceCardHandle(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Asserts that the list in {@code sourceListPanelHandle} displays the details of {@code sources} correctly and"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static void assertListMatching(SourceListPanelHandle sourceListPanelHandle, List\u003cSource\u003e sources) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertListMatching(sourceListPanelHandle, sources.toArray(new Source[0]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Asserts the size of the list in {@code sourceListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static void assertListSize(SourceListPanelHandle sourceListPanelHandle, int size) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fterh"
        },
        "content": "        int numberOfSources \u003d sourceListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(size, numberOfSources);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "fterh": 23
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static final Predicate\u003cSource\u003e PREDICATE_MATCHING_NO_SOURCES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cSource\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Optional\u003cPredicate\u003cSource\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fterh"
        },
        "content": "        model.updateFilteredSourceList(predicate.orElse(PREDICATE_MATCHING_NO_SOURCES));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public static void setFilteredList(Model model, Source... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Source} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fterh"
        },
        "content": "    private static Predicate\u003cSource\u003e getPredicateMatching(Source other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return source -\u003e source.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "fterh": 9
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.SourceManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.source.Source;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fterh"
        },
        "content": "public class SampleDataTest extends SourceManagerSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fterh"
        },
        "content": "    protected SourceManager getInitialData() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fterh"
        },
        "content": "        Source[] expectedList \u003d SampleDataUtil.getSampleSources();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertListMatching(getSourceListPanel(), expectedList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "fterh": 5
    }
  },
  {
    "path": "src/test/java/systemtests/SearchCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SOURCES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommandSystemTest extends SourceManagerSystemTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void search() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search multiple sources in source manager, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "             * -\u003e 2 sources found"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "             */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        String command \u003d \"   \" + SearchCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        // first titles of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: repeat previous search command where source list is displaying the sources we are searching"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "             * -\u003e 2 sources found"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "             */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search source where source list is not displaying the source we are searching -\u003e 1 source found */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search multiple sources in source manager, 2 keywords -\u003e 2 sources found */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search multiple sources in source manager, 2 keywords in reversed order -\u003e 2 sources found */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search multiple sources in source manager, 2 keywords with 1 repeat -\u003e 2 sources found */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search multiple sources in source manager, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "             * -\u003e 2 sources found"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "             */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            //        command \u003d SearchCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        /* Case: undo previous search command -\u003e rejected */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: redo previous search command -\u003e rejected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search same sources in source manager after deleting 1 of them -\u003e 1 source found */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertFalse(getModel().getSourceManager().getSourceList().contains(BENSON));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            /* Case: search source in source manager,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "            keyword is same as name but of different case -\u003e 1 source found */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search source in source manager, keyword is substring of name -\u003e 0 sources found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search source in source manager, name is substring of keyword -\u003e 0 sources found */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search source not in source manager -\u003e 0 sources found */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search address of source in source manager -\u003e 0 sources found */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            //        command \u003d SearchCommand.COMMAND_WORD + \" \" + DANIEL.getType().type;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search email of source in source manager -\u003e 0 sources found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" \" + DANIEL.getDetail().detail;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search tags of source in source manager -\u003e 0 sources found */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search while a source is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        showAllSources();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        selectSource(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertFalse(getSourceListPanel().getHandleToSelectedCard().getTitle().equals(DANIEL.getTitle().title));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: search source in empty source manager -\u003e 0 sources found */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        deleteAllSources();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        command \u003d SearchCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            //        command \u003d \"search Meier\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            //        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_SOURCES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SourceManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SourceManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SOURCES_LISTED_OVERVIEW, expectedModel.getFilteredSourceList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SourceManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SourceManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "suriruhani"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 79,
      "-": 102
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_SOURCE_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SOURCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends SourceManagerSystemTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the source list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_SOURCE.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_SOURCE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the source list -\u003e selected */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        //        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        //        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        //        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        //        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* Case: select the middle card in the source list -\u003e selected */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        //        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        //        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* ------------------------ Perform select operations on the shown"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        //        filtered list ---------------------------- */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* Case: filtered source list, select index within bounds of source"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //        manager but out of bounds of source list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //         * -\u003e rejected"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        //        showSourcesWithTitle(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        //        int invalidIndex \u003d getModel().getSourceManager().getSourceList().size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        //        MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* Case: filtered person list, select index within bounds of address book"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        //        and person list -\u003e selected */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        //        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredSourceList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        //        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* ----------------------------------- Perform invalid select operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //        ------------------------------------ */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        //                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        //                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        //        invalidIndex \u003d getModel().getFilteredSourceList().size() + 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //        MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        //                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        //        deleteAllSources();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_SOURCE.getOneBased(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //                MESSAGE_INVALID_SOURCE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code SourceListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SourceManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SourceManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SourceManagerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_SOURCE_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getSourceListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            //            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code SourceListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code SourceManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see SourceManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 2,
      "-": 151
    }
  },
  {
    "path": "src/test/java/systemtests/SourceManagerSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.SourceListPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.SourceManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.testutil.TypicalSources;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fterh"
        },
        "content": " * A system test class for SourceManager, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fterh"
        },
        "content": "public abstract class SourceManagerSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fterh"
        },
        "content": "    protected SourceManager getInitialData() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return TypicalSources.getTypicalSourceManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public SourceListPanelHandle getSourceListPanel() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fterh"
        },
        "content": "        return mainWindowHandle.getSourceListPanel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Displays all sources in the source manager."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fterh"
        },
        "content": "    protected void showAllSources() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(getModel().getSourceManager().getSourceList().size(), getModel().getFilteredSourceList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Displays all sources with any parts of their titles matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fterh"
        },
        "content": "    protected void showSourcesWithTitle(String keyword) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "suriruhani"
        },
        "content": "        executeCommand(SearchCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertTrue(getModel().getFilteredSourceList().size() \u003c getModel().getSourceManager().getSourceList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Selects the source at {@code index} of the displayed list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fterh"
        },
        "content": "    protected void selectSource(Index index) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(index.getZeroBased(), getSourceListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Deletes all sources in the source manager."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fterh"
        },
        "content": "    protected void deleteAllSources() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(0, getModel().getSourceManager().getSourceList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same source objects as {@code expectedModel}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * and the source list panel displays the sources in the model correctly."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(new SourceManager(expectedModel.getSourceManager()), testApp.readStorageSourceManager());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertListMatching(getSourceListPanel(), expectedModel.getFilteredSourceList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code SourceListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fterh"
        },
        "content": "        getSourceListPanel().rememberSelectedSourceCard();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertFalse(getSourceListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the source in the source list panel at"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @see SourceListPanelHandle#isSelectedSourceCardChanged()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fterh"
        },
        "content": "        getSourceListPanel().navigateToCard(getSourceListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fterh"
        },
        "content": "        String selectedCardTitle \u003d getSourceListPanel().getHandleToSelectedCard().getTitle();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fterh"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardTitle.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getSourceListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the source list panel remain unchanged."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fterh"
        },
        "content": "     * @see SourceListPanelHandle#isSelectedSourceCardChanged()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertFalse(getSourceListPanel().isSelectedSourceCardChanged());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "fterh"
        },
        "content": "        assertListMatching(getSourceListPanel(), getModel().getFilteredSourceList());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "suriruhani": 2,
      "-": 249,
      "fterh": 36
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fterh"
        },
        "content": "import seedu.address.model.ReadOnlySourceManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fterh"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlySourceManager\u003e sourceManager, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fterh"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(sourceManager, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "fterh": 3
    }
  }
]
